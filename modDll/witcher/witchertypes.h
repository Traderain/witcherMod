#ifndef WITCHERTYPES_H
#define WITCHERTYPES_H
#include "structs.h"
class CAIFormationData {
public:
	union {
	};
};

class CAISlotFormationLeaderData {
public:
	union {
	};
};

class CAISteeringFormationLeaderData {
public:
	union {
	};
};

class CAISteeringGraphData {
public:
	union {
	};
};

class CAllocatedBehaviorGraphOutput {
public:
	union {
	};
};

class CAllocatedLipsyncBehaviorGraphOutput {
public:
	union {
	};
};

class CAnimationSyncToken {
public:
	union {
	};
};

class CAnimationSyncToken_Dyng {
public:
	union {
	};
};

class CBehaviorNodeSyncData {
public:
	union {
	float m_timeMultiplier;
	};
};

class CBehTreeCluePathData {
public:
	union {
	};
};

class CBehTreeCounterData {
public:
	union {
	};
};

class CBehTreeCustomMoveData {
public:
	union {
	};
};

class CBehTreeFlightData {
public:
	union {
	};
};

class CBehTreeGuardAreaData {
public:
	union {
	};
};

class CBehTreePositioningRequest {
public:
	union {
	};
};

class CBehTreeSpawnContext {
public:
	union {
	};
};

class CBehTreeTicketData {
public:
	union {
	};
};

class CBehTreeValBool {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(bool, m_value, m_value, 4);
	};
};

class CBehTreeValCName {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 4);
	};
};

class CBehTreeValFloat {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(float, m_value, m_value, 4);
	};
};

class CBehTreeValInt {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 4);
	};
};

class CBehTreeValList {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t*, m_value[2], m_value, 4);
	};
};

class CBehTreeValString {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(char*, m_value, m_value, 4);
	};
};

class CBehTreeWorkData {
public:
	union {
	};
};

class CBuffImmunity {
public:
	union {
		MAKE_PADDED_VAR(int32_t*, m_immunityTo[2], m_immunityTo, 8);
		MAKE_PADDED_VAR(bool, m_potion, m_potion, 20);
		MAKE_PADDED_VAR(bool, m_positive, m_positive, 21);
		MAKE_PADDED_VAR(bool, m_negative, m_negative, 22);
		MAKE_PADDED_VAR(bool, m_neutral, m_neutral, 23);
		MAKE_PADDED_VAR(bool, m_immobilize, m_immobilize, 24);
		MAKE_PADDED_VAR(bool, m_confuse, m_confuse, 25);
		MAKE_PADDED_VAR(bool, m_damage, m_damage, 26);
	};
};

class CColorShift {
public:
	union {
	uint16_t m_hue;
		MAKE_PADDED_VAR(int8_t, m_saturation, m_saturation, 2);
		MAKE_PADDED_VAR(int8_t, m_luminance, m_luminance, 3);
	};
};

class CComponentReference {
public:
	union {
	char* m_name;
		MAKE_PADDED_VAR(int32_t, m_className, m_className, 12);
	};
};

class CEDSavedAnswer {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_questionName, m_questionName, 8);
		MAKE_PADDED_VAR(char*, m_answer, m_answer, 12);
	};
};

class CEdWizardSavedAnswers {
public:
	union {
		MAKE_PADDED_VAR(CEDSavedAnswer*, m_list[2], m_list, 8);
	};
};

class CEntityAppearance {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(int32_t, m_voicetag, m_voicetag, 4);
		MAKE_PADDED_VAR(intptr_t*, m_appearanceParams[2], m_appearanceParams, 8);
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 20);
		MAKE_PADDED_VAR(bool, m_useVertexCollapse, m_useVertexCollapse, 21);
		MAKE_PADDED_VAR(bool, m_usesRobe, m_usesRobe, 22);
		MAKE_PADDED_VAR(intptr_t*, m_includedTemplates[2], m_includedTemplates, 24);
		MAKE_PADDED_VAR(int32_t*, m_collapsedComponents[2], m_collapsedComponents, 36);
	};
};

class CEntityBodyPart {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(intptr_t*, m_states[2], m_states, 4);
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 16);
	};
};

class CEntityBodyPartState {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(CComponentReference*, m_componentsInUse[2], m_componentsInUse, 4);
	};
};

class CEnvDisplaySettingsParams {
public:
	union {
	float m_gamma;
		MAKE_PADDED_VAR(bool, m_enableInstantAdaptation, m_enableInstantAdaptation, 4);
		MAKE_PADDED_VAR(bool, m_enableGlobalLightingTrajectory, m_enableGlobalLightingTrajectory, 5);
		MAKE_PADDED_VAR(bool, m_enableEnvProbeInstantUpdate, m_enableEnvProbeInstantUpdate, 6);
		MAKE_PADDED_VAR(bool, m_allowEnvProbeUpdate, m_allowEnvProbeUpdate, 7);
		MAKE_PADDED_VAR(bool, m_allowBloom, m_allowBloom, 8);
		MAKE_PADDED_VAR(bool, m_allowColorMod, m_allowColorMod, 9);
		MAKE_PADDED_VAR(bool, m_allowAntialiasing, m_allowAntialiasing, 10);
		MAKE_PADDED_VAR(bool, m_allowGlobalFog, m_allowGlobalFog, 11);
		MAKE_PADDED_VAR(bool, m_allowDOF, m_allowDOF, 12);
		MAKE_PADDED_VAR(bool, m_allowSSAO, m_allowSSAO, 13);
		MAKE_PADDED_VAR(bool, m_allowCloudsShadow, m_allowCloudsShadow, 14);
		MAKE_PADDED_VAR(bool, m_allowVignette, m_allowVignette, 15);
		MAKE_PADDED_VAR(bool, m_allowWaterShader, m_allowWaterShader, 18);
	};
};

class CExtAnimEvent {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
	};
};

class CExtAnimHitEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(uint32_t, m_hitLevel, m_hitLevel, 32);
	};
};

class CExtAnimItemAnimationEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_itemCategory, m_itemCategory, 32);
		MAKE_PADDED_VAR(int32_t, m_itemAnimationName, m_itemAnimationName, 36);
	};
};

class CExtAnimItemBehaviorEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_itemCategory, m_itemCategory, 32);
		MAKE_PADDED_VAR(int32_t, m_event, m_event, 36);
	};
};

class CExtAnimMaterialBasedFxEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_bone, m_bone, 32);
		MAKE_PADDED_VAR(bool, m_vfxKickup, m_vfxKickup, 36);
		MAKE_PADDED_VAR(bool, m_vfxFootstep, m_vfxFootstep, 37);
	};
};

class CExtAnimRaiseEventEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_eventToBeRaisedName, m_eventToBeRaisedName, 32);
		MAKE_PADDED_VAR(bool, m_forceRaiseEvent, m_forceRaiseEvent, 36);
	};
};

class CExtAnimScriptEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
	};
};

class CFistfightOpponent {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 8);
		MAKE_PADDED_VAR(int32_t, m_startingPosTag, m_startingPosTag, 12);
	};
};

class CFlyingGroupId {
public:
	union {
	};
};

class CFormationLeaderData {
public:
	union {
	};
};

class CFormationSlotDefinition {
public:
	union {
		MAKE_PADDED_VAR(intptr_t*, m_constraints[2], m_constraints, 8);
	};
};

class CItemAnimationSyncToken {
public:
	union {
	};
};

class CLootDefinitionBase {
public:
	union {
	};
};

class COcclusionQueryPtr {
public:
	union {
	};
};

class CollectionCard {
public:
	union {
	int32_t m_cardID;
		MAKE_PADDED_VAR(int32_t, m_numCopies, m_numCopies, 4);
	};
};

class Color {
public:
	union {
	char m_Red;
		MAKE_PADDED_VAR(char, m_Green, m_Green, 1);
		MAKE_PADDED_VAR(char, m_Blue, m_Blue, 2);
		MAKE_PADDED_VAR(char, m_Alpha, m_Alpha, 3);
	};
};

class ConvexHull {
public:
	union {
	intptr_t* m_planes[2];
	};
};

class CPathLibSettings {
public:
	union {
	uint32_t m_agentCategoriesCount;
		MAKE_PADDED_VAR(float, m_agentCategoryRadius1, m_agentCategoryRadius1, 4);
		MAKE_PADDED_VAR(float, m_agentCategoryRadius2, m_agentCategoryRadius2, 8);
		MAKE_PADDED_VAR(float, m_agentCategoryRadius3, m_agentCategoryRadius3, 12);
		MAKE_PADDED_VAR(float, m_agentCategoryRadius4, m_agentCategoryRadius4, 16);
		MAKE_PADDED_VAR(float, m_roadsNavcostMultiplier, m_roadsNavcostMultiplier, 20);
		MAKE_PADDED_VAR(float, m_maxTerrainSlope, m_maxTerrainSlope, 24);
		MAKE_PADDED_VAR(float, m_seaLevel, m_seaLevel, 28);
		MAKE_PADDED_VAR(float, m_desiredStreamingRange, m_desiredStreamingRange, 32);
		MAKE_PADDED_VAR(float, m_terrainWalkableRegionMinSize, m_terrainWalkableRegionMinSize, 36);
		MAKE_PADDED_VAR(float, m_terrainUnwalkableRegionMinSize, m_terrainUnwalkableRegionMinSize, 40);
		MAKE_PADDED_VAR(float, m_terrainNavmeshSurroundedRegionMinSize, m_terrainNavmeshSurroundedRegionMinSize, 44);
		MAKE_PADDED_VAR(float, m_terrainHeightApproximationRange, m_terrainHeightApproximationRange, 48);
	};
};

class CPreAttackEventData {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_attackName, m_attackName, 8);
		MAKE_PADDED_VAR(int32_t, m_weaponSlot, m_weaponSlot, 12);
		MAKE_PADDED_VAR(int32_t, m_rangeName, m_rangeName, 16);
		MAKE_PADDED_VAR(int32_t, m_hitReactionType, m_hitReactionType, 20);
		MAKE_PADDED_VAR(int32_t, m_swingDir, m_swingDir, 28);
		MAKE_PADDED_VAR(int32_t, m_swingType, m_swingType, 32);
		MAKE_PADDED_VAR(int32_t, m_hitFX, m_hitFX, 36);
		MAKE_PADDED_VAR(int32_t, m_hitBackFX, m_hitBackFX, 40);
		MAKE_PADDED_VAR(int32_t, m_hitParriedFX, m_hitParriedFX, 44);
		MAKE_PADDED_VAR(int32_t, m_hitBackParriedFX, m_hitBackParriedFX, 48);
		MAKE_PADDED_VAR(bool, m_Damage_Friendly, m_Damage_Friendly, 52);
		MAKE_PADDED_VAR(bool, m_Damage_Neutral, m_Damage_Neutral, 53);
		MAKE_PADDED_VAR(bool, m_Damage_Hostile, m_Damage_Hostile, 54);
		MAKE_PADDED_VAR(bool, m_Can_Parry_Attack, m_Can_Parry_Attack, 55);
		MAKE_PADDED_VAR(int32_t, m_soundAttackType, m_soundAttackType, 56);
		MAKE_PADDED_VAR(bool, m_canBeDodged, m_canBeDodged, 60);
		MAKE_PADDED_VAR(int32_t, m_cameraAnimOnMissedHit, m_cameraAnimOnMissedHit, 64);
	};
};

class CR4LootContainerParam {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 8);
		MAKE_PADDED_VAR(float, m_chance, m_chance, 12);
		MAKE_PADDED_VAR(uint32_t, m_respawnTime, m_respawnTime, 16);
	};
};

class CR4LootDefinitionBase {
public:
	union {
	CLootDefinitionBase clootdefinitionbase;
		MAKE_PADDED_VAR(uint32_t, m_quantityMin, m_quantityMin, 16);
		MAKE_PADDED_VAR(uint32_t, m_quantityMax, m_quantityMax, 20);
		MAKE_PADDED_VAR(uint32_t, m_playerLevelMin, m_playerLevelMin, 24);
		MAKE_PADDED_VAR(uint32_t, m_playerLevelMax, m_playerLevelMax, 28);
		MAKE_PADDED_VAR(uint32_t, m_crafterLevelMin, m_crafterLevelMin, 32);
		MAKE_PADDED_VAR(uint32_t, m_crafterLevelMax, m_crafterLevelMax, 36);
	};
};

class CR4LootItemDefinition {
public:
	union {
	CR4LootDefinitionBase cr4lootdefinitionbase;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 8);
		MAKE_PADDED_VAR(uint32_t, m_quantityMin, m_quantityMin, 16);
		MAKE_PADDED_VAR(uint32_t, m_quantityMax, m_quantityMax, 20);
		MAKE_PADDED_VAR(uint32_t, m_playerLevelMin, m_playerLevelMin, 24);
		MAKE_PADDED_VAR(uint32_t, m_playerLevelMax, m_playerLevelMax, 28);
		MAKE_PADDED_VAR(uint32_t, m_crafterLevelMin, m_crafterLevelMin, 32);
		MAKE_PADDED_VAR(uint32_t, m_crafterLevelMax, m_crafterLevelMax, 36);
		MAKE_PADDED_VAR(float, m_chance, m_chance, 56);
	};
};

class CSLayerName {
public:
	union {
	int32_t m_layerName;
	};
};

class CSSpawnType {
public:
	union {
	int32_t m_spawnType;
	};
};

class CSStoryPhaseTimetableActionEntry {
public:
	union {
	CSLayerName m_layerName;
		MAKE_PADDED_VAR(intptr_t*, m_actionCategories[2], m_actionCategories, 16);
	};
};

class CSStoryPhaseTimetableEntry {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(intptr_t*, m_actionCategies[2], m_actionCategies, 4);
	};
};

class CStorySceneLocaleVariantMapping {
public:
	union {
	uint32_t m_localeId;
		MAKE_PADDED_VAR(uint32_t, m_variantId, m_variantId, 4);
	};
};

class CStorySceneSectionVariant {
public:
	union {
	uint32_t m_id;
		MAKE_PADDED_VAR(uint32_t, m_localeId, m_localeId, 4);
		MAKE_PADDED_VAR(intptr_t*, m_events[2], m_events, 8);
		MAKE_PADDED_VAR(intptr_t*, m_elementInfo[2], m_elementInfo, 20);
	};
};

class CStorySceneSectionVariantElementInfo {
public:
	union {
	char* m_elementId;
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 12);
	};
};

class CStorySceneVoicetagMapping {
public:
	union {
	int32_t m_voicetag;
		MAKE_PADDED_VAR(bool, m_mustUseContextActor, m_mustUseContextActor, 4);
		MAKE_PADDED_VAR(bool, m_actorOptional, m_actorOptional, 5);
		MAKE_PADDED_VAR(bool, m_invulnerable, m_invulnerable, 6);
	};
};

class CTaggedActorsListener {
public:
	union {
	};
};

class CTemplateLoadRequest {
public:
	union {
	};
};

class CTicketSourceConfiguration {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 8);
		MAKE_PADDED_VAR(uint16_t, m_ticketsPoolSize, m_ticketsPoolSize, 12);
		MAKE_PADDED_VAR(float, m_minimalImportance, m_minimalImportance, 16);
	};
};

class CWindParameters {
public:
	union {
		MAKE_PADDED_VAR(bool, m_speedTreeEnabled, m_speedTreeEnabled, 8);
	};
};

class CWorldShadowConfig {
public:
	union {
	int32_t m_numCascades;
		MAKE_PADDED_VAR(float, m_cascadeRange1, m_cascadeRange1, 4);
		MAKE_PADDED_VAR(float, m_cascadeRange2, m_cascadeRange2, 8);
		MAKE_PADDED_VAR(float, m_cascadeRange3, m_cascadeRange3, 12);
		MAKE_PADDED_VAR(float, m_cascadeRange4, m_cascadeRange4, 16);
		MAKE_PADDED_VAR(float, m_cascadeFilterSize1, m_cascadeFilterSize1, 20);
		MAKE_PADDED_VAR(float, m_cascadeFilterSize2, m_cascadeFilterSize2, 24);
		MAKE_PADDED_VAR(float, m_cascadeFilterSize3, m_cascadeFilterSize3, 28);
		MAKE_PADDED_VAR(float, m_cascadeFilterSize4, m_cascadeFilterSize4, 32);
		MAKE_PADDED_VAR(float, m_shadowEdgeFade1, m_shadowEdgeFade1, 36);
		MAKE_PADDED_VAR(float, m_shadowEdgeFade2, m_shadowEdgeFade2, 40);
		MAKE_PADDED_VAR(float, m_shadowEdgeFade3, m_shadowEdgeFade3, 44);
		MAKE_PADDED_VAR(float, m_shadowEdgeFade4, m_shadowEdgeFade4, 48);
		MAKE_PADDED_VAR(float, m_shadowBiasOffsetSlopeMul, m_shadowBiasOffsetSlopeMul, 52);
		MAKE_PADDED_VAR(float, m_shadowBiasOffsetConst, m_shadowBiasOffsetConst, 56);
		MAKE_PADDED_VAR(float, m_shadowBiasOffsetConstCascade1, m_shadowBiasOffsetConstCascade1, 60);
		MAKE_PADDED_VAR(float, m_shadowBiasOffsetConstCascade2, m_shadowBiasOffsetConstCascade2, 64);
		MAKE_PADDED_VAR(float, m_shadowBiasOffsetConstCascade3, m_shadowBiasOffsetConstCascade3, 68);
		MAKE_PADDED_VAR(float, m_shadowBiasOffsetConstCascade4, m_shadowBiasOffsetConstCascade4, 72);
		MAKE_PADDED_VAR(float, m_shadowBiasCascadeMultiplier, m_shadowBiasCascadeMultiplier, 76);
		MAKE_PADDED_VAR(float, m_speedTreeShadowFilterSize1, m_speedTreeShadowFilterSize1, 80);
		MAKE_PADDED_VAR(float, m_speedTreeShadowFilterSize2, m_speedTreeShadowFilterSize2, 84);
		MAKE_PADDED_VAR(float, m_speedTreeShadowFilterSize3, m_speedTreeShadowFilterSize3, 88);
		MAKE_PADDED_VAR(float, m_speedTreeShadowFilterSize4, m_speedTreeShadowFilterSize4, 92);
		MAKE_PADDED_VAR(float, m_speedTreeShadowGradient, m_speedTreeShadowGradient, 96);
		MAKE_PADDED_VAR(float, m_hiResShadowBiasOffsetSlopeMul, m_hiResShadowBiasOffsetSlopeMul, 100);
		MAKE_PADDED_VAR(float, m_hiResShadowBiasOffsetConst, m_hiResShadowBiasOffsetConst, 104);
		MAKE_PADDED_VAR(float, m_hiResShadowTexelRadius, m_hiResShadowTexelRadius, 108);
		MAKE_PADDED_VAR(bool, m_useTerrainShadows, m_useTerrainShadows, 112);
		MAKE_PADDED_VAR(float, m_terrainShadowsDistance, m_terrainShadowsDistance, 116);
		MAKE_PADDED_VAR(float, m_terrainShadowsFadeRange, m_terrainShadowsFadeRange, 120);
		MAKE_PADDED_VAR(float, m_terrainShadowsBaseSmoothing, m_terrainShadowsBaseSmoothing, 124);
		MAKE_PADDED_VAR(float, m_terrainShadowsTerrainDistanceSoftness, m_terrainShadowsTerrainDistanceSoftness, 128);
		MAKE_PADDED_VAR(float, m_terrainShadowsMeshDistanceSoftness, m_terrainShadowsMeshDistanceSoftness, 132);
		MAKE_PADDED_VAR(float, m_terrainMeshShadowDistance, m_terrainMeshShadowDistance, 136);
		MAKE_PADDED_VAR(float, m_terrainMeshShadowFadeRange, m_terrainMeshShadowFadeRange, 140);
	};
};

class EmitterDelaySettings {
public:
	union {
	float m_emitterDelay;
		MAKE_PADDED_VAR(float, m_emitterDelayLow, m_emitterDelayLow, 4);
		MAKE_PADDED_VAR(bool, m_useEmitterDelayRange, m_useEmitterDelayRange, 8);
		MAKE_PADDED_VAR(bool, m_useEmitterDelayOnce, m_useEmitterDelayOnce, 9);
	};
};

class EmitterDurationSettings {
public:
	union {
	float m_emitterDuration;
		MAKE_PADDED_VAR(float, m_emitterDurationLow, m_emitterDurationLow, 4);
		MAKE_PADDED_VAR(bool, m_useEmitterDurationRange, m_useEmitterDurationRange, 8);
	};
};

class EngineTime {
public:
	union {
	};
};

class EulerAngles {
public:
	union {
	float m_Roll;
		MAKE_PADDED_VAR(float, m_Pitch, m_Pitch, 4);
		MAKE_PADDED_VAR(float, m_Yaw, m_Yaw, 8);
	};
};

class GameTime {
public:
	union {
	int32_t m_m_seconds;
	};
};

class GameTimeInterval {
public:
	union {
	GameTime m_begin;
		MAKE_PADDED_VAR(GameTime, m_end, m_end, 4);
	};
};

class GameTimeWrapper {
public:
	union {
	GameTime m_gameTime;
	};
};

class IReferencable {
public:
	union {
	};
};

class ISerializable {
public:
	union {
	IReferencable ireferencable;
	};
};

class ISkeletalAnimationExporter {
public:
	union {
	};
};

class ISkeletalAnimationImporter {
public:
	union {
	};
};

class ISkeletalAnimationSetEntryParam {
public:
	union {
	ISerializable iserializable;
	};
};

class LongBitField {
public:
	union {
	uint32_t* m_mem[2];
	};
};

class ParticleBurst {
public:
	union {
	float m_burstTime;
		MAKE_PADDED_VAR(uint32_t, m_spawnCount, m_spawnCount, 4);
		MAKE_PADDED_VAR(float, m_spawnTimeRange, m_spawnTimeRange, 8);
		MAKE_PADDED_VAR(float, m_repeatTime, m_repeatTime, 12);
	};
};

class Rect {
public:
	union {
	int32_t m_m_left;
		MAKE_PADDED_VAR(int32_t, m_m_top, m_m_top, 4);
		MAKE_PADDED_VAR(int32_t, m_m_right, m_m_right, 8);
		MAKE_PADDED_VAR(int32_t, m_m_bottom, m_m_bottom, 12);
	};
};

class SAbilityAttributeValue {
public:
	union {
	float m_valueAdditive;
		MAKE_PADDED_VAR(float, m_valueMultiplicative, m_valueMultiplicative, 4);
		MAKE_PADDED_VAR(float, m_valueBase, m_valueBase, 8);
	};
};

class SActionMatchToSettings {
public:
	union {
	int32_t m_animation;
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 4);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 8);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 12);
		MAKE_PADDED_VAR(bool, m_useGameTimeScale, m_useGameTimeScale, 16);
		MAKE_PADDED_VAR(bool, m_useRotationDeltaPolicy, m_useRotationDeltaPolicy, 17);
		MAKE_PADDED_VAR(int32_t, m_matchBoneName, m_matchBoneName, 20);
		MAKE_PADDED_VAR(int32_t, m_matchEventName, m_matchEventName, 24);
	};
};

class SActionMatchToTarget {
public:
	union {
	};
};

class SActiveVitalSpotEventData {
public:
	union {
	};
};

class SAIPositionPrediction {
public:
	union {
	};
};

class SAIReactionRange {
public:
	union {
	bool m_enabled;
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 4);
		MAKE_PADDED_VAR(float, m_rangeAngle, m_rangeAngle, 8);
		MAKE_PADDED_VAR(float, m_rangeBottom, m_rangeBottom, 12);
		MAKE_PADDED_VAR(float, m_rangeTop, m_rangeTop, 16);
		MAKE_PADDED_VAR(float, m_yaw, m_yaw, 20);
	};
};

class SAlchemySubstanceData {
public:
	union {
	int32_t m_type;
		MAKE_PADDED_VAR(int32_t, m_level, m_level, 4);
		MAKE_PADDED_VAR(bool, m_isPermanent, m_isPermanent, 8);
	};
};

class SAnimatedComponentSlotAnimationSettings {
public:
	union {
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 8);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 12);
	};
};

class SAnimatedComponentSyncSettings {
public:
	union {
	int32_t m_instanceName;
		MAKE_PADDED_VAR(bool, m_syncAllInstances, m_syncAllInstances, 4);
		MAKE_PADDED_VAR(bool, m_syncEngineValueSpeed, m_syncEngineValueSpeed, 5);
	};
};

class SAnimatedSlideSettings {
public:
	union {
	int32_t m_animation;
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 4);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 8);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 12);
		MAKE_PADDED_VAR(bool, m_useGameTimeScale, m_useGameTimeScale, 16);
		MAKE_PADDED_VAR(bool, m_useRotationDeltaPolicy, m_useRotationDeltaPolicy, 17);
	};
};

class SAnimationBufferBitwiseCompressedData {
public:
	union {
	float m_dt;
		MAKE_PADDED_VAR(int8_t, m_compression, m_compression, 4);
		MAKE_PADDED_VAR(uint16_t, m_numFrames, m_numFrames, 6);
		MAKE_PADDED_VAR(uint32_t, m_dataAddr, m_dataAddr, 8);
		MAKE_PADDED_VAR(uint32_t, m_dataAddrFallback, m_dataAddrFallback, 12);
	};
};

class SAnimationEventAnimInfo {
public:
	union {
	};
};

class SAnimationFullState {
public:
	union {
	};
};

class SAnimationProxyData {
public:
	union {
	};
};

class SAppearanceAttachment {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_parentClass, m_parentClass, 8);
		MAKE_PADDED_VAR(int32_t, m_parentName, m_parentName, 12);
		MAKE_PADDED_VAR(int32_t, m_childClass, m_childClass, 16);
		MAKE_PADDED_VAR(int32_t, m_childName, m_childName, 20);
	};
};

class SAppearanceAttachments {
public:
	union {
	int32_t m_appearance;
		MAKE_PADDED_VAR(SAppearanceAttachment*, m_attachments[2], m_attachments, 4);
	};
};

class SApplyRotationIKSolver {
public:
	union {
	};
};

class SApplyRotationIKSolverData {
public:
	union {
	int32_t m_bone;
	};
};

class SArbitratorQueryData {
public:
	union {
	};
};

class SAttachmentReplacement {
public:
	union {
	int32_t m_oldName;
		MAKE_PADDED_VAR(int32_t, m_oldClass, m_oldClass, 4);
		MAKE_PADDED_VAR(int32_t, m_newName, m_newName, 8);
		MAKE_PADDED_VAR(int32_t, m_newClass, m_newClass, 12);
	};
};

class SAttachmentReplacements {
public:
	union {
	SAttachmentReplacement* m_replacements[2];
	};
};

class SBecomeScaredEventData {
public:
	union {
	};
};

class SBehaviorComboAnim {
public:
	union {
	int32_t m_animationAttack;
		MAKE_PADDED_VAR(int32_t, m_animationParry, m_animationParry, 4);
		MAKE_PADDED_VAR(int32_t, m_id, m_id, 8);
	};
};

class SBehaviorComboAnimation {
public:
	union {
	int32_t m_animationAttack;
		MAKE_PADDED_VAR(int32_t, m_animationParry, m_animationParry, 4);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 8);
	};
};

class SBehaviorComboDistance {
public:
	union {
	SBehaviorComboAnimation* m_animations[2];
	};
};

class SBehaviorComboElem {
public:
	union {
	int32_t m_enum;
		MAKE_PADDED_VAR(SBehaviorComboAnim*, m_animations[2], m_animations, 4);
	};
};

class SBehaviorComboWay {
public:
	union {
	intptr_t* m_levels[2];
	};
};

class SBehaviorConstraintNodeFloorIKCachedTrace {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKCommon {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKCommonData {
public:
	union {
	int32_t m_gravityCentreBone;
		MAKE_PADDED_VAR(float, m_rootRotationBlendTime, m_rootRotationBlendTime, 4);
		MAKE_PADDED_VAR(float, m_verticalVelocityOffsetUpBlendTime, m_verticalVelocityOffsetUpBlendTime, 12);
		MAKE_PADDED_VAR(float, m_verticalVelocityOffsetDownBlendTime, m_verticalVelocityOffsetDownBlendTime, 16);
		MAKE_PADDED_VAR(float, m_slidingOnSlopeBlendTime, m_slidingOnSlopeBlendTime, 20);
	};
};

class SBehaviorConstraintNodeFloorIKDebugTrace {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKFrontBackWeightHandler {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKLeg {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKLegs {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKLegsData {
public:
	union {
	float m_Min_rel_offset;
		MAKE_PADDED_VAR(float, m_Max_rel_offset, m_Max_rel_offset, 4);
		MAKE_PADDED_VAR(float, m_Min_trace_offset, m_Min_trace_offset, 8);
		MAKE_PADDED_VAR(float, m_Max_trace_offset, m_Max_trace_offset, 12);
		MAKE_PADDED_VAR(float, m_verticalOffsetBlendUpTime, m_verticalOffsetBlendUpTime, 16);
		MAKE_PADDED_VAR(float, m_verticalOffsetBlendDownTime, m_verticalOffsetBlendDownTime, 20);
		MAKE_PADDED_VAR(float, m_Max_distance_for_trace_update, m_Max_distance_for_trace_update, 24);
		MAKE_PADDED_VAR(float, m_maxAngleOffUprightNormal, m_maxAngleOffUprightNormal, 28);
		MAKE_PADDED_VAR(float, m_maxAngleOffUprightNormalSide, m_maxAngleOffUprightNormalSide, 32);
		MAKE_PADDED_VAR(float, m_maxAngleOffUprightNormalToRevert, m_maxAngleOffUprightNormalToRevert, 36);
	};
};

class SBehaviorConstraintNodeFloorIKLegsIKWeightHandler {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKMaintainLookBone {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKMaintainLookBoneData {
public:
	union {
	int32_t m_bone;
		MAKE_PADDED_VAR(float, m_amountOfRotation, m_amountOfRotation, 4);
	};
};

class SBehaviorConstraintNodeFloorIKVerticalBone {
public:
	union {
	};
};

class SBehaviorConstraintNodeFloorIKVerticalBoneData {
public:
	union {
	float m_Min_offset;
		MAKE_PADDED_VAR(float, m_Max_offset, m_Max_offset, 4);
		MAKE_PADDED_VAR(int32_t, m_bone, m_bone, 8);
		MAKE_PADDED_VAR(float, m_offsetToDesiredBlendTime, m_offsetToDesiredBlendTime, 12);
		MAKE_PADDED_VAR(float, m_verticalOffsetBlendTime, m_verticalOffsetBlendTime, 16);
		MAKE_PADDED_VAR(float, m_stiffness, m_stiffness, 20);
	};
};

class SBehaviorConstraintNodeFloorIKWeightHandler {
public:
	union {
	};
};

class SBehaviorConstraintPullReinToHand {
public:
	union {
	};
};

class SBehaviorConstraintPullStirrupToLeg {
public:
	union {
	};
};

class SBehaviorConstraintPutLegIntoStirrup {
public:
	union {
	};
};

class SBehaviorConstraintStirrup {
public:
	union {
	};
};

class SBehaviorConstraintStirrupData {
public:
	union {
	int32_t m_stirrupBoneName;
	};
};

class SBehaviorConstraintStirrupsCommmon {
public:
	union {
	};
};

class SBehaviorConstraintStirrupsCommmonData {
public:
	union {
	float m_speedForPerpendicular;
		MAKE_PADDED_VAR(float, m_weight, m_weight, 4);
	};
};

class SBehaviorConstraintTargetWeightHandler {
public:
	union {
	};
};

class SBehaviorConstraintUprightSpineBones {
public:
	union {
	};
};

class SBehaviorConstraintUprightSpineBonesData {
public:
	union {
	int32_t m_boneName;
		MAKE_PADDED_VAR(float, m_weight, m_weight, 4);
		MAKE_PADDED_VAR(int32_t, m_boneCount, m_boneCount, 16);
	};
};

class SBehaviorGraphAnimatedRagdollDirDefinition {
public:
	union {
	float m_dirIndexValue;
		MAKE_PADDED_VAR(float, m_relativeAngle, m_relativeAngle, 4);
		MAKE_PADDED_VAR(float, m_applyAngleToMovement, m_applyAngleToMovement, 8);
		MAKE_PADDED_VAR(intptr_t*, m_replacements[2], m_replacements, 12);
	};
};

class SBehaviorGraphAnimatedRagdollDirReplacement {
public:
	union {
	float m_probability;
		MAKE_PADDED_VAR(uint32_t, m_index, m_index, 4);
	};
};

class SBehaviorGraphBoneInfo {
public:
	union {
	char* m_m_boneName;
		MAKE_PADDED_VAR(float, m_m_weight, m_m_weight, 12);
		MAKE_PADDED_VAR(int32_t, m_num, m_num, 16);
	};
};

class SBehaviorGraphMapToDiscreteMapper {
public:
	union {
	float m_Min_input_value;
		MAKE_PADDED_VAR(float, m_Max_input_value, m_Max_input_value, 4);
		MAKE_PADDED_VAR(float, m_outValue, m_outValue, 8);
	};
};

class SBehaviorGraphStateBehaviorGraphSyncInfo {
public:
	union {
	int32_t* m_Outbound_sync_tags[2];
		MAKE_PADDED_VAR(int32_t*, m_Inbound_sync_tags[2], m_Inbound_sync_tags, 12);
		MAKE_PADDED_VAR(int32_t, m_Inbound_sync_priority, m_Inbound_sync_priority, 24);
		MAKE_PADDED_VAR(bool, m_All_inbound_tags_required_, m_All_inbound_tags_required_, 28);
	};
};

class SBehaviorGraphTrackInfo {
public:
	union {
	char* m_trackName;
		MAKE_PADDED_VAR(float, m_weight, m_weight, 12);
	};
};

class SBehaviorGraphTransitionSetInternalVariable {
public:
	union {
	int32_t m_variableName;
		MAKE_PADDED_VAR(float, m_value, m_value, 4);
	};
};

class SBehaviorSnapshotDataStateMachine {
public:
	union {
	uint32_t m_stateMachineId;
		MAKE_PADDED_VAR(uint32_t, m_currentStateId, m_currentStateId, 4);
		MAKE_PADDED_VAR(float, m_currentStateTime, m_currentStateTime, 8);
	};
};

class SBehTreeDynamicNodeCancelEventData {
public:
	union {
	};
};

class SBehTreeDynamicNodeEventData {
public:
	union {
	};
};

class SBehTreeExternalListenerPtr {
public:
	union {
	};
};

class SBehTreePairHorseEventParam {
public:
	union {
	};
};

class SBlockedAbility {
public:
	union {
	int32_t m_abilityName;
		MAKE_PADDED_VAR(float, m_timeWhenEnabledd, m_timeWhenEnabledd, 4);
		MAKE_PADDED_VAR(int32_t, m_count, m_count, 8);
	};
};

class SBoneIndiceMapping {
public:
	union {
	uint32_t m_startingIndex;
		MAKE_PADDED_VAR(uint32_t, m_endingIndex, m_endingIndex, 4);
		MAKE_PADDED_VAR(uint32_t, m_chunkIndex, m_chunkIndex, 8);
		MAKE_PADDED_VAR(uint32_t, m_boneIndex, m_boneIndex, 12);
	};
};

class SCachedConnections {
public:
	union {
	int32_t m_socketId;
		MAKE_PADDED_VAR(intptr_t*, m_blocks[2], m_blocks, 4);
	};
};

class SCameraAnimationDefinition {
public:
	union {
	int32_t m_animation;
		MAKE_PADDED_VAR(int32_t, m_priority, m_priority, 4);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 8);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 12);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 16);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 20);
		MAKE_PADDED_VAR(bool, m_loop, m_loop, 24);
		MAKE_PADDED_VAR(bool, m_reset, m_reset, 25);
		MAKE_PADDED_VAR(bool, m_additive, m_additive, 26);
		MAKE_PADDED_VAR(bool, m_exclusive, m_exclusive, 27);
	};
};

class SCameraDistanceInfo {
public:
	union {
	float m_minDistance;
		MAKE_PADDED_VAR(float, m_distanceRange, m_distanceRange, 4);
		MAKE_PADDED_VAR(float, m_enemiesMaxDistanceToCamera, m_enemiesMaxDistanceToCamera, 8);
		MAKE_PADDED_VAR(float, m_enemiesMaxDistanceToPlayer, m_enemiesMaxDistanceToPlayer, 12);
		MAKE_PADDED_VAR(float, m_standardDeviationRelevance, m_standardDeviationRelevance, 16);
		MAKE_PADDED_VAR(float, m_cameraZOffset, m_cameraZOffset, 20);
		MAKE_PADDED_VAR(float, m_cameraZOffsetRange, m_cameraZOffsetRange, 24);
	};
};

class SCharacterWindParams {
public:
	union {
	float m_primaryDensity;
		MAKE_PADDED_VAR(float, m_secondaryDensity, m_secondaryDensity, 4);
		MAKE_PADDED_VAR(float, m_primaryOscilationFrequency, m_primaryOscilationFrequency, 8);
		MAKE_PADDED_VAR(float, m_secondaryOscilationFrequency, m_secondaryOscilationFrequency, 12);
		MAKE_PADDED_VAR(float, m_primaryDistance, m_primaryDistance, 16);
		MAKE_PADDED_VAR(float, m_secondaryDistance, m_secondaryDistance, 20);
		MAKE_PADDED_VAR(float, m_gustFrequency, m_gustFrequency, 24);
		MAKE_PADDED_VAR(float, m_gustDistance, m_gustDistance, 28);
	};
};

class SClosestSpotFilter {
public:
	union {
	float m_maxDistance;
		MAKE_PADDED_VAR(float, m_zDiff, m_zDiff, 4);
		MAKE_PADDED_VAR(bool, m_awayFromCamera, m_awayFromCamera, 8);
		MAKE_PADDED_VAR(bool, m_onlyReachable, m_onlyReachable, 9);
		MAKE_PADDED_VAR(bool, m_noRoughTerrain, m_noRoughTerrain, 10);
		MAKE_PADDED_VAR(bool, m_noInteriors, m_noInteriors, 11);
		MAKE_PADDED_VAR(bool, m_limitToBaseArea, m_limitToBaseArea, 12);
		MAKE_PADDED_VAR(bool, m_limitedPrecision, m_limitedPrecision, 13);
	};
};

class SComboAnimationData {
public:
	union {
	int32_t m_animationName;
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 4);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 8);
	};
};

class SCompiledInitializer {
public:
	union {
	};
};

class SCompiledSpawnStrategyInitializer {
public:
	union {
	};
};

class SComponentInstancePropertyEntry {
public:
	union {
	int32_t m_component;
		MAKE_PADDED_VAR(int32_t, m_property, m_property, 4);
	};
};

class SCompressedPoseInfo {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(int32_t, m_animation, m_animation, 4);
		MAKE_PADDED_VAR(float, m_time, m_time, 8);
	};
};

class SControllerRadiusParams {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(float, m_radius, m_radius, 4);
	};
};

class SCreatureDefinitionWrapper {
public:
	union {
	int32_t m_creatureDefinition;
	};
};

class SCurveEaseParam {
public:
	union {
	float m_easeIn;
		MAKE_PADDED_VAR(float, m_easeOut, m_easeOut, 4);
	};
};

class SCustomClippingPlanes {
public:
	union {
	float m_nearPlaneDistance;
		MAKE_PADDED_VAR(float, m_farPlaneDistance, m_farPlaneDistance, 4);
	};
};

class SCustomMapPinDefinition {
public:
	union {
	int32_t m_tag;
		MAKE_PADDED_VAR(int32_t, m_type, m_type, 4);
	};
};

class SCustomNode {
public:
	union {
	int32_t m_nodeName;
		MAKE_PADDED_VAR(intptr_t*, m_attributes[2], m_attributes, 4);
		MAKE_PADDED_VAR(int32_t*, m_values[2], m_values, 16);
		MAKE_PADDED_VAR(intptr_t*, m_subNodes[2], m_subNodes, 28);
	};
};

class SCustomNodeAttribute {
public:
	union {
	int32_t m_attributeValueAsCName;
		MAKE_PADDED_VAR(int32_t, m_attributeName, m_attributeName, 4);
		MAKE_PADDED_VAR(char*, m_attributeValue, m_attributeValue, 8);
	};
};

class SDeckDefinition {
public:
	union {
	int32_t* m_cardIndices[2];
		MAKE_PADDED_VAR(int32_t, m_leaderIndex, m_leaderIndex, 12);
		MAKE_PADDED_VAR(bool, m_unlocked, m_unlocked, 16);
		MAKE_PADDED_VAR(int32_t, m_specialCard, m_specialCard, 20);
		MAKE_PADDED_VAR(int32_t*, m_dynamicCardRequirements[2], m_dynamicCardRequirements, 24);
		MAKE_PADDED_VAR(int32_t*, m_dynamicCards[2], m_dynamicCards, 36);
	};
};

class SDismembermentWoundFilter {
public:
	union {
	int32_t m_wound;
		MAKE_PADDED_VAR(int32_t, m_appearance, m_appearance, 4);
	};
};

class SDLCLanguagePack {
public:
	union {
	char** m_textLanguages[2];
		MAKE_PADDED_VAR(char**, m_speechLanguages[2], m_speechLanguages, 12);
	};
};

class SDoorSoundsEvents {
public:
	union {
	char* m_open;
		MAKE_PADDED_VAR(char*, m_openFully, m_openFully, 12);
		MAKE_PADDED_VAR(char*, m_openingStart, m_openingStart, 24);
		MAKE_PADDED_VAR(char*, m_openingStop, m_openingStop, 36);
		MAKE_PADDED_VAR(char*, m_close, m_close, 48);
		MAKE_PADDED_VAR(char*, m_closeFully, m_closeFully, 60);
		MAKE_PADDED_VAR(char*, m_closingStart, m_closingStart, 72);
		MAKE_PADDED_VAR(char*, m_closingStop, m_closingStop, 84);
	};
};

class SDynamicCollider {
public:
	union {
	};
};

class SDynamicNodeSaveStateRequestEventData {
public:
	union {
	};
};

class SEncounterActionPointSelectorPair {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(float, m_chance, m_chance, 4);
	};
};

class SEncounterGroupLimit {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_groupName, m_groupName, 4);
		MAKE_PADDED_VAR(uint32_t, m_limit, m_limit, 8);
	};
};

class SEntityActionsRouterEntry {
public:
	union {
	int32_t m_eventName;
		MAKE_PADDED_VAR(intptr_t*, m_actionsToPerform[2], m_actionsToPerform, 4);
	};
};

class SEntitySpawnData {
public:
	union {
	bool m_restored;
	};
};

class SEntityTemplateColoringEntry {
public:
	union {
	int32_t m_appearance;
		MAKE_PADDED_VAR(int32_t, m_componentName, m_componentName, 4);
		MAKE_PADDED_VAR(CColorShift, m_colorShift1, m_colorShift1, 8);
		MAKE_PADDED_VAR(CColorShift, m_colorShift2, m_colorShift2, 12);
	};
};

class SEntityTemplateOverride {
public:
	union {
	int32_t m_componentName;
		MAKE_PADDED_VAR(int32_t, m_className, m_className, 4);
		MAKE_PADDED_VAR(int32_t*, m_overriddenProperties[2], m_overriddenProperties, 8);
	};
};

class SEnumVariant {
public:
	union {
	int32_t m_enumType;
		MAKE_PADDED_VAR(int32_t, m_enumValue, m_enumValue, 4);
	};
};

class SEventGroupsRanges {
public:
	union {
	int32_t m_tag;
		MAKE_PADDED_VAR(uint32_t, m_beginIndex, m_beginIndex, 4);
		MAKE_PADDED_VAR(uint32_t, m_endIndex, m_endIndex, 8);
	};
};

class SFlashArg {
public:
	union {
	};
};

class SFootDetectionBoneInfo {
public:
	union {
	};
};

class SForcedBehaviorEventData {
public:
	union {
	};
};

class SFormationSteeringInput {
public:
	union {
	};
};

class SFurCulling {
public:
	union {
	bool m_useViewfrustrumCulling;
		MAKE_PADDED_VAR(bool, m_useBackfaceCulling, m_useBackfaceCulling, 1);
		MAKE_PADDED_VAR(float, m_backfaceCullingThreshold, m_backfaceCullingThreshold, 4);
	};
};

class SFurDetailLOD {
public:
	union {
	bool m_enableDetailLOD;
		MAKE_PADDED_VAR(float, m_detailLODStart, m_detailLODStart, 4);
		MAKE_PADDED_VAR(float, m_detailLODEnd, m_detailLODEnd, 8);
		MAKE_PADDED_VAR(float, m_detailLODWidth, m_detailLODWidth, 12);
		MAKE_PADDED_VAR(float, m_detailLODDensity, m_detailLODDensity, 16);
	};
};

class SFurDistanceLOD {
public:
	union {
	bool m_enableDistanceLOD;
		MAKE_PADDED_VAR(float, m_distanceLODStart, m_distanceLODStart, 4);
		MAKE_PADDED_VAR(float, m_distanceLODEnd, m_distanceLODEnd, 8);
		MAKE_PADDED_VAR(float, m_distanceLODFadeStart, m_distanceLODFadeStart, 12);
		MAKE_PADDED_VAR(float, m_distanceLODWidth, m_distanceLODWidth, 16);
		MAKE_PADDED_VAR(float, m_distanceLODDensity, m_distanceLODDensity, 20);
	};
};

class SFurGlint {
public:
	union {
	float m_glintStrength;
		MAKE_PADDED_VAR(float, m_glintCount, m_glintCount, 4);
		MAKE_PADDED_VAR(float, m_glintExponent, m_glintExponent, 8);
	};
};

class SFurLevelOfDetail {
public:
	union {
	bool m_enableLOD;
		MAKE_PADDED_VAR(SFurCulling, m_culling, m_culling, 4);
		MAKE_PADDED_VAR(SFurDistanceLOD, m_distanceLOD, m_distanceLOD, 12);
		MAKE_PADDED_VAR(SFurDetailLOD, m_detailLOD, m_detailLOD, 36);
		MAKE_PADDED_VAR(uint32_t, m_priority, m_priority, 56);
	};
};

class SFurShadow {
public:
	union {
	float m_shadowSigma;
		MAKE_PADDED_VAR(float, m_shadowDensityScale, m_shadowDensityScale, 4);
		MAKE_PADDED_VAR(bool, m_castShadows, m_castShadows, 8);
		MAKE_PADDED_VAR(bool, m_receiveShadows, m_receiveShadows, 9);
	};
};

class SGameplayAdditiveAnimation {
public:
	union {
	int32_t m_animationName;
		MAKE_PADDED_VAR(float, m_delay, m_delay, 4);
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 8);
		MAKE_PADDED_VAR(float, m_chance, m_chance, 12);
		MAKE_PADDED_VAR(bool, m_onlyOnce, m_onlyOnce, 16);
		MAKE_PADDED_VAR(float, m_weightRangeMin, m_weightRangeMin, 20);
		MAKE_PADDED_VAR(float, m_weightRangeMax, m_weightRangeMax, 24);
		MAKE_PADDED_VAR(float, m_speedRangeMin, m_speedRangeMin, 28);
		MAKE_PADDED_VAR(float, m_speedRangeMax, m_speedRangeMax, 32);
		MAKE_PADDED_VAR(bool, m_useWeightRange, m_useWeightRange, 36);
		MAKE_PADDED_VAR(bool, m_useSpeedRange, m_useSpeedRange, 37);
	};
};

class SGameplayAdditiveAnimRuntimeData {
public:
	union {
	};
};

class SGameplayAdditiveLevel {
public:
	union {
	SGameplayAdditiveAnimation* m_animations[2];
		MAKE_PADDED_VAR(bool, m_useLevel, m_useLevel, 12);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 13);
	};
};

class SGameplayConfigGameCamera {
public:
	union {
		MAKE_PADDED_VAR(float, m_verManualMax, m_verManualMax, 8);
		MAKE_PADDED_VAR(float, m_verManualMin, m_verManualMin, 12);
		MAKE_PADDED_VAR(float, m_horDamping, m_horDamping, 16);
		MAKE_PADDED_VAR(float, m_verDamping, m_verDamping, 20);
		MAKE_PADDED_VAR(float, m_pivotDamp, m_pivotDamp, 24);
		MAKE_PADDED_VAR(float, m_focusTargetDamp, m_focusTargetDamp, 28);
		MAKE_PADDED_VAR(float, m_focusActDuration, m_focusActDuration, 32);
		MAKE_PADDED_VAR(float, m_zoomDamp, m_zoomDamp, 36);
		MAKE_PADDED_VAR(float, m_zoomActTime, m_zoomActTime, 40);
		MAKE_PADDED_VAR(float, m_verOffsetDamp, m_verOffsetDamp, 44);
		MAKE_PADDED_VAR(float, m_verOffsetActTime, m_verOffsetActTime, 48);
		MAKE_PADDED_VAR(float, m_backOffsetDamp, m_backOffsetDamp, 52);
		MAKE_PADDED_VAR(float, m_collisionDampOn, m_collisionDampOn, 56);
		MAKE_PADDED_VAR(float, m_collisionDampOff, m_collisionDampOff, 60);
		MAKE_PADDED_VAR(float, m_collisionBigRadius, m_collisionBigRadius, 64);
		MAKE_PADDED_VAR(float, m_collisionBoxScale, m_collisionBoxScale, 68);
		MAKE_PADDED_VAR(float, m_collisionAutoRotDamp, m_collisionAutoRotDamp, 72);
		MAKE_PADDED_VAR(float, m_collisionAutoRotMaxSpeed, m_collisionAutoRotMaxSpeed, 76);
		MAKE_PADDED_VAR(float, m_collisionVerCorrection, m_collisionVerCorrection, 80);
		MAKE_PADDED_VAR(float, m_collisionPivotHeightOffset, m_collisionPivotHeightOffset, 84);
		MAKE_PADDED_VAR(float, m_collisionPivotRadius, m_collisionPivotRadius, 88);
		MAKE_PADDED_VAR(float, m_collisionVerRadius, m_collisionVerRadius, 92);
		MAKE_PADDED_VAR(float, m_collisionVerOffsetP, m_collisionVerOffsetP, 96);
		MAKE_PADDED_VAR(float, m_collisionVerOffsetM, m_collisionVerOffsetM, 100);
		MAKE_PADDED_VAR(float, m_collisionVerFactor, m_collisionVerFactor, 104);
		MAKE_PADDED_VAR(float, m_collisionVerRadiusP, m_collisionVerRadiusP, 108);
		MAKE_PADDED_VAR(float, m_collisionVerRadiusM, m_collisionVerRadiusM, 112);
		MAKE_PADDED_VAR(bool, m_collisionAutoRotTrace, m_collisionAutoRotTrace, 116);
		MAKE_PADDED_VAR(float, m_collisionAutoRotTraceFactor, m_collisionAutoRotTraceFactor, 120);
		MAKE_PADDED_VAR(float, m_indoorCollisionMaxZoom, m_indoorCollisionMaxZoom, 124);
		MAKE_PADDED_VAR(float, m_slopeVerFactor, m_slopeVerFactor, 128);
		MAKE_PADDED_VAR(float, m_slopeVerDamp, m_slopeVerDamp, 132);
		MAKE_PADDED_VAR(float, m_sensX, m_sensX, 136);
		MAKE_PADDED_VAR(float, m_sensY, m_sensY, 140);
	};
};

class SGameplayConfigLookAts {
public:
	union {
	int32_t m_reactionDebugType;
		MAKE_PADDED_VAR(float, m_lookAtDurationGlance, m_lookAtDurationGlance, 4);
		MAKE_PADDED_VAR(float, m_lookAtDurationLook, m_lookAtDurationLook, 8);
		MAKE_PADDED_VAR(float, m_lookAtDurationGaze, m_lookAtDurationGaze, 12);
		MAKE_PADDED_VAR(float, m_lookAtDurationStare, m_lookAtDurationStare, 16);
		MAKE_PADDED_VAR(float, m_lookAtDurationRandGlance, m_lookAtDurationRandGlance, 20);
		MAKE_PADDED_VAR(float, m_lookAtDurationRandLook, m_lookAtDurationRandLook, 24);
		MAKE_PADDED_VAR(float, m_lookAtDurationRandGaze, m_lookAtDurationRandGaze, 28);
		MAKE_PADDED_VAR(float, m_lookAtDurationRandStare, m_lookAtDurationRandStare, 32);
		MAKE_PADDED_VAR(float, m_lookAtRangeGlance, m_lookAtRangeGlance, 36);
		MAKE_PADDED_VAR(float, m_lookAtRangeLook, m_lookAtRangeLook, 40);
		MAKE_PADDED_VAR(float, m_lookAtRangeGaze, m_lookAtRangeGaze, 44);
		MAKE_PADDED_VAR(float, m_lookAtRangeStare, m_lookAtRangeStare, 48);
		MAKE_PADDED_VAR(float, m_lookAtSpeedGlance, m_lookAtSpeedGlance, 52);
		MAKE_PADDED_VAR(float, m_lookAtSpeedLook, m_lookAtSpeedLook, 56);
		MAKE_PADDED_VAR(float, m_lookAtSpeedGaze, m_lookAtSpeedGaze, 60);
		MAKE_PADDED_VAR(float, m_lookAtSpeedStare, m_lookAtSpeedStare, 64);
		MAKE_PADDED_VAR(float, m_lookAtSpeedRandGlance, m_lookAtSpeedRandGlance, 68);
		MAKE_PADDED_VAR(float, m_lookAtSpeedRandLook, m_lookAtSpeedRandLook, 72);
		MAKE_PADDED_VAR(float, m_lookAtSpeedRandGaze, m_lookAtSpeedRandGaze, 76);
		MAKE_PADDED_VAR(float, m_lookAtSpeedRandStare, m_lookAtSpeedRandStare, 80);
		MAKE_PADDED_VAR(bool, m_lookAtAutoLimitGlance, m_lookAtAutoLimitGlance, 84);
		MAKE_PADDED_VAR(bool, m_lookAtAutoLimitLook, m_lookAtAutoLimitLook, 85);
		MAKE_PADDED_VAR(bool, m_lookAtAutoLimitGaze, m_lookAtAutoLimitGaze, 86);
		MAKE_PADDED_VAR(bool, m_lookAtAutoLimitStare, m_lookAtAutoLimitStare, 87);
		MAKE_PADDED_VAR(float, m_lookAtDelay, m_lookAtDelay, 88);
		MAKE_PADDED_VAR(float, m_lookAtDelayDialog, m_lookAtDelayDialog, 92);
	};
};

class SGameplayEventParamCName {
public:
	union {
	int32_t m_value;
	};
};

class SGameplayEventParamFloat {
public:
	union {
	float m_value;
	};
};

class SGameplayEventParamInt {
public:
	union {
	int32_t m_value;
	};
};

class SGameplayLODConfig {
public:
	union {
	intptr_t* m_actorLODs[2];
		MAKE_PADDED_VAR(float, m_actorInvisibilityTimeThreshold, m_actorInvisibilityTimeThreshold, 12);
		MAKE_PADDED_VAR(float, m_maxBudgetedComponentsTickTime, m_maxBudgetedComponentsTickTime, 16);
		MAKE_PADDED_VAR(uint32_t, m_minBudgetedComponentsTickPercentage, m_minBudgetedComponentsTickPercentage, 20);
		MAKE_PADDED_VAR(float, m_componentsTickLODUpdateTime, m_componentsTickLODUpdateTime, 28);
		MAKE_PADDED_VAR(float, m_componentsBudgetableTickDistance, m_componentsBudgetableTickDistance, 32);
		MAKE_PADDED_VAR(float, m_componentsDisableTickDistance, m_componentsDisableTickDistance, 36);
		MAKE_PADDED_VAR(float, m_entitiesBudgetableTickDistance, m_entitiesBudgetableTickDistance, 40);
		MAKE_PADDED_VAR(float, m_entitiesDisableTickDistance, m_entitiesDisableTickDistance, 44);
		MAKE_PADDED_VAR(float, m_entitiesTickTime, m_entitiesTickTime, 48);
		MAKE_PADDED_VAR(float, m_effectsBudgetableTickDistance, m_effectsBudgetableTickDistance, 52);
		MAKE_PADDED_VAR(float, m_effectsTickTime, m_effectsTickTime, 56);
		MAKE_PADDED_VAR(float, m_effectsTickLODUpdateTime, m_effectsTickLODUpdateTime, 60);
	};
};

class SGlobalSpeedTreeParameters {
public:
	union {
	float m_alphaScalar3d;
		MAKE_PADDED_VAR(float, m_alphaScalarGrassNear, m_alphaScalarGrassNear, 4);
		MAKE_PADDED_VAR(float, m_alphaScalarGrass, m_alphaScalarGrass, 8);
		MAKE_PADDED_VAR(float, m_alphaScalarGrassDistNear, m_alphaScalarGrassDistNear, 12);
		MAKE_PADDED_VAR(float, m_alphaScalarGrassDistFar, m_alphaScalarGrassDistFar, 16);
		MAKE_PADDED_VAR(float, m_alphaScalarBillboards, m_alphaScalarBillboards, 20);
		MAKE_PADDED_VAR(float, m_billboardsGrainBias, m_billboardsGrainBias, 24);
		MAKE_PADDED_VAR(float, m_billboardsGrainAlbedoScale, m_billboardsGrainAlbedoScale, 28);
		MAKE_PADDED_VAR(float, m_billboardsGrainNormalScale, m_billboardsGrainNormalScale, 32);
		MAKE_PADDED_VAR(float, m_billboardsGrainClipScale, m_billboardsGrainClipScale, 36);
		MAKE_PADDED_VAR(float, m_billboardsGrainClipBias, m_billboardsGrainClipBias, 40);
		MAKE_PADDED_VAR(float, m_billboardsGrainClipDamping, m_billboardsGrainClipDamping, 44);
		MAKE_PADDED_VAR(float, m_grassNormalsVariation, m_grassNormalsVariation, 48);
	};
};

class SGuiEnhancementInfo {
public:
	union {
	int32_t m_enhancedItem;
		MAKE_PADDED_VAR(int32_t, m_enhancement, m_enhancement, 4);
		MAKE_PADDED_VAR(int32_t, m_oilItem, m_oilItem, 8);
		MAKE_PADDED_VAR(int32_t, m_oil, m_oil, 12);
		MAKE_PADDED_VAR(int32_t, m_dyeItem, m_dyeItem, 16);
		MAKE_PADDED_VAR(int32_t, m_dye, m_dye, 20);
		MAKE_PADDED_VAR(int32_t, m_dyeColor, m_dyeColor, 24);
	};
};

class SHorseStateOffsets {
public:
	union {
	float m_speedValue;
		MAKE_PADDED_VAR(float, m_maxValue, m_maxValue, 4);
		MAKE_PADDED_VAR(float, m_legFY, m_legFY, 8);
		MAKE_PADDED_VAR(float, m_legFZ, m_legFZ, 12);
		MAKE_PADDED_VAR(float, m_legBY, m_legBY, 16);
		MAKE_PADDED_VAR(float, m_legBZ, m_legBZ, 20);
		MAKE_PADDED_VAR(float, m_pelvisY, m_pelvisY, 24);
		MAKE_PADDED_VAR(float, m_pelvisZ, m_pelvisZ, 28);
		MAKE_PADDED_VAR(float, m_headFirstAngle, m_headFirstAngle, 32);
		MAKE_PADDED_VAR(float, m_headSecondAngle, m_headSecondAngle, 36);
		MAKE_PADDED_VAR(float, m_headThirdAngle, m_headThirdAngle, 40);
	};
};

class SIngredientCategory {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(bool, m_specified, m_specified, 4);
	};
};

class SIngredientCategoryElement {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(uint32_t, m_priority, m_priority, 4);
	};
};

class SInputAction {
public:
	union {
	int32_t m_aName;
		MAKE_PADDED_VAR(float, m_value, m_value, 4);
		MAKE_PADDED_VAR(float, m_lastFrameValue, m_lastFrameValue, 8);
	};
};

class SInventoryItemUIData {
public:
	union {
	int32_t m_gridPosition;
		MAKE_PADDED_VAR(int32_t, m_gridSize, m_gridSize, 4);
		MAKE_PADDED_VAR(bool, m_isNew, m_isNew, 8);
	};
};

class SItemChangedData {
public:
	union {
	int32_t m_itemName;
		MAKE_PADDED_VAR(int32_t, m_quantity, m_quantity, 4);
		MAKE_PADDED_VAR(bool, m_informGui, m_informGui, 8);
		MAKE_PADDED_VAR(intptr_t*, m_ids[2], m_ids, 12);
	};
};

class SItemDamageCurve {
public:
	union {
	float m_term1;
		MAKE_PADDED_VAR(float, m_term2, m_term2, 4);
		MAKE_PADDED_VAR(float, m_term3, m_term3, 8);
	};
};

class SItemNameProperty {
public:
	union {
	int32_t m_itemName;
	};
};

class SItemParts {
public:
	union {
	int32_t m_itemName;
		MAKE_PADDED_VAR(int32_t, m_quantity, m_quantity, 4);
	};
};

class SItemReward {
public:
	union {
	int32_t m_item;
		MAKE_PADDED_VAR(int32_t, m_amount, m_amount, 4);
	};
};

class SItemSet {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(int32_t*, m_parts[2], m_parts, 4);
		MAKE_PADDED_VAR(int32_t*, m_abilities[2], m_abilities, 16);
	};
};

class SItemStat {
public:
	union {
	int32_t m_statType;
		MAKE_PADDED_VAR(float, m_statWeight, m_statWeight, 4);
		MAKE_PADDED_VAR(bool, m_statIsPercentage, m_statIsPercentage, 8);
	};
};

class SItemTagModifier {
public:
	union {
	};
};

class SItemUniqueId {
public:
	union {
	uint32_t m_value;
	};
};

class SItemUniqueIdGenerator {
public:
	union {
	uint32_t m_counter;
	};
};

class SJobTreeExecutionContext {
public:
	union {
	};
};

class SJournalCreatureParams {
public:
	union {
	int32_t* m_abilities[2];
		MAKE_PADDED_VAR(int32_t*, m_autoEffects[2], m_autoEffects, 12);
		MAKE_PADDED_VAR(CBuffImmunity, m_buffImmunity, m_buffImmunity, 24);
		MAKE_PADDED_VAR(int32_t, m_monsterCategory, m_monsterCategory, 56);
		MAKE_PADDED_VAR(bool, m_isTeleporting, m_isTeleporting, 60);
		MAKE_PADDED_VAR(int32_t*, m_droppedItems[2], m_droppedItems, 64);
	};
};

class SJournalEvent {
public:
	union {
	};
};

class SLensFlareParameters {
public:
	union {
	float m_nearDistance;
		MAKE_PADDED_VAR(float, m_nearRange, m_nearRange, 4);
		MAKE_PADDED_VAR(float, m_farDistance, m_farDistance, 8);
		MAKE_PADDED_VAR(float, m_farRange, m_farRange, 12);
		MAKE_PADDED_VAR(intptr_t*, m_elements[2], m_elements, 16);
	};
};

class SLightFlickering {
public:
	union {
	float m_positionOffset;
		MAKE_PADDED_VAR(float, m_flickerStrength, m_flickerStrength, 4);
		MAKE_PADDED_VAR(float, m_flickerPeriod, m_flickerPeriod, 8);
	};
};

class SLookAtAnimationPairDefinition {
public:
	union {
	int32_t m_Animation_name;
		MAKE_PADDED_VAR(int32_t, m_Horizontal_anim__additive_, m_Horizontal_anim__additive_, 4);
		MAKE_PADDED_VAR(int32_t, m_Vertical_anim__additive_, m_Vertical_anim__additive_, 8);
	};
};

class SLookAtAnimationPairInputBasedDefinition {
public:
	union {
	char* m_Input_name;
		MAKE_PADDED_VAR(int32_t, m_Horizontal_anim__additive_, m_Horizontal_anim__additive_, 12);
		MAKE_PADDED_VAR(int32_t, m_Vertical_anim__additive_, m_Vertical_anim__additive_, 16);
	};
};

class SLookAtAnimationPairInputBasedInstance {
public:
	union {
	};
};

class SLookAtAnimationPairInstance {
public:
	union {
	};
};

class SMapPathDefinition {
public:
	union {
	int32_t m_tag;
		MAKE_PADDED_VAR(float, m_lineWidth, m_lineWidth, 4);
		MAKE_PADDED_VAR(float, m_lineSegmentLength, m_lineSegmentLength, 8);
		MAKE_PADDED_VAR(Color, m_color, m_color, 12);
	};
};

class SMapPinConfig {
public:
	union {
	intptr_t* m_pinTypes[2];
		MAKE_PADDED_VAR(int32_t*, m_alwaysTrackedPins[2], m_alwaysTrackedPins, 12);
		MAKE_PADDED_VAR(float, m_distantUpdateTime, m_distantUpdateTime, 24);
		MAKE_PADDED_VAR(float, m_nearbyRadius, m_nearbyRadius, 28);
	};
};

class SMapPinType {
public:
	union {
	int32_t m_typeName;
		MAKE_PADDED_VAR(char*, m_icon, m_icon, 4);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 16);
		MAKE_PADDED_VAR(Color, m_color, m_color, 20);
	};
};

class SMeshSoundInfo {
public:
	union {
	int32_t m_soundTypeIdentification;
		MAKE_PADDED_VAR(int32_t, m_soundSizeIdentification, m_soundSizeIdentification, 4);
		MAKE_PADDED_VAR(int32_t, m_soundBoneMappingInfo, m_soundBoneMappingInfo, 8);
	};
};

class SMimicTrackPose {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(float*, m_tracks[2], m_tracks, 4);
		MAKE_PADDED_VAR(int32_t*, m_mapping[2], m_mapping, 16);
	};
};

class SMoveLocomotionGoal {
public:
	union {
	};
};

class SMovementAdjustmentRequestTicket {
public:
	union {
	};
};

class SMultiCurvePosition {
public:
	union {
	};
};

class SMultiValue {
public:
	union {
	float* m_floats[2];
		MAKE_PADDED_VAR(bool*, m_bools[2], m_bools, 12);
		MAKE_PADDED_VAR(SEnumVariant*, m_enums[2], m_enums, 24);
		MAKE_PADDED_VAR(int32_t*, m_names[2], m_names, 36);
	};
};

class SNavigationCollectCollisionInCircleData {
public:
	union {
	};
};

class SNavmeshParams {
public:
	union {
	bool m_useGenerationRootPoints;
		MAKE_PADDED_VAR(bool, m_useTerrainInGeneration, m_useTerrainInGeneration, 1);
		MAKE_PADDED_VAR(bool, m_useStaticMeshesInGeneration, m_useStaticMeshesInGeneration, 2);
		MAKE_PADDED_VAR(bool, m_collectFoliage, m_collectFoliage, 3);
		MAKE_PADDED_VAR(bool, m_previewOriginalGeometry, m_previewOriginalGeometry, 4);
		MAKE_PADDED_VAR(bool, m_useCollisionMeshes, m_useCollisionMeshes, 5);
		MAKE_PADDED_VAR(bool, m_monotonePartitioning, m_monotonePartitioning, 6);
		MAKE_PADDED_VAR(bool, m_detectTerrainConnection, m_detectTerrainConnection, 7);
		MAKE_PADDED_VAR(bool, m_stepOnNonWalkableMeshes, m_stepOnNonWalkableMeshes, 8);
		MAKE_PADDED_VAR(bool, m_cutMeshesWithBoundings, m_cutMeshesWithBoundings, 9);
		MAKE_PADDED_VAR(bool, m_smoothWalkableAreas, m_smoothWalkableAreas, 10);
		MAKE_PADDED_VAR(float, m_extensionLength, m_extensionLength, 12);
		MAKE_PADDED_VAR(float, m_cellWidth, m_cellWidth, 16);
		MAKE_PADDED_VAR(float, m_cellHeight, m_cellHeight, 20);
		MAKE_PADDED_VAR(float, m_walkableSlopeAngle, m_walkableSlopeAngle, 24);
		MAKE_PADDED_VAR(float, m_agentHeight, m_agentHeight, 28);
		MAKE_PADDED_VAR(float, m_agentClimb, m_agentClimb, 32);
		MAKE_PADDED_VAR(float, m_margin, m_margin, 36);
		MAKE_PADDED_VAR(float, m_maxEdgeLen, m_maxEdgeLen, 40);
		MAKE_PADDED_VAR(float, m_maxEdgeError, m_maxEdgeError, 44);
		MAKE_PADDED_VAR(float, m_regionMinSize, m_regionMinSize, 48);
		MAKE_PADDED_VAR(float, m_regionMergeSize, m_regionMergeSize, 52);
		MAKE_PADDED_VAR(uint32_t, m_vertsPerPoly, m_vertsPerPoly, 56);
		MAKE_PADDED_VAR(float, m_detailSampleDist, m_detailSampleDist, 60);
		MAKE_PADDED_VAR(float, m_detailSampleMaxError, m_detailSampleMaxError, 64);
		MAKE_PADDED_VAR(float, m_extraStreamingRange, m_extraStreamingRange, 68);
	};
};

class SOcclusionSPQuery {
public:
	union {
	};
};

class SParticleSystemLODLevel {
public:
	union {
	float m_distance;
	};
};

class SPartySpawner {
public:
	union {
	uint32_t m_firstIndex;
		MAKE_PADDED_VAR(uint32_t, m_waypointsCount, m_waypointsCount, 4);
		MAKE_PADDED_VAR(uint32_t, m_mappingIndex, m_mappingIndex, 8);
	};
};

class SPlaySceneRequestData {
public:
	union {
	};
};

class SPoseLookAtSegment {
public:
	union {
	};
};

class SPoseLookAtSegmentDampData {
public:
	union {
	};
};

class SPositioningFilter {
public:
	union {
	float m_minDistance;
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 4);
		MAKE_PADDED_VAR(float, m_zDiff, m_zDiff, 8);
		MAKE_PADDED_VAR(float, m_angleLimit, m_angleLimit, 12);
		MAKE_PADDED_VAR(float, m_personalSpace, m_personalSpace, 16);
		MAKE_PADDED_VAR(bool, m_awayFromCamera, m_awayFromCamera, 20);
		MAKE_PADDED_VAR(bool, m_onlyReachable, m_onlyReachable, 21);
		MAKE_PADDED_VAR(bool, m_noRoughTerrain, m_noRoughTerrain, 22);
		MAKE_PADDED_VAR(bool, m_noInteriors, m_noInteriors, 23);
		MAKE_PADDED_VAR(bool, m_limitToBaseArea, m_limitToBaseArea, 24);
	};
};

class SPredictionInfo {
public:
	union {
	float m_distanceToCollision;
		MAKE_PADDED_VAR(float, m_normalYaw, m_normalYaw, 4);
		MAKE_PADDED_VAR(float, m_turnAngle, m_turnAngle, 8);
		MAKE_PADDED_VAR(float, m_leftGroundLevel, m_leftGroundLevel, 12);
		MAKE_PADDED_VAR(float, m_frontGroundLevel, m_frontGroundLevel, 16);
		MAKE_PADDED_VAR(float, m_rightGroundLevel, m_rightGroundLevel, 20);
	};
};

class SProcessedDamage {
public:
	union {
	float m_vitalityDamage;
		MAKE_PADDED_VAR(float, m_essenceDamage, m_essenceDamage, 4);
		MAKE_PADDED_VAR(float, m_moraleDamage, m_moraleDamage, 8);
		MAKE_PADDED_VAR(float, m_staminaDamage, m_staminaDamage, 12);
	};
};

class SQuestMapPinInfo {
public:
	union {
	int32_t m_tag;
		MAKE_PADDED_VAR(int32_t, m_type, m_type, 4);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 8);
		MAKE_PADDED_VAR(intptr_t*, m_positions[2], m_positions, 12);
	};
};

class SR4LootNameProperty {
public:
	union {
	int32_t m_lootName;
	};
};

class SR4PlayerTargetingConsts {
public:
	union {
	float m_softLockDistance;
		MAKE_PADDED_VAR(float, m_softLockFrameSize, m_softLockFrameSize, 4);
	};
};

class SReactionSceneEvent {
public:
	union {
	int32_t m_reactionScene;
		MAKE_PADDED_VAR(bool, m_inputsAsymetric, m_inputsAsymetric, 8);
		MAKE_PADDED_VAR(bool, m_workOnlyBroadcast, m_workOnlyBroadcast, 9);
		MAKE_PADDED_VAR(char**, m_requiredSceneInputs[2], m_requiredSceneInputs, 12);
	};
};

class SReward {
public:
	union {
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 8);
		MAKE_PADDED_VAR(int32_t, m_experience, m_experience, 12);
		MAKE_PADDED_VAR(int32_t, m_level, m_level, 16);
		MAKE_PADDED_VAR(int32_t, m_gold, m_gold, 20);
		MAKE_PADDED_VAR(SItemReward*, m_items[2], m_items, 24);
		MAKE_PADDED_VAR(int32_t, m_achievement, m_achievement, 36);
		MAKE_PADDED_VAR(int32_t, m_script, m_script, 40);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 44);
	};
};

class SRuntimeAnimationData {
public:
	union {
	};
};

class SSceneCameraShotDescription {
public:
	union {
	int32_t m_shotName;
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 4);
		MAKE_PADDED_VAR(bool, m_overrideDof, m_overrideDof, 8);
		MAKE_PADDED_VAR(float, m_dofFocusDistFar, m_dofFocusDistFar, 12);
		MAKE_PADDED_VAR(float, m_dofBlurDistFar, m_dofBlurDistFar, 16);
		MAKE_PADDED_VAR(float, m_dofIntensity, m_dofIntensity, 20);
		MAKE_PADDED_VAR(float, m_dofFocusDistNear, m_dofFocusDistNear, 24);
		MAKE_PADDED_VAR(float, m_dofBlurDistNear, m_dofBlurDistNear, 28);
	};
};

class SSceneMasterCameraDescription {
public:
	union {
	int32_t m_cameraName;
		MAKE_PADDED_VAR(uint32_t, m_cameraNumber, m_cameraNumber, 4);
		MAKE_PADDED_VAR(SSceneCameraShotDescription*, m_cameraShots[2], m_cameraShots, 8);
	};
};

class SScenePersonalCameraDescription {
public:
	union {
	int32_t m_cameraName;
		MAKE_PADDED_VAR(uint32_t, m_cameraNumber, m_cameraNumber, 4);
		MAKE_PADDED_VAR(uint32_t, m_sourceSlot, m_sourceSlot, 8);
		MAKE_PADDED_VAR(uint32_t, m_targetSlot, m_targetSlot, 12);
		MAKE_PADDED_VAR(SSceneCameraShotDescription*, m_cameraShots[2], m_cameraShots, 16);
	};
};

class SScriptedActionData {
public:
	union {
	};
};

class SScriptedActionSerializedState {
public:
	union {
	};
};

class SScriptRaycastId {
public:
	union {
	};
};

class SScriptSweepId {
public:
	union {
	};
};

class SSeedKeyValue {
public:
	union {
	uint32_t m_key;
		MAKE_PADDED_VAR(uint32_t, m_val, m_val, 4);
	};
};

class SSimpleAnimationPlayback {
public:
	union {
	};
};

class SSimpleAnimationPlaybackSet {
public:
	union {
	};
};

class SSimplexTreeStruct {
public:
	union {
	int32_t m_parent;
		MAKE_PADDED_VAR(int32_t, m_positiveStruct, m_positiveStruct, 4);
		MAKE_PADDED_VAR(int32_t, m_negativeStruct, m_negativeStruct, 8);
		MAKE_PADDED_VAR(int32_t, m_positiveID, m_positiveID, 12);
		MAKE_PADDED_VAR(int32_t, m_negativeID, m_negativeID, 16);
		MAKE_PADDED_VAR(float, m_normalX, m_normalX, 20);
		MAKE_PADDED_VAR(float, m_normalY, m_normalY, 24);
		MAKE_PADDED_VAR(float, m_offset, m_offset, 28);
	};
};

class SSlideToTargetEventProps {
public:
	union {
	float m_minSlideDist;
		MAKE_PADDED_VAR(float, m_maxSlideDist, m_maxSlideDist, 4);
		MAKE_PADDED_VAR(bool, m_slideToMaxDistIfTargetSeen, m_slideToMaxDistIfTargetSeen, 8);
		MAKE_PADDED_VAR(bool, m_slideToMaxDistIfNoTarget, m_slideToMaxDistIfNoTarget, 9);
	};
};

class SSlotEventAnim {
public:
	union {
	int32_t m_event;
		MAKE_PADDED_VAR(int32_t, m_animation, m_animation, 4);
	};
};

class SSoundInfoMapping {
public:
	union {
	int32_t m_soundTypeIdentification;
		MAKE_PADDED_VAR(int32_t, m_soundSizeIdentification, m_soundSizeIdentification, 4);
		MAKE_PADDED_VAR(int32_t*, m_boneIndexes[2], m_boneIndexes, 8);
		MAKE_PADDED_VAR(bool, m_isDefault, m_isDefault, 20);
	};
};

class SSpawnTreeAIDespawnConfiguration {
public:
	union {
	bool m_canDespawnOnSight;
		MAKE_PADDED_VAR(float, m_minDespawnRange, m_minDespawnRange, 4);
		MAKE_PADDED_VAR(float, m_maxDespawnRange, m_maxDespawnRange, 8);
		MAKE_PADDED_VAR(float, m_forceDespawnRange, m_forceDespawnRange, 12);
		MAKE_PADDED_VAR(float, m_despawnDelayMin, m_despawnDelayMin, 16);
		MAKE_PADDED_VAR(float, m_despawnDelayMax, m_despawnDelayMax, 20);
		MAKE_PADDED_VAR(float, m_despawnTime, m_despawnTime, 24);
	};
};

class SSpawnTreeDespawnConfiguration {
public:
	union {
	bool m_canDespawnOnSight;
		MAKE_PADDED_VAR(float, m_minDespawnRange, m_minDespawnRange, 4);
		MAKE_PADDED_VAR(float, m_forceDespawnRange, m_forceDespawnRange, 12);
		MAKE_PADDED_VAR(float, m_despawnDelayMin, m_despawnDelayMin, 16);
		MAKE_PADDED_VAR(float, m_despawnDelayMax, m_despawnDelayMax, 20);
		MAKE_PADDED_VAR(float, m_despawnTime, m_despawnTime, 24);
	};
};

class SSpawnTreeEntrySetup {
public:
	union {
	};
};

class SSpawnTreeEntryStealCreatureState {
public:
	union {
	};
};

class SSSTrackTransform {
public:
	union {
	int32_t m_track;
		MAKE_PADDED_VAR(float, m_value, m_value, 4);
	};
};

class SStorySceneAttachmentInfo {
public:
	union {
	int32_t m_attachTo;
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 4);
		MAKE_PADDED_VAR(bool, m_freePositionAxisX, m_freePositionAxisX, 8);
		MAKE_PADDED_VAR(bool, m_freePositionAxisY, m_freePositionAxisY, 9);
		MAKE_PADDED_VAR(bool, m_freePositionAxisZ, m_freePositionAxisZ, 10);
		MAKE_PADDED_VAR(bool, m_freeRotation, m_freeRotation, 11);
	};
};

class SStorySceneEventLookAtBlinkSettings {
public:
	union {
	bool m_canCloseEyes;
		MAKE_PADDED_VAR(bool, m_forceCloseEyes, m_forceCloseEyes, 1);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 4);
		MAKE_PADDED_VAR(float, m_startOffset, m_startOffset, 8);
		MAKE_PADDED_VAR(float, m_durationPercent, m_durationPercent, 12);
		MAKE_PADDED_VAR(float, m_horizontalAngleDeg, m_horizontalAngleDeg, 16);
	};
};

class SStorySceneSpotLightProperties {
public:
	union {
	float m_innerAngle;
		MAKE_PADDED_VAR(float, m_outerAngle, m_outerAngle, 4);
		MAKE_PADDED_VAR(float, m_softness, m_softness, 8);
	};
};

class SStreamedAttachment {
public:
	union {
	int32_t m_parentName;
		MAKE_PADDED_VAR(int32_t, m_parentClass, m_parentClass, 4);
		MAKE_PADDED_VAR(int32_t, m_childName, m_childName, 8);
		MAKE_PADDED_VAR(int32_t, m_childClass, m_childClass, 12);
		MAKE_PADDED_VAR(char*, m_data[2], m_data, 16);
	};
};

class SSwfFontDesc {
public:
	union {
	char* m_fontName;
		MAKE_PADDED_VAR(uint32_t, m_numGlyphs, m_numGlyphs, 12);
		MAKE_PADDED_VAR(bool, m_italic, m_italic, 16);
		MAKE_PADDED_VAR(bool, m_bold, m_bold, 17);
	};
};

class SSwfHeaderInfo {
public:
	union {
	float m_frameRate;
		MAKE_PADDED_VAR(float, m_frameHeight, m_frameHeight, 4);
		MAKE_PADDED_VAR(float, m_frameWidth, m_frameWidth, 8);
		MAKE_PADDED_VAR(uint32_t, m_frameCount, m_frameCount, 12);
		MAKE_PADDED_VAR(float, m_height, m_height, 16);
		MAKE_PADDED_VAR(float, m_width, m_width, 20);
		MAKE_PADDED_VAR(uint32_t, m_version, m_version, 24);
		MAKE_PADDED_VAR(bool, m_compressed, m_compressed, 28);
	};
};

class SSynchronizeAnimationToParentDefinition {
public:
	union {
	int32_t m_Parent_animation;
		MAKE_PADDED_VAR(int32_t, m_Play_animation, m_Play_animation, 4);
	};
};

class SSynchronizeAnimationToParentInstance {
public:
	union {
	};
};

class STargetSelectionWeights {
public:
	union {
	float m_angleWeight;
		MAKE_PADDED_VAR(float, m_distanceWeight, m_distanceWeight, 4);
		MAKE_PADDED_VAR(float, m_distanceRingWeight, m_distanceRingWeight, 8);
	};
};

class STimeScaleSource {
public:
	union {
	float m_timeScale;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 4);
		MAKE_PADDED_VAR(bool, m_affectCamera, m_affectCamera, 8);
		MAKE_PADDED_VAR(bool, m_dontSave, m_dontSave, 9);
		MAKE_PADDED_VAR(uint32_t, m_priorityIndex, m_priorityIndex, 12);
	};
};

class STimeScaleSourceSet {
public:
	union {
	int32_t m_priority;
		MAKE_PADDED_VAR(STimeScaleSource*, m_entries[2], m_entries, 4);
	};
};

class STwoBonesIKSolver {
public:
	union {
	};
};

class STwoBonesIKSolverBoneData {
public:
	union {
	int32_t m_name;
	};
};

class SUsedFastTravelEvent {
public:
	union {
	int32_t m_eventName;
		MAKE_PADDED_VAR(int32_t, m_tag, m_tag, 4);
		MAKE_PADDED_VAR(bool, m_onStart, m_onStart, 8);
	};
};

class SVitalSpotEnableConditions {
public:
	union {
	int32_t m_animationEventName;
		MAKE_PADDED_VAR(int32_t, m_VSActivatorBehTreeNodeName, m_VSActivatorBehTreeNodeName, 4);
		MAKE_PADDED_VAR(bool, m_enableByDefault, m_enableByDefault, 8);
	};
};

class SW3BaseStatusEvent {
public:
	union {
	};
};

class SW3JournalCharacterDescriptionEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalCharacterEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalCreatureDescriptionEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalCreatureEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalGlossaryDescriptionEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalGlossaryEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalHighlightEvent {
public:
	union {
	SJournalEvent sjournalevent;
	};
};

class SW3JournalHuntingQuestAddedEvent {
public:
	union {
	SJournalEvent sjournalevent;
	};
};

class SW3JournalHuntingQuestClueFoundEvent {
public:
	union {
	SJournalEvent sjournalevent;
	};
};

class SW3JournalObjectiveStatusEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalPlaceDescriptionEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalPlaceEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalQuestObjectiveCounterTrackEvent {
public:
	union {
	SJournalEvent sjournalevent;
	};
};

class SW3JournalQuestObjectiveTrackEvent {
public:
	union {
	SJournalEvent sjournalevent;
	};
};

class SW3JournalQuestStatusEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalQuestTrackEvent {
public:
	union {
	SJournalEvent sjournalevent;
	};
};

class SW3JournalStoryBookPageEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SW3JournalTrackEvent {
public:
	union {
	SJournalEvent sjournalevent;
	};
};

class SW3JournalTutorialEvent {
public:
	union {
	SW3BaseStatusEvent sw3basestatusevent;
	};
};

class SWanderHistoryEntryGeneratorParams {
public:
	union {
	int32_t m_wanderPointsGroupTag;
	};
};

class SWorkCategoriesWrapper {
public:
	union {
	int32_t* m_categories[2];
	};
};

class SWorkCategoryWrapper {
public:
	union {
	int32_t m_category;
	};
};

class SWorldMapImageInfo {
public:
	union {
	Rect m_cropRect;
		MAKE_PADDED_VAR(char*, m_baseFileName, m_baseFileName, 16);
		MAKE_PADDED_VAR(int32_t, m_height, m_height, 28);
		MAKE_PADDED_VAR(int32_t, m_width, m_width, 32);
	};
};

class SWorldMotionBlurSettings {
public:
	union {
	bool m_isPostTonemapping;
		MAKE_PADDED_VAR(float, m_distanceNear, m_distanceNear, 4);
		MAKE_PADDED_VAR(float, m_distanceRange, m_distanceRange, 8);
		MAKE_PADDED_VAR(float, m_strengthNear, m_strengthNear, 12);
		MAKE_PADDED_VAR(float, m_strengthFar, m_strengthFar, 16);
		MAKE_PADDED_VAR(float, m_fullBlendOverPixels, m_fullBlendOverPixels, 20);
		MAKE_PADDED_VAR(float, m_standoutDistanceNear, m_standoutDistanceNear, 24);
		MAKE_PADDED_VAR(float, m_standoutDistanceRange, m_standoutDistanceRange, 28);
		MAKE_PADDED_VAR(float, m_standoutAmountNear, m_standoutAmountNear, 32);
		MAKE_PADDED_VAR(float, m_standoutAmountFar, m_standoutAmountFar, 36);
		MAKE_PADDED_VAR(float, m_sharpenAmount, m_sharpenAmount, 40);
	};
};

class TextureGroup {
public:
	union {
	};
};

class Vector {
public:
	union {
	float m_X;
		MAKE_PADDED_VAR(float, m_Y, m_Y, 4);
		MAKE_PADDED_VAR(float, m_Z, m_Z, 8);
		MAKE_PADDED_VAR(float, m_W, m_W, 12);
	};
};

class Vector2 {
public:
	union {
	float m_X;
		MAKE_PADDED_VAR(float, m_Y, m_Y, 4);
	};
};

class Vector3 {
public:
	union {
	float m_X;
		MAKE_PADDED_VAR(float, m_Y, m_Y, 4);
		MAKE_PADDED_VAR(float, m_Z, m_Z, 8);
	};
};

class VirtualAnimationLayer {
public:
	union {
	};
};

class VirtualAnimationMotion {
public:
	union {
	float m_startTime;
		MAKE_PADDED_VAR(float, m_endTime, m_endTime, 4);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 8);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 12);
	};
};

class VirtualAnimationPoseFK {
public:
	union {
	float m_time;
		MAKE_PADDED_VAR(Vector, m_controlPoints, m_controlPoints, 16);
		MAKE_PADDED_VAR(int32_t*, m_indices[2], m_indices, 32);
		MAKE_PADDED_VAR(intptr_t*, m_transforms[133], m_transforms, 44);
	};
};

class VirtualAnimationPoseIK {
public:
	union {
	float m_time;
		MAKE_PADDED_VAR(intptr_t*, m_ids[2], m_ids, 4);
		MAKE_PADDED_VAR(Vector*, m_positionsMS[2], m_positionsMS, 16);
		MAKE_PADDED_VAR(EulerAngles*, m_rotationsMS[2], m_rotationsMS, 28);
		MAKE_PADDED_VAR(float*, m_weights[2], m_weights, 40);
	};
};

class VoicetagAppearancePair {
public:
	union {
	int32_t m_voicetag;
		MAKE_PADDED_VAR(int32_t, m_appearance, m_appearance, 4);
	};
};

class AACylinder {
public:
	union {
	Vector m_positionAndRadius;
		MAKE_PADDED_VAR(float, m_height, m_height, 16);
	};
};

class Bezier2dHandle {
public:
	union {
		MAKE_PADDED_VAR(Vector2, m_incomingTangent, m_incomingTangent, 8);
		MAKE_PADDED_VAR(Vector2, m_outgoingTangent, m_outgoingTangent, 16);
	};
};

class Box {
public:
	union {
	Vector m_Min;
		MAKE_PADDED_VAR(Vector, m_Max, m_Max, 16);
	};
};

class CBehTreeDistanceBasedTicketAlgorithmField {
public:
	union {
	CBehTreeValFloat m_distance;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 8);
	};
};

class CBehTreeValVector {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(Vector, m_value, m_value, 16);
	};
};

class CClipMapCookedData {
public:
	union {
	ISerializable iserializable;
	};
};

class CEASMultiValueSimpleEvent {
public:
	union {
	CExtAnimScriptEvent cextanimscriptevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_callback, m_callback, 32);
		MAKE_PADDED_VAR(SMultiValue, m_properties, m_properties, 36);
	};
};

class CEnvBrightnessTintParameters {
public:
	union {
	Vector m_tint;
		MAKE_PADDED_VAR(float, m_brightness, m_brightness, 16);
	};
};

class CEnvDayCycleOverrideParameters {
public:
	union {
	bool m_fakeDayCycleEnable;
		MAKE_PADDED_VAR(float, m_fakeDayCycleHour, m_fakeDayCycleHour, 4);
		MAKE_PADDED_VAR(bool, m_enableCustomSunRotation, m_enableCustomSunRotation, 8);
		MAKE_PADDED_VAR(EulerAngles, m_customSunRotation, m_customSunRotation, 12);
	};
};

class CEnvRadialBlurParameters {
public:
	union {
	Vector m_radialBlurSource;
		MAKE_PADDED_VAR(float, m_radialBlurAmount, m_radialBlurAmount, 16);
		MAKE_PADDED_VAR(float, m_sineWaveAmount, m_sineWaveAmount, 20);
		MAKE_PADDED_VAR(float, m_sineWaveSpeed, m_sineWaveSpeed, 24);
		MAKE_PADDED_VAR(float, m_sineWaveFreq, m_sineWaveFreq, 28);
		MAKE_PADDED_VAR(float, m_centerMultiplier, m_centerMultiplier, 32);
		MAKE_PADDED_VAR(float, m_distance, m_distance, 36);
	};
};

class CExpSyncEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(bool, m_translation, m_translation, 32);
		MAKE_PADDED_VAR(bool, m_rotation, m_rotation, 33);
	};
};

class CExtAnimAttackEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_soundAttackType, m_soundAttackType, 32);
	};
};

class CExtAnimCutsceneBodyPartEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_appearance, m_appearance, 32);
	};
};

class CExtAnimCutsceneBreakEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(bool, m_iAmHackDoNotUseMeInGame, m_iAmHackDoNotUseMeInGame, 32);
	};
};

class CExtAnimCutsceneDialogEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
	};
};

class CExtAnimCutsceneDisableClothEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 32);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 36);
	};
};

class CExtAnimCutsceneDisableDangleEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 32);
	};
};

class CExtAnimCutsceneEnvironmentEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(bool, m_stabilizeBlending, m_stabilizeBlending, 32);
		MAKE_PADDED_VAR(bool, m_instantEyeAdaptation, m_instantEyeAdaptation, 33);
		MAKE_PADDED_VAR(bool, m_instantDissolve, m_instantDissolve, 34);
		MAKE_PADDED_VAR(bool, m_forceSetupLocalEnvironments, m_forceSetupLocalEnvironments, 35);
		MAKE_PADDED_VAR(bool, m_forceSetupGlobalEnvironments, m_forceSetupGlobalEnvironments, 36);
		MAKE_PADDED_VAR(char*, m_environmentName, m_environmentName, 40);
		MAKE_PADDED_VAR(bool, m_environmentActivate, m_environmentActivate, 52);
		MAKE_PADDED_VAR(bool, m_forceNoOtherEnvironments, m_forceNoOtherEnvironments, 53);
	};
};

class CExtAnimCutsceneEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
	};
};

class CExtAnimCutsceneFadeEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(bool, m_in, m_in, 32);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 36);
		MAKE_PADDED_VAR(Color, m_color, m_color, 40);
	};
};

class CExtAnimCutsceneHideEntityEvent {
public:
	union {
	CExtAnimCutsceneEvent cextanimcutsceneevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_entTohideTag, m_entTohideTag, 32);
	};
};

class CExtAnimCutsceneQuestEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(char*, m_cutsceneName, m_cutsceneName, 32);
	};
};

class CExtAnimCutsceneResetClothAndDangleEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(bool, m_forceRelaxedState, m_forceRelaxedState, 32);
	};
};

class CExtAnimDialogKeyPoseMarker {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
	};
};

class CExtAnimDurationEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
	};
};

class CExtAnimEffectDurationEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 40);
	};
};

class CExtAnimExplorationEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
	};
};

class CExtAnimGameplayMimicEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_animation, m_animation, 40);
	};
};

class CExtAnimItemEffectDurationEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_itemSlot, m_itemSlot, 40);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 44);
	};
};

class CExtAnimLocationAdjustmentEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_locationAdjustmentVar, m_locationAdjustmentVar, 40);
		MAKE_PADDED_VAR(int32_t, m_adjustmentActiveVar, m_adjustmentActiveVar, 44);
	};
};

class CExtAnimOnSlopeEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(float, m_slopeAngle, m_slopeAngle, 40);
	};
};

class CExtAnimReattachItemEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_item, m_item, 40);
		MAKE_PADDED_VAR(int32_t, m_targetSlot, m_targetSlot, 44);
	};
};

class CExtAnimRotationAdjustmentEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_rotationAdjustmentVar, m_rotationAdjustmentVar, 40);
	};
};

class CExtAnimRotationAdjustmentLocationBasedEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_locationAdjustmentVar, m_locationAdjustmentVar, 40);
		MAKE_PADDED_VAR(int32_t, m_targetLocationVar, m_targetLocationVar, 44);
		MAKE_PADDED_VAR(int32_t, m_adjustmentActiveVar, m_adjustmentActiveVar, 48);
	};
};

class CExtAnimScriptDurationEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
	};
};

class CFlyingSwarmGroup {
public:
	union {
		MAKE_PADDED_VAR(CFlyingGroupId, m_groupId, m_groupId, 296);
		MAKE_PADDED_VAR(Vector, m_groupCenter, m_groupCenter, 304);
		MAKE_PADDED_VAR(Vector, m_targetPosition, m_targetPosition, 320);
		MAKE_PADDED_VAR(int32_t, m_currentGroupState, m_currentGroupState, 336);
		MAKE_PADDED_VAR(int32_t, m_boidCount, m_boidCount, 340);
		MAKE_PADDED_VAR(int32_t, m_toSpawnCount, m_toSpawnCount, 344);
		MAKE_PADDED_VAR(int32_t, m_spawnPoiType, m_spawnPoiType, 348);
		MAKE_PADDED_VAR(int32_t, m_toDespawnCount, m_toDespawnCount, 352);
		MAKE_PADDED_VAR(int32_t, m_despawnPoiType, m_despawnPoiType, 356);
		MAKE_PADDED_VAR(int32_t, m_changeGroupState, m_changeGroupState, 360);
	};
};

class CGameEnvironmentParams {
public:
	union {
	CEnvRadialBlurParameters m_radialBlur;
		MAKE_PADDED_VAR(CEnvDayCycleOverrideParameters, m_dayCycleOverride, m_dayCycleOverride, 48);
		MAKE_PADDED_VAR(CEnvDisplaySettingsParams, m_displaySettings, m_displaySettings, 72);
		MAKE_PADDED_VAR(CEnvBrightnessTintParameters, m_brightnessTint, m_brightnessTint, 96);
		MAKE_PADDED_VAR(float, m_fullscreenBlurIntensity, m_fullscreenBlurIntensity, 528);
		MAKE_PADDED_VAR(float, m_gameUnderwaterBrightness, m_gameUnderwaterBrightness, 532);
		MAKE_PADDED_VAR(bool, m_cutsceneDofMode, m_cutsceneDofMode, 536);
		MAKE_PADDED_VAR(bool, m_cutsceneOrDialog, m_cutsceneOrDialog, 537);
	};
};

class CGrassCellMask {
public:
	union {
		MAKE_PADDED_VAR(char*, m_srtFileName, m_srtFileName, 8);
		MAKE_PADDED_VAR(int32_t, m_firstRow, m_firstRow, 20);
		MAKE_PADDED_VAR(int32_t, m_lastRow, m_lastRow, 24);
		MAKE_PADDED_VAR(int32_t, m_firstCol, m_firstCol, 28);
		MAKE_PADDED_VAR(int32_t, m_lastCol, m_lastCol, 32);
		MAKE_PADDED_VAR(float, m_cellSize, m_cellSize, 36);
		MAKE_PADDED_VAR(LongBitField, m_bitmap, m_bitmap, 40);
	};
};

class CLayerGroup {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(char*, m_name, m_name, 56);
		MAKE_PADDED_VAR(char*, m_depotPath, m_depotPath, 68);
		MAKE_PADDED_VAR(char*, m_absolutePath, m_absolutePath, 80);
		MAKE_PADDED_VAR(bool, m_isVisibleOnStart, m_isVisibleOnStart, 93);
		MAKE_PADDED_VAR(bool, m_systemGroup, m_systemGroup, 94);
		MAKE_PADDED_VAR(bool, m_hasEmbeddedLayerInfos, m_hasEmbeddedLayerInfos, 95);
		MAKE_PADDED_VAR(uint64_t, m_idHash, m_idHash, 104);
	};
};

class CPreAttackEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(CPreAttackEventData, m_data, m_data, 40);
	};
};

class CR4LootContainerDefinition {
public:
	union {
	CR4LootDefinitionBase cr4lootdefinitionbase;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 8);
		MAKE_PADDED_VAR(uint32_t, m_quantityMin, m_quantityMin, 16);
		MAKE_PADDED_VAR(uint32_t, m_quantityMax, m_quantityMax, 20);
		MAKE_PADDED_VAR(uint32_t, m_playerLevelMin, m_playerLevelMin, 24);
		MAKE_PADDED_VAR(uint32_t, m_playerLevelMax, m_playerLevelMax, 28);
		MAKE_PADDED_VAR(uint32_t, m_crafterLevelMin, m_crafterLevelMin, 32);
		MAKE_PADDED_VAR(uint32_t, m_crafterLevelMax, m_crafterLevelMax, 36);
		MAKE_PADDED_VAR(uint32_t, m_respawnTime, m_respawnTime, 56);
		MAKE_PADDED_VAR(CR4LootItemDefinition*, m_items[2], m_items, 60);
	};
};

class CScriptThread {
public:
	union {
	IReferencable ireferencable;
	};
};

class CSectorData {
public:
	union {
	ISerializable iserializable;
	};
};

class CSectorDataMerged {
public:
	union {
	CSectorData csectordata;
	};
};

class CSkeletalAnimationHitParam {
public:
	union {
	ISkeletalAnimationSetEntryParam iskeletalanimationsetentryparam;
	};
};

class CSkeletalAnimationStepClipParam {
public:
	union {
	ISkeletalAnimationSetEntryParam iskeletalanimationsetentryparam;
		MAKE_PADDED_VAR(float*, m_syncPoints[2], m_syncPoints, 16);
	};
};

class CSkeletalAnimationTrajectoryParam {
public:
	union {
	ISkeletalAnimationSetEntryParam iskeletalanimationsetentryparam;
		MAKE_PADDED_VAR(int32_t, m_tagId, m_tagId, 144);
	};
};

class CSkeletalAnimationTrajectoryTrackParam {
public:
	union {
	ISkeletalAnimationSetEntryParam iskeletalanimationsetentryparam;
		MAKE_PADDED_VAR(bool, m_editorOnly, m_editorOnly, 16);
		MAKE_PADDED_VAR(int32_t*, m_names[2], m_names, 20);
		MAKE_PADDED_VAR(Vector**, m_datas[2][2], m_datas, 32);
	};
};

class CSSceneTimetableEntry {
public:
	union {
	GameTimeInterval m_time;
		MAKE_PADDED_VAR(intptr_t*, m_scenes[2], m_scenes, 8);
	};
};

class CSStoryPhaseSpawnTimetableEntry {
public:
	union {
	GameTime m_time;
		MAKE_PADDED_VAR(int32_t, m_quantity, m_quantity, 4);
		MAKE_PADDED_VAR(GameTime, m_respawnDelay, m_respawnDelay, 8);
		MAKE_PADDED_VAR(bool, m_respawn, m_respawn, 12);
	};
};

class CSStoryPhaseTimetableACategoriesTimetableEntry {
public:
	union {
	GameTime m_time;
		MAKE_PADDED_VAR(CSStoryPhaseTimetableActionEntry*, m_actions[2], m_actions, 4);
	};
};

class CSystemLayerGroup {
public:
	union {
	CLayerGroup clayergroup;
		MAKE_PADDED_VAR(char*, m_name, m_name, 56);
		MAKE_PADDED_VAR(char*, m_depotPath, m_depotPath, 68);
		MAKE_PADDED_VAR(char*, m_absolutePath, m_absolutePath, 80);
		MAKE_PADDED_VAR(bool, m_isVisibleOnStart, m_isVisibleOnStart, 93);
		MAKE_PADDED_VAR(bool, m_systemGroup, m_systemGroup, 94);
		MAKE_PADDED_VAR(bool, m_hasEmbeddedLayerInfos, m_hasEmbeddedLayerInfos, 95);
		MAKE_PADDED_VAR(uint64_t, m_idHash, m_idHash, 104);
	};
};

class CutCone {
public:
	union {
	Vector m_positionAndRadius1;
		MAKE_PADDED_VAR(Vector, m_normalAndRadius2, m_normalAndRadius2, 16);
		MAKE_PADDED_VAR(float, m_height, m_height, 32);
	};
};

class Cylinder {
public:
	union {
	Vector m_positionAndRadius;
		MAKE_PADDED_VAR(Vector, m_normalAndHeight, m_normalAndHeight, 16);
	};
};

class FixedCapsule {
public:
	union {
	Vector m_PointRadius;
		MAKE_PADDED_VAR(float, m_Height, m_Height, 16);
	};
};

class IAnimationBuffer {
public:
	union {
	ISerializable iserializable;
	};
};

class IMotionExtraction {
public:
	union {
	ISerializable iserializable;
	};
};

class IScriptable {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(char*, m_object, m_object, 16);
	};
};

class Bla: public IScriptable
{
	
};

class IScriptedFlash {
public:
	union {
	IScriptable iscriptable;
	};
};

class ISpawnCondition {
public:
	union {
	IScriptable iscriptable;
	};
};

class ISpawnScriptCondition {
public:
	union {
	ISpawnCondition ispawncondition;
	};
};

class ITicketAlgorithmScript {
public:
	union {
	IScriptable iscriptable;
		MAKE_PADDED_VAR(int32_t, m_overrideTicketsCount, m_overrideTicketsCount, 72);
	};
};

class Matrix {
public:
	union {
	Vector m_X;
		MAKE_PADDED_VAR(Vector, m_Y, m_Y, 16);
		MAKE_PADDED_VAR(Vector, m_Z, m_Z, 32);
		MAKE_PADDED_VAR(Vector, m_W, m_W, 48);
	};
};

class OrientedBox {
public:
	union {
	Vector m_position;
		MAKE_PADDED_VAR(Vector, m_edge_1, m_edge_1, 16);
		MAKE_PADDED_VAR(Vector, m_edge_2, m_edge_2, 32);
	};
};

class Plane {
public:
	union {
	Vector m_NormalDistance;
	};
};

class Quad {
public:
	union {
	Vector m_p1;
		MAKE_PADDED_VAR(Vector, m_p2, m_p2, 16);
		MAKE_PADDED_VAR(Vector, m_p3, m_p3, 32);
		MAKE_PADDED_VAR(Vector, m_p4, m_p4, 48);
	};
};

class SAnimationBufferBitwiseCompressedBoneTrack {
public:
	union {
	SAnimationBufferBitwiseCompressedData m_position;
		MAKE_PADDED_VAR(SAnimationBufferBitwiseCompressedData, m_orientation, m_orientation, 16);
	};
};

class SAnimationTrajectoryPlayerToken {
public:
	union {
	bool m_isValid;
		MAKE_PADDED_VAR(Vector, m_pointWS, m_pointWS, 16);
		MAKE_PADDED_VAR(Vector, m_syncPointMS, m_syncPointMS, 48);
		MAKE_PADDED_VAR(float, m_syncPointDuration, m_syncPointDuration, 64);
		MAKE_PADDED_VAR(float, m_timeFactor, m_timeFactor, 68);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 72);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 76);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 80);
		MAKE_PADDED_VAR(float, m_syncTime, m_syncTime, 84);
	};
};

class SAnimShift {
public:
	union {
	Matrix m_originalTransform;
		MAKE_PADDED_VAR(Matrix, m_transform, m_transform, 64);
		MAKE_PADDED_VAR(float, m_time, m_time, 128);
	};
};

class SAreaMapPinInfo {
public:
	union {
	int32_t m_areaType;
		MAKE_PADDED_VAR(Vector, m_position, m_position, 16);
		MAKE_PADDED_VAR(char*, m_worldPath, m_worldPath, 32);
		MAKE_PADDED_VAR(int32_t, m_requiredChunk, m_requiredChunk, 44);
		MAKE_PADDED_VAR(int32_t, m_localisationName, m_localisationName, 48);
		MAKE_PADDED_VAR(int32_t, m_localisationDescription, m_localisationDescription, 52);
	};
};

class SBehaviorComboDirection {
public:
	union {
	SBehaviorComboDistance m_distSmall;
		MAKE_PADDED_VAR(SBehaviorComboDistance, m_distMedium, m_distMedium, 12);
		MAKE_PADDED_VAR(SBehaviorComboDistance, m_distLarge, m_distLarge, 24);
	};
};

class SBehaviorComboLevel {
public:
	union {
	SBehaviorComboDirection m_dirFront;
		MAKE_PADDED_VAR(SBehaviorComboDirection, m_dirBack, m_dirBack, 36);
		MAKE_PADDED_VAR(SBehaviorComboDirection, m_dirLeft, m_dirLeft, 72);
		MAKE_PADDED_VAR(SBehaviorComboDirection, m_dirRight, m_dirRight, 108);
		MAKE_PADDED_VAR(int32_t, m_abilityRequired, m_abilityRequired, 144);
	};
};

class SBehaviorConstraintPullReinToHandData {
public:
	union {
	int32_t m_reinBoneName;
		MAKE_PADDED_VAR(int32_t, m_handBoneName, m_handBoneName, 4);
		MAKE_PADDED_VAR(Vector, m_reinContactPoint, m_reinContactPoint, 16);
		MAKE_PADDED_VAR(Vector, m_handContactPoint, m_handContactPoint, 32);
	};
};

class SBehaviorConstraintPullStirrupToLegData {
public:
	union {
	int32_t m_stirrupBoneName;
		MAKE_PADDED_VAR(int32_t, m_footBoneName, m_footBoneName, 4);
		MAKE_PADDED_VAR(int32_t, m_toeBoneName, m_toeBoneName, 8);
		MAKE_PADDED_VAR(Vector, m_stirrupContactPoint, m_stirrupContactPoint, 16);
		MAKE_PADDED_VAR(Vector, m_footContactPoint, m_footContactPoint, 32);
		MAKE_PADDED_VAR(Vector, m_toeAlignStirrupSideDir, m_toeAlignStirrupSideDir, 48);
		MAKE_PADDED_VAR(Vector, m_toeAlignStirrupRotationAxisDir, m_toeAlignStirrupRotationAxisDir, 64);
	};
};

class SBoatDestructionVolume {
public:
	union {
	Vector m_volumeCorners;
		MAKE_PADDED_VAR(Vector, m_volumeLocalPosition, m_volumeLocalPosition, 16);
		MAKE_PADDED_VAR(float, m_areaHealth, m_areaHealth, 32);
	};
};

class SCurveDataEntry {
public:
	union {
	Vector m_ntrolPoint;
		MAKE_PADDED_VAR(float, m_me, m_me, 16);
		MAKE_PADDED_VAR(float, m_lue, m_lue, 20);
		MAKE_PADDED_VAR(uint16_t, m_rveTypeL, m_rveTypeL, 24);
		MAKE_PADDED_VAR(uint16_t, m_rveTypeR, m_rveTypeR, 26);
	};
};

class SCustomCameraPreset {
public:
	union {
	int32_t m_pressetName;
		MAKE_PADDED_VAR(float, m_distance, m_distance, 4);
		MAKE_PADDED_VAR(Vector, m_offset, m_offset, 16);
	};
};

class Segment {
public:
	union {
	Vector m_origin;
		MAKE_PADDED_VAR(Vector, m_direction, m_direction, 16);
	};
};

class SExplorationQueryContext {
public:
	union {
	Vector m_inputDirectionInWorldSpace;
		MAKE_PADDED_VAR(float, m_maxAngleToCheck, m_maxAngleToCheck, 16);
		MAKE_PADDED_VAR(bool, m_forJumping, m_forJumping, 20);
		MAKE_PADDED_VAR(bool, m_forDynamic, m_forDynamic, 21);
		MAKE_PADDED_VAR(bool, m_dontDoZAndDistChecks, m_dontDoZAndDistChecks, 22);
		MAKE_PADDED_VAR(bool, m_laddersOnly, m_laddersOnly, 23);
		MAKE_PADDED_VAR(bool, m_forAutoTraverseSmall, m_forAutoTraverseSmall, 24);
		MAKE_PADDED_VAR(bool, m_forAutoTraverseBig, m_forAutoTraverseBig, 25);
	};
};

class SFlashRenderTargetCamera {
public:
	union {
	Vector m_position;
		MAKE_PADDED_VAR(EulerAngles, m_rotation, m_rotation, 16);
		MAKE_PADDED_VAR(float, m_fov, m_fov, 28);
		MAKE_PADDED_VAR(float, m_zoom, m_zoom, 32);
	};
};

class SFurDiffuse {
public:
	union {
	float m_diffuseBlend;
		MAKE_PADDED_VAR(float, m_diffuseScale, m_diffuseScale, 4);
		MAKE_PADDED_VAR(float, m_diffuseHairNormalWeight, m_diffuseHairNormalWeight, 8);
		MAKE_PADDED_VAR(uint32_t, m_diffuseBoneIndex, m_diffuseBoneIndex, 12);
		MAKE_PADDED_VAR(Vector, m_diffuseBoneLocalPos, m_diffuseBoneLocalPos, 16);
		MAKE_PADDED_VAR(float, m_diffuseNoiseScale, m_diffuseNoiseScale, 32);
		MAKE_PADDED_VAR(float, m_diffuseNoiseFreqU, m_diffuseNoiseFreqU, 36);
		MAKE_PADDED_VAR(float, m_diffuseNoiseFreqV, m_diffuseNoiseFreqV, 40);
		MAKE_PADDED_VAR(float, m_diffuseNoiseGain, m_diffuseNoiseGain, 44);
	};
};

class SFurSimulation {
public:
	union {
	bool m_simulate;
		MAKE_PADDED_VAR(float, m_massScale, m_massScale, 4);
		MAKE_PADDED_VAR(float, m_damping, m_damping, 8);
		MAKE_PADDED_VAR(float, m_friction, m_friction, 12);
		MAKE_PADDED_VAR(float, m_backStopRadius, m_backStopRadius, 16);
		MAKE_PADDED_VAR(float, m_inertiaScale, m_inertiaScale, 20);
		MAKE_PADDED_VAR(float, m_inertiaLimit, m_inertiaLimit, 24);
		MAKE_PADDED_VAR(bool, m_useCollision, m_useCollision, 28);
		MAKE_PADDED_VAR(Vector, m_gravityDir, m_gravityDir, 32);
		MAKE_PADDED_VAR(float, m_windNoise, m_windNoise, 64);
		MAKE_PADDED_VAR(float, m_windScaler, m_windScaler, 68);
	};
};

class SGameplayConfig {
public:
	union {
	SGameplayLODConfig m_LOD;
		MAKE_PADDED_VAR(bool, m_horseProp, m_horseProp, 76);
		MAKE_PADDED_VAR(bool, m_horseSpeedCtrl, m_horseSpeedCtrl, 78);
		MAKE_PADDED_VAR(float, m_horseSpeedInc, m_horseSpeedInc, 80);
		MAKE_PADDED_VAR(float, m_horseSpeedDec, m_horseSpeedDec, 84);
		MAKE_PADDED_VAR(float, m_horseSpeedStep, m_horseSpeedStep, 88);
		MAKE_PADDED_VAR(float, m_horseInputCooldown, m_horseInputCooldown, 92);
		MAKE_PADDED_VAR(float, m_horseStaminaInc, m_horseStaminaInc, 96);
		MAKE_PADDED_VAR(float, m_horseStaminaDec, m_horseStaminaDec, 100);
		MAKE_PADDED_VAR(float, m_horseStaminaCooldown, m_horseStaminaCooldown, 104);
		MAKE_PADDED_VAR(float, m_horseSpeedDecCooldown, m_horseSpeedDecCooldown, 108);
		MAKE_PADDED_VAR(float, m_horsePathFactor, m_horsePathFactor, 112);
		MAKE_PADDED_VAR(float, m_horsePathDamping, m_horsePathDamping, 116);
		MAKE_PADDED_VAR(float, m_horseRoadSearchRadius, m_horseRoadSearchRadius, 120);
		MAKE_PADDED_VAR(float, m_horseRoadSearchDistanceSlow, m_horseRoadSearchDistanceSlow, 124);
		MAKE_PADDED_VAR(float, m_horseRoadSearchDistanceFast, m_horseRoadSearchDistanceFast, 128);
		MAKE_PADDED_VAR(float, m_horseRoadSelectionAngleCoeff, m_horseRoadSelectionAngleCoeff, 132);
		MAKE_PADDED_VAR(float, m_horseRoadSelectionDistanceCoeff, m_horseRoadSelectionDistanceCoeff, 136);
		MAKE_PADDED_VAR(float, m_horseRoadSelectionCurrentRoadPreferenceCoeff, m_horseRoadSelectionCurrentRoadPreferenceCoeff, 140);
		MAKE_PADDED_VAR(float, m_horseRoadSelectionTurnAmountFeeCoeff, m_horseRoadSelectionTurnAmountFeeCoeff, 144);
		MAKE_PADDED_VAR(float, m_horseRoadFollowingCooldownTime, m_horseRoadFollowingCooldownTime, 148);
		MAKE_PADDED_VAR(float, m_horseRoadFollowingCooldownDistance, m_horseRoadFollowingCooldownDistance, 152);
		MAKE_PADDED_VAR(int32_t, m_playerPreviewInventory, m_playerPreviewInventory, 156);
		MAKE_PADDED_VAR(float, m_debugA, m_debugA, 160);
		MAKE_PADDED_VAR(float, m_debugB, m_debugB, 164);
		MAKE_PADDED_VAR(float, m_debugC, m_debugC, 168);
		MAKE_PADDED_VAR(float, m_debugD, m_debugD, 172);
		MAKE_PADDED_VAR(float, m_debugE, m_debugE, 176);
		MAKE_PADDED_VAR(float, m_debugF, m_debugF, 180);
		MAKE_PADDED_VAR(float, m_debugG, m_debugG, 184);
		MAKE_PADDED_VAR(bool, m_interactionTestCameraRange, m_interactionTestCameraRange, 188);
		MAKE_PADDED_VAR(float, m_interactionTestCameraRangeAngle, m_interactionTestCameraRangeAngle, 192);
		MAKE_PADDED_VAR(bool, m_interactionTestPlayerRange, m_interactionTestPlayerRange, 196);
		MAKE_PADDED_VAR(float, m_interactionTestPlayerRangeAngle, m_interactionTestPlayerRangeAngle, 200);
		MAKE_PADDED_VAR(bool, m_interactionTestIsInPlayerRadius, m_interactionTestIsInPlayerRadius, 204);
		MAKE_PADDED_VAR(float, m_interactionTestPlayerRadius, m_interactionTestPlayerRadius, 208);
		MAKE_PADDED_VAR(bool, m_forceLookAtPlayer, m_forceLookAtPlayer, 212);
		MAKE_PADDED_VAR(float, m_forceLookAtPlayerDist, m_forceLookAtPlayerDist, 216);
		MAKE_PADDED_VAR(bool, m_useBehaviorLod, m_useBehaviorLod, 220);
		MAKE_PADDED_VAR(bool, m_forceBehaviorLod, m_forceBehaviorLod, 221);
		MAKE_PADDED_VAR(int32_t, m_forceBehaviorLodLevel, m_forceBehaviorLodLevel, 224);
		MAKE_PADDED_VAR(bool, m_logMissingAnimations, m_logMissingAnimations, 228);
		MAKE_PADDED_VAR(bool, m_logRequestedAnimations, m_logRequestedAnimations, 229);
		MAKE_PADDED_VAR(bool, m_logSampledAnimations, m_logSampledAnimations, 230);
		MAKE_PADDED_VAR(bool, m_animationMultiUpdate, m_animationMultiUpdate, 231);
		MAKE_PADDED_VAR(bool, m_animationAsyncUpdate, m_animationAsyncUpdate, 232);
		MAKE_PADDED_VAR(bool, m_animationAsyncJobs, m_animationAsyncJobs, 233);
		MAKE_PADDED_VAR(bool, m_animationCanUseAsyncJobs, m_animationCanUseAsyncJobs, 234);
		MAKE_PADDED_VAR(bool, m_animationAsyncJobsUpdateFrustum, m_animationAsyncJobsUpdateFrustum, 235);
		MAKE_PADDED_VAR(bool, m_streamOnlyVisibleLayers, m_streamOnlyVisibleLayers, 236);
		MAKE_PADDED_VAR(bool, m_useWorkFreezing, m_useWorkFreezing, 237);
		MAKE_PADDED_VAR(bool, m_workResetInFreezing, m_workResetInFreezing, 238);
		MAKE_PADDED_VAR(bool, m_workSynchronization, m_workSynchronization, 239);
		MAKE_PADDED_VAR(float, m_workFreezingRadiusForInvisibleActors, m_workFreezingRadiusForInvisibleActors, 240);
		MAKE_PADDED_VAR(float, m_workFreezingDelay, m_workFreezingDelay, 244);
		MAKE_PADDED_VAR(float, m_workMaxFreezingTime, m_workMaxFreezingTime, 248);
		MAKE_PADDED_VAR(float, m_workAnimSpeedMulMin, m_workAnimSpeedMulMin, 252);
		MAKE_PADDED_VAR(float, m_workAnimSpeedMulMax, m_workAnimSpeedMulMax, 256);
		MAKE_PADDED_VAR(float, m_workMaxAnimOffset, m_workMaxAnimOffset, 260);
		MAKE_PADDED_VAR(float, m_physicsTerrainAdditionalElevation, m_physicsTerrainAdditionalElevation, 264);
		MAKE_PADDED_VAR(float, m_physicsTerrainThickness, m_physicsTerrainThickness, 268);
		MAKE_PADDED_VAR(float, m_physicsKillingZVelocity, m_physicsKillingZVelocity, 272);
		MAKE_PADDED_VAR(float, m_physicsTerrainDebugMaxSlope, m_physicsTerrainDebugMaxSlope, 276);
		MAKE_PADDED_VAR(float, m_physicsTerrainDebugRange, m_physicsTerrainDebugRange, 280);
		MAKE_PADDED_VAR(float, m_physicsCollisionPredictionTime, m_physicsCollisionPredictionTime, 284);
		MAKE_PADDED_VAR(uint32_t, m_physicsCollisionPredictionSteps, m_physicsCollisionPredictionSteps, 288);
		MAKE_PADDED_VAR(float, m_physicsCCTMaxDisp, m_physicsCCTMaxDisp, 292);
		MAKE_PADDED_VAR(float, m_terrainInfluenceLimitMin, m_terrainInfluenceLimitMin, 296);
		MAKE_PADDED_VAR(float, m_terrainInfluenceLimitMax, m_terrainInfluenceLimitMax, 300);
		MAKE_PADDED_VAR(float, m_terrainInfluenceMul, m_terrainInfluenceMul, 304);
		MAKE_PADDED_VAR(float, m_slidingLimitMin, m_slidingLimitMin, 308);
		MAKE_PADDED_VAR(float, m_slidingLimitMax, m_slidingLimitMax, 312);
		MAKE_PADDED_VAR(float, m_slidingDamping, m_slidingDamping, 316);
		MAKE_PADDED_VAR(float, m_maxPlatformDisplacement, m_maxPlatformDisplacement, 320);
		MAKE_PADDED_VAR(float, m_virtualRadiusTime, m_virtualRadiusTime, 328);
		MAKE_PADDED_VAR(float, m_movingSwimmingOffset, m_movingSwimmingOffset, 376);
		MAKE_PADDED_VAR(float, m_emergeSpeed, m_emergeSpeed, 380);
		MAKE_PADDED_VAR(float, m_submergeSpeed, m_submergeSpeed, 384);
		MAKE_PADDED_VAR(int32_t, m_curvePrecision, m_curvePrecision, 388);
		MAKE_PADDED_VAR(bool, m_showSegments, m_showSegments, 392);
		MAKE_PADDED_VAR(bool, m_showRotations, m_showRotations, 393);
		MAKE_PADDED_VAR(bool, m_showNodes, m_showNodes, 394);
		MAKE_PADDED_VAR(float, m_timeScale, m_timeScale, 396);
		MAKE_PADDED_VAR(SGameplayConfigLookAts, m_lookAtConfig, m_lookAtConfig, 408);
		MAKE_PADDED_VAR(float, m_cameraHidePlayerDistMin, m_cameraHidePlayerDistMin, 504);
		MAKE_PADDED_VAR(float, m_cameraHidePlayerDistMax, m_cameraHidePlayerDistMax, 508);
		MAKE_PADDED_VAR(float, m_cameraHidePlayerSwordsDistMin, m_cameraHidePlayerSwordsDistMin, 512);
		MAKE_PADDED_VAR(float, m_cameraHidePlayerSwordsDistMax, m_cameraHidePlayerSwordsDistMax, 516);
		MAKE_PADDED_VAR(float, m_cameraHidePlayerSwordsAngleMin, m_cameraHidePlayerSwordsAngleMin, 520);
		MAKE_PADDED_VAR(float, m_cameraHidePlayerSwordsAngleMax, m_cameraHidePlayerSwordsAngleMax, 524);
		MAKE_PADDED_VAR(bool, m_cameraPositionDamp, m_cameraPositionDamp, 528);
		MAKE_PADDED_VAR(float, m_cameraPositionDampLength, m_cameraPositionDampLength, 532);
		MAKE_PADDED_VAR(float, m_cameraPositionDampLengthOffset, m_cameraPositionDampLengthOffset, 536);
		MAKE_PADDED_VAR(float, m_cameraPositionDampSpeed, m_cameraPositionDampSpeed, 540);
		MAKE_PADDED_VAR(bool, m_processNpcsAndCameraCollisions, m_processNpcsAndCameraCollisions, 544);
		MAKE_PADDED_VAR(float, m_movementSmoothing, m_movementSmoothing, 548);
		MAKE_PADDED_VAR(float, m_movementSmoothingOnHorse, m_movementSmoothingOnHorse, 552);
		MAKE_PADDED_VAR(float, m_movementTorsoDamp, m_movementTorsoDamp, 556);
		MAKE_PADDED_VAR(float, m_movementRotDamp, m_movementRotDamp, 560);
		MAKE_PADDED_VAR(bool, m_enableMeshFlushInScenes, m_enableMeshFlushInScenes, 564);
		MAKE_PADDED_VAR(bool, m_enableTextureFlushInScenes, m_enableTextureFlushInScenes, 565);
		MAKE_PADDED_VAR(bool, m_enableAnimationFlushInScenes, m_enableAnimationFlushInScenes, 566);
		MAKE_PADDED_VAR(bool, m_enableSimplePriorityLoadingInScenes, m_enableSimplePriorityLoadingInScenes, 567);
		MAKE_PADDED_VAR(bool, m_enableSceneRewind, m_enableSceneRewind, 568);
		MAKE_PADDED_VAR(bool, m_useFrozenFrameInsteadOfBlackscreen, m_useFrozenFrameInsteadOfBlackscreen, 569);
		MAKE_PADDED_VAR(float, m_sceneIgnoreInputDuration, m_sceneIgnoreInputDuration, 572);
		MAKE_PADDED_VAR(bool, m_gcAfterCutscenesWithCamera, m_gcAfterCutscenesWithCamera, 576);
		MAKE_PADDED_VAR(bool, m_gcAfterNotGameplayScenes, m_gcAfterNotGameplayScenes, 577);
		MAKE_PADDED_VAR(float, m_autosaveCooldown, m_autosaveCooldown, 580);
		MAKE_PADDED_VAR(float, m_autosaveDelay, m_autosaveDelay, 584);
		MAKE_PADDED_VAR(SGameplayConfigGameCamera, m_gameCamera, m_gameCamera, 592);
		MAKE_PADDED_VAR(bool, m_doNotClickMe, m_doNotClickMe, 736);
		MAKE_PADDED_VAR(bool, m_idUseNewVoicePipeline, m_idUseNewVoicePipeline, 737);
		MAKE_PADDED_VAR(float, m_woundDistanceWeight, m_woundDistanceWeight, 740);
		MAKE_PADDED_VAR(float, m_woundDirectionWeight, m_woundDirectionWeight, 744);
		MAKE_PADDED_VAR(float, m_strayActorDespawnDistance, m_strayActorDespawnDistance, 748);
		MAKE_PADDED_VAR(int32_t, m_strayActorMaxHoursToKeep, m_strayActorMaxHoursToKeep, 752);
		MAKE_PADDED_VAR(int32_t, m_strayActorMaxActorsToKeep, m_strayActorMaxActorsToKeep, 756);
	};
};

class SGameplayEventParamObject {
public:
	union {
	IScriptable m_value;
	};
};

class SInventoryItem {
public:
	union {
		MAKE_PADDED_VAR(int32_t*, m_craftedAbilities[2], m_craftedAbilities, 24);
		MAKE_PADDED_VAR(SInventoryItemUIData, m_uiData, m_uiData, 72);
		MAKE_PADDED_VAR(uint32_t, m_itemQuantity, m_itemQuantity, 84);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(SItemUniqueId, m_uniqueId, m_uniqueId, 96);
		MAKE_PADDED_VAR(uint16_t, m_staticRandomSeed, m_staticRandomSeed, 104);
		MAKE_PADDED_VAR(uint64_t, m_flags, m_flags, 112);
		MAKE_PADDED_VAR(int32_t, m_enchantmentName, m_enchantmentName, 124);
		MAKE_PADDED_VAR(int32_t, m_enchantmentStats, m_enchantmentStats, 128);
		MAKE_PADDED_VAR(int32_t, m_dyePreviewColorName, m_dyePreviewColorName, 132);
		MAKE_PADDED_VAR(int32_t, m_dyeColorName, m_dyeColorName, 136);
		MAKE_PADDED_VAR(int32_t, m_dyeColorAbilityName, m_dyeColorAbilityName, 140);
	};
};

class SLensFlareGroupsParameters {
public:
	union {
	SLensFlareParameters m_default;
		MAKE_PADDED_VAR(SLensFlareParameters, m_sun, m_sun, 28);
		MAKE_PADDED_VAR(SLensFlareParameters, m_moon, m_moon, 56);
		MAKE_PADDED_VAR(SLensFlareParameters, m_custom0, m_custom0, 84);
		MAKE_PADDED_VAR(SLensFlareParameters, m_custom1, m_custom1, 112);
		MAKE_PADDED_VAR(SLensFlareParameters, m_custom2, m_custom2, 140);
		MAKE_PADDED_VAR(SLensFlareParameters, m_custom3, m_custom3, 168);
		MAKE_PADDED_VAR(SLensFlareParameters, m_custom4, m_custom4, 196);
		MAKE_PADDED_VAR(SLensFlareParameters, m_custom5, m_custom5, 224);
	};
};

class SMapPathInstance {
public:
	union {
	int32_t m_id;
		MAKE_PADDED_VAR(Vector, m_position, m_position, 16);
		MAKE_PADDED_VAR(Vector*, m_splinePoints[2], m_splinePoints, 32);
		MAKE_PADDED_VAR(int32_t, m_color, m_color, 44);
		MAKE_PADDED_VAR(float, m_lineWidth, m_lineWidth, 48);
		MAKE_PADDED_VAR(bool, m_isAddedToMinimap, m_isAddedToMinimap, 52);
	};
};

class SPartyWaypointData {
public:
	union {
	Vector3 m_position;
		MAKE_PADDED_VAR(float, m_rotation, m_rotation, 12);
		MAKE_PADDED_VAR(int32_t, m_memberName, m_memberName, 16);
	};
};

class Sphere {
public:
	union {
	Vector m_CenterRadius2;
	};
};

class SR4PlayerTargetingPrecalcs {
public:
	union {
	Vector m_playerPosition;
		MAKE_PADDED_VAR(float, m_playerHeading, m_playerHeading, 16);
		MAKE_PADDED_VAR(Vector, m_playerHeadingVector, m_playerHeadingVector, 32);
		MAKE_PADDED_VAR(float, m_playerRadius, m_playerRadius, 48);
		MAKE_PADDED_VAR(Vector, m_cameraPosition, m_cameraPosition, 64);
		MAKE_PADDED_VAR(Vector, m_cameraDirection, m_cameraDirection, 80);
		MAKE_PADDED_VAR(float, m_cameraHeading, m_cameraHeading, 96);
		MAKE_PADDED_VAR(Vector, m_cameraHeadingVector, m_cameraHeadingVector, 112);
	};
};

class SSimpleCurvePoint {
public:
	union {
	Vector m_value;
		MAKE_PADDED_VAR(float, m_time, m_time, 16);
	};
};

class SSlotInfo {
public:
	union {
	int32_t m_slotName;
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 4);
		MAKE_PADDED_VAR(int32_t, m_parentSlotIndex, m_parentSlotIndex, 8);
		MAKE_PADDED_VAR(Vector, m_relativePosition, m_relativePosition, 16);
		MAKE_PADDED_VAR(EulerAngles, m_relativeRotation, m_relativeRotation, 32);
	};
};

class SSpawnStrategyRange {
public:
	union {
		MAKE_PADDED_VAR(float, m_spawnRange, m_spawnRange, 8);
		MAKE_PADDED_VAR(float, m_poolRange, m_poolRange, 12);
		MAKE_PADDED_VAR(Vector2, m_offset, m_offset, 16);
	};
};

class SStripeControlPoint {
public:
	union {
	Vector m_position;
		MAKE_PADDED_VAR(Color, m_color, m_color, 16);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 20);
		MAKE_PADDED_VAR(EulerAngles, m_rotation, m_rotation, 24);
		MAKE_PADDED_VAR(float, m_blendOffset, m_blendOffset, 36);
	};
};

class STargetSelectionData {
public:
	union {
	Vector m_sourcePosition;
		MAKE_PADDED_VAR(Vector, m_headingVector, m_headingVector, 16);
		MAKE_PADDED_VAR(float, m_closeDistance, m_closeDistance, 32);
		MAKE_PADDED_VAR(float, m_softLockDistance, m_softLockDistance, 36);
	};
};

class STerrainTextureParameters {
public:
	union {
	Vector m_val;
		MAKE_PADDED_VAR(Vector, m_val2, m_val2, 16);
	};
};

class STwoBonesIKSolverData {
public:
	union {
	STwoBonesIKSolverBoneData m_upperBone;
		MAKE_PADDED_VAR(STwoBonesIKSolverBoneData, m_jointBone, m_jointBone, 4);
		MAKE_PADDED_VAR(STwoBonesIKSolverBoneData, m_subLowerBone, m_subLowerBone, 8);
		MAKE_PADDED_VAR(STwoBonesIKSolverBoneData, m_lowerBone, m_lowerBone, 12);
		MAKE_PADDED_VAR(STwoBonesIKSolverBoneData, m_ikBone, m_ikBone, 16);
		MAKE_PADDED_VAR(Vector, m_Joint_to_next_dir_in_upper_s_BS, m_Joint_to_next_dir_in_upper_s_BS, 32);
		MAKE_PADDED_VAR(Vector, m_Joint_to_next_dir_in_joint_s_BS, m_Joint_to_next_dir_in_joint_s_BS, 48);
		MAKE_PADDED_VAR(Vector, m_Joint_to_next_dir_in_lower_s_BS, m_Joint_to_next_dir_in_lower_s_BS, 64);
		MAKE_PADDED_VAR(Vector, m_Joint_side_dir_in_upper_s_BS, m_Joint_side_dir_in_upper_s_BS, 80);
		MAKE_PADDED_VAR(Vector, m_Joint_side_dir_in_joint_s_BS, m_Joint_side_dir_in_joint_s_BS, 96);
		MAKE_PADDED_VAR(Vector, m_Joint_side_dir_in_lower_s_BS, m_Joint_side_dir_in_lower_s_BS, 112);
		MAKE_PADDED_VAR(Vector, m_Joint_bend_dir_in_upper_s_BS, m_Joint_bend_dir_in_upper_s_BS, 128);
		MAKE_PADDED_VAR(Vector, m_Joint_bend_dir_in_joint_s_BS, m_Joint_bend_dir_in_joint_s_BS, 144);
		MAKE_PADDED_VAR(Vector, m_Joint_bend_dir_in_lower_s_BS, m_Joint_bend_dir_in_lower_s_BS, 160);
		MAKE_PADDED_VAR(float, m_jointSideWeightUpper, m_jointSideWeightUpper, 176);
		MAKE_PADDED_VAR(float, m_jointSideWeightJoint, m_jointSideWeightJoint, 180);
		MAKE_PADDED_VAR(float, m_jointSideWeightLower, m_jointSideWeightLower, 184);
		MAKE_PADDED_VAR(bool, m_reverseBend, m_reverseBend, 188);
		MAKE_PADDED_VAR(bool, m_autoSetupDirs, m_autoSetupDirs, 189);
		MAKE_PADDED_VAR(bool, m_allowToLock, m_allowToLock, 190);
		MAKE_PADDED_VAR(float, m_limitToLengthPercentage, m_limitToLengthPercentage, 192);
	};
};

class SVirtualControllerParams {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(int32_t, m_boneName, m_boneName, 4);
		MAKE_PADDED_VAR(Vector, m_localOffset, m_localOffset, 16);
		MAKE_PADDED_VAR(float, m_height, m_height, 32);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 36);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 40);
		MAKE_PADDED_VAR(bool, m_targetable, m_targetable, 41);
		MAKE_PADDED_VAR(bool, m_collisions, m_collisions, 42);
		MAKE_PADDED_VAR(bool, m_collisionResponse, m_collisionResponse, 43);
		MAKE_PADDED_VAR(bool, m_localOffsetInModelSpace, m_localOffsetInModelSpace, 44);
		MAKE_PADDED_VAR(bool, m_collisionGrabber, m_collisionGrabber, 45);
		MAKE_PADDED_VAR(int32_t*, m_collisionGrabberGroupNames[2], m_collisionGrabberGroupNames, 48);
		MAKE_PADDED_VAR(int32_t, m_onCollisionEventName, m_onCollisionEventName, 60);
		MAKE_PADDED_VAR(Vector, m_additionalRaycastCheck, m_additionalRaycastCheck, 64);
		MAKE_PADDED_VAR(int32_t, m_additionalRaycastCheckEventName, m_additionalRaycastCheckEventName, 80);
	};
};

class Tetrahedron {
public:
	union {
	Vector m_point1;
		MAKE_PADDED_VAR(Vector, m_point2, m_point2, 16);
		MAKE_PADDED_VAR(Vector, m_point3, m_point3, 32);
		MAKE_PADDED_VAR(Vector, m_point4, m_point4, 48);
	};
};

class CActionPointSelector {
public:
	union {
	IScriptable iscriptable;
	};
};

class CAIStorageAnimalData {
public:
	union {
	IScriptable iscriptable;
	};
};

class CAIStorageHorseData {
public:
	union {
	IScriptable iscriptable;
	};
};

class CAnimationBufferMultipart {
public:
	union {
	IAnimationBuffer ianimationbuffer;
		MAKE_PADDED_VAR(uint32_t, m_numFrames, m_numFrames, 16);
		MAKE_PADDED_VAR(uint32_t, m_numBones, m_numBones, 20);
		MAKE_PADDED_VAR(uint32_t, m_numTracks, m_numTracks, 24);
		MAKE_PADDED_VAR(uint32_t*, m_firstFrames[2], m_firstFrames, 28);
		MAKE_PADDED_VAR(intptr_t*, m_parts[2], m_parts, 40);
	};
};

class CAnimationBufferUncompressed {
public:
	union {
	IAnimationBuffer ianimationbuffer;
		MAKE_PADDED_VAR(uint32_t, m_numFrames, m_numFrames, 16);
		MAKE_PADDED_VAR(uint32_t, m_numBones, m_numBones, 20);
		MAKE_PADDED_VAR(uint32_t, m_numTracks, m_numTracks, 24);
		MAKE_PADDED_VAR(uint32_t, m_numDynamicTracks, m_numDynamicTracks, 28);
		MAKE_PADDED_VAR(bool, m_hasRefIKBones, m_hasRefIKBones, 80);
	};
};

class CCommunityActionPointSelector {
public:
	union {
	CActionPointSelector cactionpointselector;
	};
};

class CCreateEntityHelper {
public:
	union {
	IScriptable iscriptable;
	};
};

class CDaytimeCondition {
public:
	union {
	ISpawnCondition ispawncondition;
		MAKE_PADDED_VAR(GameTime, m_begin, m_begin, 48);
		MAKE_PADDED_VAR(GameTime, m_end, m_end, 52);
	};
};

class CEASEnumEvent {
public:
	union {
	CExtAnimScriptDurationEvent cextanimscriptdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(SEnumVariant, m_enumVariant, m_enumVariant, 40);
	};
};

class CEASMultiValueEvent {
public:
	union {
	CExtAnimScriptDurationEvent cextanimscriptdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_callback, m_callback, 40);
		MAKE_PADDED_VAR(SMultiValue, m_properties, m_properties, 44);
	};
};

class CEASSlideToTargetEvent {
public:
	union {
	CExtAnimScriptDurationEvent cextanimscriptdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(SSlideToTargetEventProps, m_properties, m_properties, 40);
	};
};

class CExpSlideEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(bool, m_translation, m_translation, 40);
		MAKE_PADDED_VAR(bool, m_rotation, m_rotation, 41);
		MAKE_PADDED_VAR(bool, m_toCollision, m_toCollision, 42);
	};
};

class CExtAnimComboEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
	};
};

class CExtAnimCutsceneActorEffect {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 40);
	};
};

class CExtAnimCutsceneDurationEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
	};
};

class CExtAnimCutsceneHideTerrainEvent {
public:
	union {
	CExtAnimCutsceneDurationEvent cextanimcutscenedurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
	};
};

class CExtAnimDialogKeyPoseDuration {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(bool, m_transition, m_transition, 40);
		MAKE_PADDED_VAR(bool, m_keyPose, m_keyPose, 41);
	};
};

class CExtAnimDisableDialogLookatEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 40);
	};
};

class CHavokMotionExtraction {
public:
	union {
	IMotionExtraction imotionextraction;
		MAKE_PADDED_VAR(Vector*, m_keys[2], m_keys, 16);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 28);
	};
};

class CInGameConfigWrapper {
public:
	union {
	IScriptable iscriptable;
	};
};

class CLineMotionExtraction {
public:
	union {
	IMotionExtraction imotionextraction;
		MAKE_PADDED_VAR(Vector*, m_frames[2], m_frames, 16);
		MAKE_PADDED_VAR(float*, m_times[2], m_times, 28);
	};
};

class CLineMotionExtraction2 {
public:
	union {
	IMotionExtraction imotionextraction;
		MAKE_PADDED_VAR(float, m_duration, m_duration, 16);
		MAKE_PADDED_VAR(float*, m_frames[2], m_frames, 20);
		MAKE_PADDED_VAR(char*, m_deltaTimes[2], m_deltaTimes, 32);
		MAKE_PADDED_VAR(char, m_flags, m_flags, 44);
	};
};

class CNavigationReachabilityQueryInterface {
public:
	union {
	IScriptable iscriptable;
	};
};

class CObject {
public:
	union {
	IScriptable iscriptable;
	};
};

class CPartySpawnOrganizer {
public:
	union {
	IScriptable iscriptable;
	};
};

class CPartySpawnpointOrganizer {
public:
	union {
	CPartySpawnOrganizer cpartyspawnorganizer;
	};
};

class CPartySpreadOrganizer {
public:
	union {
	CPartySpawnOrganizer cpartyspawnorganizer;
		MAKE_PADDED_VAR(float, m_spreadRadiusMin, m_spreadRadiusMin, 48);
		MAKE_PADDED_VAR(float, m_spreadRadiusMax, m_spreadRadiusMax, 52);
	};
};

class CPathLibWorld {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CPathLibSettings, m_globalSettings, m_globalSettings, 116);
	};
};

class CPlayerLevelCondition {
public:
	union {
	ISpawnCondition ispawncondition;
		MAKE_PADDED_VAR(int32_t, m_minLevel, m_minLevel, 48);
		MAKE_PADDED_VAR(int32_t, m_maxLevel, m_maxLevel, 52);
	};
};

class CPoseBBoxGenerator {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(char**, m_boneNames[2], m_boneNames, 88);
		MAKE_PADDED_VAR(int32_t*, m_boneIndex[2], m_boneIndex, 100);
	};
};

class CPropertyAnimationSet {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_animations[2], m_animations, 96);
	};
};

class CQuestGraph {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_graphBlocks[2], m_graphBlocks, 96);
		MAKE_PADDED_VAR(bool, m_sourceDataRemoved, m_sourceDataRemoved, 156);
		MAKE_PADDED_VAR(bool, m_isTest, m_isTest, 157);
	};
};

class CQuestGraphInstance {
public:
	union {
	CObject cobject;
	};
};

class CQuestThread {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_suspendedScopesData[2], m_suspendedScopesData, 196);
	};
};

class CR4CreateEntityHelper {
public:
	union {
	CCreateEntityHelper ccreateentityhelper;
	};
};

class CR4GlobalEventsScriptsDispatcher {
public:
	union {
	CObject cobject;
	};
};

class CR4KinectSpeechRecognizerListenerScriptProxy {
public:
	union {
	CObject cobject;
	};
};

class CR4PlayerTargeting {
public:
	union {
	IScriptable iscriptable;
	};
};

class CR4SecondScreenManagerScriptProxy {
public:
	union {
	CObject cobject;
	};
};

class CR4TelemetryScriptProxy {
public:
	union {
	CObject cobject;
	};
};

class CR4WorldDescriptionDLC {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_worldEnumAreaName, m_worldEnumAreaName, 88);
		MAKE_PADDED_VAR(char*, m_worldName, m_worldName, 92);
		MAKE_PADDED_VAR(char*, m_worldMapPath, m_worldMapPath, 104);
		MAKE_PADDED_VAR(int32_t, m_worldMapPinX, m_worldMapPinX, 116);
		MAKE_PADDED_VAR(int32_t, m_worldMapPinY, m_worldMapPinY, 120);
		MAKE_PADDED_VAR(int32_t, m_worldMapLoactionNameStringKey, m_worldMapLoactionNameStringKey, 124);
		MAKE_PADDED_VAR(int32_t, m_worldMapLoactionDescriptionStringKey, m_worldMapLoactionDescriptionStringKey, 128);
		MAKE_PADDED_VAR(float, m_worldMiniMapSize, m_worldMiniMapSize, 132);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapTileCount, m_worldMiniMapTileCount, 136);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapExteriorTextureSize, m_worldMiniMapExteriorTextureSize, 140);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapInteriorTextureSize, m_worldMiniMapInteriorTextureSize, 144);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapTextureSize, m_worldMiniMapTextureSize, 148);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapMinLod, m_worldMiniMapMinLod, 152);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapMaxLod, m_worldMiniMapMaxLod, 156);
		MAKE_PADDED_VAR(char*, m_worldMiniMapExteriorTextureExtension, m_worldMiniMapExteriorTextureExtension, 160);
		MAKE_PADDED_VAR(char*, m_worldMiniMapInteriorTextureExtension, m_worldMiniMapInteriorTextureExtension, 172);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapVminX, m_worldMiniMapVminX, 184);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapVmaxX, m_worldMiniMapVmaxX, 188);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapVminY, m_worldMiniMapVminY, 192);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapVmaxY, m_worldMiniMapVmaxY, 196);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapSminX, m_worldMiniMapSminX, 200);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapSmaxX, m_worldMiniMapSmaxX, 204);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapSminY, m_worldMiniMapSminY, 208);
		MAKE_PADDED_VAR(int32_t, m_worldMiniMapSmaxY, m_worldMiniMapSmaxY, 212);
		MAKE_PADDED_VAR(float, m_worldMiniMapMinZoom, m_worldMiniMapMinZoom, 216);
		MAKE_PADDED_VAR(float, m_worldMiniMapMaxZoom, m_worldMiniMapMaxZoom, 220);
		MAKE_PADDED_VAR(float, m_worldMiniMapZoom12, m_worldMiniMapZoom12, 224);
		MAKE_PADDED_VAR(float, m_worldMiniMapZoom23, m_worldMiniMapZoom23, 228);
		MAKE_PADDED_VAR(float, m_worldMiniMapZoom34, m_worldMiniMapZoom34, 232);
		MAKE_PADDED_VAR(float, m_worldGradientScale, m_worldGradientScale, 236);
		MAKE_PADDED_VAR(float, m_worldPreviewHeight, m_worldPreviewHeight, 240);
	};
};

class CR4WorldDLCExtender {
public:
	union {
	CObject cobject;
	};
};

class CReactionScene {
public:
	union {
	CObject cobject;
	};
};

class CReactionsManager {
public:
	union {
	CObject cobject;
	};
};

class CResource {
public:
	union {
	CObject cobject;
	};
};

class CResourceSimplexTree {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(SSimplexTreeStruct*, m_nodes[2], m_nodes, 104);
	};
};

class CRewardGroup {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(SReward*, m_rewards[2], m_rewards, 104);
		MAKE_PADDED_VAR(intptr_t*, m_subGroups[2], m_subGroups, 116);
		MAKE_PADDED_VAR(bool, m_isSubGroup, m_isSubGroup, 128);
	};
};

class CScriptableState {
public:
	union {
	IScriptable iscriptable;
	};
};

class CScriptBatchQueryAccessor {
public:
	union {
	IScriptable iscriptable;
	};
};

class CScriptedExplorationTraverser {
public:
	union {
	IScriptable iscriptable;
	};
};

class CScriptedFlashArray {
public:
	union {
	IScriptedFlash iscriptedflash;
	};
};

class CScriptedFlashFunction {
public:
	union {
	IScriptedFlash iscriptedflash;
	};
};

class CScriptedFlashObject {
public:
	union {
	IScriptedFlash iscriptedflash;
	};
};

class CScriptedFlashSprite {
public:
	union {
	CScriptedFlashObject cscriptedflashobject;
	};
};

class CScriptedFlashTextField {
public:
	union {
	IScriptedFlash iscriptedflash;
	};
};

class CScriptedFlashValueStorage {
public:
	union {
	IScriptedFlash iscriptedflash;
	};
};

class CScriptedRenderFrame {
public:
	union {
	CObject cobject;
	};
};

class CScriptSoundSystem {
public:
	union {
	CObject cobject;
	};
};

class CSkeletalAnimationContainer {
public:
	union {
	CObject cobject;
	};
};

class CSpawnTreeEntrySubDefinition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_creatureDefinition, m_creatureDefinition, 104);
		MAKE_PADDED_VAR(int32_t, m_partyMemberId, m_partyMemberId, 108);
		MAKE_PADDED_VAR(uint32_t, m_creatureCount, m_creatureCount, 112);
		MAKE_PADDED_VAR(intptr_t*, m_initializers[2], m_initializers, 116);
	};
};

class CSRTBaseTree {
public:
	union {
	CResource cresource;
	};
};

class CStoryScene {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_sections[2], m_sections, 112);
		MAKE_PADDED_VAR(intptr_t*, m_controlParts[2], m_controlParts, 124);
		MAKE_PADDED_VAR(uint32_t, m_elementIDCounter, m_elementIDCounter, 136);
		MAKE_PADDED_VAR(uint32_t, m_sceneId, m_sceneId, 140);
		MAKE_PADDED_VAR(uint32_t, m_sectionIDCounter, m_sectionIDCounter, 144);
		MAKE_PADDED_VAR(bool, m_mayActorsStartWorking, m_mayActorsStartWorking, 148);
		MAKE_PADDED_VAR(bool, m_surpassWaterRendering, m_surpassWaterRendering, 149);
		MAKE_PADDED_VAR(intptr_t*, m_sceneTemplates[2], m_sceneTemplates, 152);
		MAKE_PADDED_VAR(intptr_t*, m_sceneProps[2], m_sceneProps, 164);
		MAKE_PADDED_VAR(intptr_t*, m_sceneEffects[2], m_sceneEffects, 176);
		MAKE_PADDED_VAR(intptr_t*, m_sceneLights[2], m_sceneLights, 188);
		MAKE_PADDED_VAR(intptr_t*, m_dialogsetInstances[2], m_dialogsetInstances, 200);
		MAKE_PADDED_VAR(intptr_t*, m_cameraDefinitions[2], m_cameraDefinitions, 212);
		MAKE_PADDED_VAR(int32_t*, m_banksDependency[2], m_banksDependency, 224);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnEnd[2], m_soundEventsOnEnd, 236);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnSkip[2], m_soundEventsOnSkip, 248);
		MAKE_PADDED_VAR(bool, m_blockMusicTriggers, m_blockMusicTriggers, 260);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 264);
		MAKE_PADDED_VAR(bool, m_muteSpeechUnderWater, m_muteSpeechUnderWater, 276);
	};
};

class CStorySceneAction {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
	};
};

class CStorySceneActionEquipItem {
public:
	union {
	CStorySceneAction cstorysceneaction;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
		MAKE_PADDED_VAR(int32_t, m_leftHandItem, m_leftHandItem, 112);
		MAKE_PADDED_VAR(int32_t, m_rightHandItem, m_rightHandItem, 116);
	};
};

class CStorySceneActionRotateToPlayer {
public:
	union {
	CStorySceneAction cstorysceneaction;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
		MAKE_PADDED_VAR(float, m_acceptableAngleDif, m_acceptableAngleDif, 112);
	};
};

class CStorySceneActionStopWork {
public:
	union {
	CStorySceneAction cstorysceneaction;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
	};
};

class CStorySceneActionTeleport {
public:
	union {
	CStorySceneAction cstorysceneaction;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
		MAKE_PADDED_VAR(float, m_allowedDistance, m_allowedDistance, 120);
	};
};

class CStorySceneActorMap {
public:
	union {
	CObject cobject;
	};
};

class CStorySceneElement {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
	};
};

class CStorySceneGraph {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_graphBlocks[2], m_graphBlocks, 96);
	};
};

class CStoryScenePauseElement {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 136);
	};
};

class CStorySceneVideoElement {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(char*, m_description, m_description, 136);
	};
};

class CSwarmCellMap {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(float, m_cellSize, m_cellSize, 104);
	};
};

class CSwfResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(char*, m_linkageName, m_linkageName, 104);
		MAKE_PADDED_VAR(SSwfFontDesc*, m_fonts[2], m_fonts, 116);
		MAKE_PADDED_VAR(intptr_t*, m_textures[2], m_textures, 128);
		MAKE_PADDED_VAR(SSwfHeaderInfo, m_header, m_header, 168);
		MAKE_PADDED_VAR(char*, m_imageImportOptions, m_imageImportOptions, 200);
	};
};

class CSwitchableFoliageResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 104);
	};
};

class CTextureArray {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_bitmaps[2], m_bitmaps, 112);
		MAKE_PADDED_VAR(int32_t, m_textureGroup, m_textureGroup, 124);
	};
};

class CTicketsDefaultConfiguration {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CTicketSourceConfiguration*, m_tickets[2], m_tickets, 88);
	};
};

class CTimerScriptKeyword {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(float, m_timeDelta, m_timeDelta, 88);
		MAKE_PADDED_VAR(float, m_timeDeltaUnscaled, m_timeDeltaUnscaled, 92);
	};
};

class CTimetableActionPointSelector {
public:
	union {
	CActionPointSelector cactionpointselector;
		MAKE_PADDED_VAR(CSStoryPhaseTimetableACategoriesTimetableEntry*, m_timetable[2], m_timetable, 48);
	};
};

class CUmbraScene {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(float, m_distanceMultiplier, m_distanceMultiplier, 240);
		MAKE_PADDED_VAR(CResourceSimplexTree, m_localUmbraOccThresholdMul, m_localUmbraOccThresholdMul, 248);
	};
};

class CUncompressedMotionExtraction {
public:
	union {
	IMotionExtraction imotionextraction;
		MAKE_PADDED_VAR(float, m_duration, m_duration, 16);
		MAKE_PADDED_VAR(Vector*, m_frames[2], m_frames, 20);
	};
};

class CUnknownResource {
public:
	union {
	CResource cresource;
	};
};

class CVegetationBrush {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 104);
	};
};

class CVegetationBrushEntry {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CSRTBaseTree, m_resource, m_resource, 88);
		MAKE_PADDED_VAR(float, m_density, m_density, 96);
		MAKE_PADDED_VAR(float, m_size, m_size, 100);
		MAKE_PADDED_VAR(float, m_sizeVar, m_sizeVar, 104);
		MAKE_PADDED_VAR(float, m_radiusScale, m_radiusScale, 108);
	};
};

class CVisualDebug {
public:
	union {
	CObject cobject;
	};
};

class CVisualDebug_MovementTrajectory {
public:
	union {
	CObject cobject;
	};
};

class CWaterDebug {
public:
	union {
	CObject cobject;
	};
};

class CWayPointsCollection {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(uint16_t, m_version, m_version, 128);
		MAKE_PADDED_VAR(uint16_t, m_waypointsCount, m_waypointsCount, 130);
		MAKE_PADDED_VAR(uint16_t, m_componentsMappingsCount, m_componentsMappingsCount, 132);
		MAKE_PADDED_VAR(uint16_t, m_waypointsGroupsCount, m_waypointsGroupsCount, 134);
		MAKE_PADDED_VAR(uint32_t, m_indexesCount, m_indexesCount, 136);
		MAKE_PADDED_VAR(SPartySpawner*, m_parties[2], m_parties, 176);
		MAKE_PADDED_VAR(SPartyWaypointData*, m_partyWaypoints[2], m_partyWaypoints, 188);
	};
};

class CWayPointsCollectionsSet {
public:
	union {
	CResource cresource;
	};
};

class CWizardBaseNode {
public:
	union {
	CObject cobject;
	};
};

class CWizardDefinition {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_nodes[2], m_nodes, 104);
	};
};

class CWizardQuestionNode {
public:
	union {
	CWizardBaseNode cwizardbasenode;
		MAKE_PADDED_VAR(int32_t, m_uniqueName, m_uniqueName, 88);
		MAKE_PADDED_VAR(char*, m_layoutTemplate, m_layoutTemplate, 92);
		MAKE_PADDED_VAR(char*, m_text, m_text, 104);
		MAKE_PADDED_VAR(bool, m_optional, m_optional, 116);
		MAKE_PADDED_VAR(bool, m_endNode, m_endNode, 117);
	};
};

class IActorConditionType {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
	};
};

class IAIParameters {
public:
	union {
	IScriptable iscriptable;
	};
};

class IAISpawnTreeParameters {
public:
	union {
	IAIParameters iaiparameters;
	};
};

class IAISpawnTreeSubParameters {
public:
	union {
	IAISpawnTreeParameters iaispawntreeparameters;
	};
};

class IAnimationCompression {
public:
	union {
	CObject cobject;
	};
};

class IAnimationController {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_collectEvents, m_collectEvents, 88);
	};
};

class IAnimDangleConstraint {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorConstraintObject {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(Vector, m_localPositionOffset, m_localPositionOffset, 96);
		MAKE_PADDED_VAR(EulerAngles, m_localRotationOffset, m_localRotationOffset, 112);
	};
};

class IBehaviorGraphBlendMultipleCondNode_Condition {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorGraphBlendMultipleCondNode_DampMethod {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorGraphComboModifier {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorGraphNotifier {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorGraphPointCloudLookAtTransition {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorGraphPointCloudLookAtTransition_Vector {
public:
	union {
	IBehaviorGraphPointCloudLookAtTransition ibehaviorgraphpointcloudlookattransition;
	};
};

class IBehaviorGraphRetargetCharacterNodeMethod {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorGraphStaticCondition {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorMimicConstraint {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorPoseConstraintPoseLookAtModifier {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
	};
};

class IBehaviorScript {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(uint32_t, m_inputFloatNum, m_inputFloatNum, 88);
		MAKE_PADDED_VAR(uint32_t, m_inputVectorNum, m_inputVectorNum, 92);
	};
};

class IBehaviorStateTransitionCondition {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorSyncMethod {
public:
	union {
	CObject cobject;
	};
};

class IBehaviorSyncMethodEvent {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 88);
	};
};

class IBehTreeAtomicCondition {
public:
	union {
	CObject cobject;
	};
};

class IBehTreeNodeDefinition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class IBehTreeNodeSpecialDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class IBehTreeObjectDefinition {
public:
	union {
	IScriptable iscriptable;
		MAKE_PADDED_VAR(int32_t, m_instanceClass, m_instanceClass, 56);
	};
};

class IBehTreeOnSpawnEffector {
public:
	union {
	IBehTreeObjectDefinition ibehtreeobjectdefinition;
		MAKE_PADDED_VAR(int32_t, m_instanceClass, m_instanceClass, 56);
	};
};

class IBehTreeTask {
public:
	union {
	IScriptable iscriptable;
		MAKE_PADDED_VAR(bool, m_isActive, m_isActive, 76);
	};
};

class IBehTreeTaskDefinition {
public:
	union {
	IBehTreeObjectDefinition ibehtreeobjectdefinition;
		MAKE_PADDED_VAR(int32_t, m_instanceClass, m_instanceClass, 56);
		MAKE_PADDED_VAR(int32_t*, m_listenToGameplayEvents[2], m_listenToGameplayEvents, 80);
		MAKE_PADDED_VAR(int32_t*, m_listenToAnimEvents[2], m_listenToAnimEvents, 92);
	};
};

class IBehTreeTicketAlgorithmDefinition {
public:
	union {
	CObject cobject;
	};
};

class IBehTreeTicketAlgorithmListDefinition {
public:
	union {
	IBehTreeTicketAlgorithmDefinition ibehtreeticketalgorithmdefinition;
		MAKE_PADDED_VAR(intptr_t*, m_list[2], m_list, 88);
	};
};

class IBehTreeValueEnum {
public:
	union {
	IScriptable iscriptable;
		MAKE_PADDED_VAR(int32_t, m_varName, m_varName, 48);
	};
};

class IBgNpcTriggerAction {
public:
	union {
	CObject cobject;
	};
};

class ICharacterCustomizationOperation {
public:
	union {
	CObject cobject;
	};
};

class ICollisionShape {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(Matrix, m_pose, m_pose, 96);
		MAKE_PADDED_VAR(float, m_densityScaler, m_densityScaler, 160);
	};
};

class ICommandlet {
public:
	union {
	CObject cobject;
	};
};

class ICompressedPose {
public:
	union {
	CObject cobject;
	};
};

class ICustomCameraBaseController {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
	};
};

class ICustomCameraCollisionController {
public:
	union {
	ICustomCameraBaseController icustomcamerabasecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
	};
};

class ICustomCameraPivotDistanceController {
public:
	union {
	ICustomCameraBaseController icustomcamerabasecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minDist, m_minDist, 96);
		MAKE_PADDED_VAR(float, m_maxDist, m_maxDist, 100);
	};
};

class ICustomCameraPivotPositionController {
public:
	union {
	ICustomCameraBaseController icustomcamerabasecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_offsetZ, m_offsetZ, 96);
		MAKE_PADDED_VAR(float, m_pivotZSmoothTime, m_pivotZSmoothTime, 100);
	};
};

class ICustomCameraPositionController {
public:
	union {
	ICustomCameraBaseController icustomcamerabasecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(bool, m_enableAutoCollisionAvoidance, m_enableAutoCollisionAvoidance, 96);
		MAKE_PADDED_VAR(bool, m_enableScreenSpaceCorrections, m_enableScreenSpaceCorrections, 97);
	};
};

class ICustomCameraScriptedPivotDistanceController {
public:
	union {
	ICustomCameraPivotDistanceController icustomcamerapivotdistancecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minDist, m_minDist, 96);
		MAKE_PADDED_VAR(float, m_maxDist, m_maxDist, 100);
	};
};

class ICustomCameraScriptedPivotPositionController {
public:
	union {
	ICustomCameraPivotPositionController icustomcamerapivotpositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_offsetZ, m_offsetZ, 96);
		MAKE_PADDED_VAR(float, m_pivotZSmoothTime, m_pivotZSmoothTime, 100);
	};
};

class ICustomCameraScriptedPositionController {
public:
	union {
	ICustomCameraPositionController icustomcamerapositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(bool, m_enableAutoCollisionAvoidance, m_enableAutoCollisionAvoidance, 96);
		MAKE_PADDED_VAR(bool, m_enableScreenSpaceCorrections, m_enableScreenSpaceCorrections, 97);
	};
};

class ICutsceneModifier {
public:
	union {
	CObject cobject;
	};
};

class IEdEntitySetupEffector {
public:
	union {
	IScriptable iscriptable;
	};
};

class IEngineSpawnStrategy {
public:
	union {
	CObject cobject;
	};
};

class IEntityStateChangeRequest {
public:
	union {
	CObject cobject;
	};
};

class IEquipmentInitializer {
public:
	union {
	CObject cobject;
	};
};

class IEvaluator {
public:
	union {
	CObject cobject;
	};
};

class IEvaluatorColor {
public:
	union {
	IEvaluator ievaluator;
	};
};

class IEvaluatorFloat {
public:
	union {
	IEvaluator ievaluator;
	};
};

class IExporter {
public:
	union {
	CObject cobject;
	};
};

class IFactory {
public:
	union {
	CObject cobject;
	};
};

class IFormationLogic {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(float, m_recomputionDelay, m_recomputionDelay, 88);
		MAKE_PADDED_VAR(float, m_minCatchupDistance, m_minCatchupDistance, 92);
	};
};

class IFormationPatternNode {
public:
	union {
	CObject cobject;
	};
};

class IFXSpawner {
public:
	union {
	CObject cobject;
	};
};

class IGameplayDLCMounter {
public:
	union {
	CObject cobject;
	};
};

class IGameplayEffectExecutor {
public:
	union {
	CObject cobject;
	};
};

class IGameplayEntConditionType {
public:
	union {
	CObject cobject;
	};
};

class IGameSystem {
public:
	union {
	CObject cobject;
	};
};

class IGuiResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_resourceBlocks[2], m_resourceBlocks, 112);
	};
};

class IImporter {
public:
	union {
	CObject cobject;
	};
};

class IInventoryInitializer {
public:
	union {
	CObject cobject;
	};
};

class IMaterial {
public:
	union {
	CResource cresource;
	};
};

class IMaterialDefinition {
public:
	union {
	IMaterial imaterial;
		MAKE_PADDED_VAR(uint32_t, m_pixelParamBlockSize, m_pixelParamBlockSize, 152);
		MAKE_PADDED_VAR(uint32_t, m_vertexParamBlockSize, m_vertexParamBlockSize, 156);
		MAKE_PADDED_VAR(bool, m_compileAllTechniques, m_compileAllTechniques, 176);
		MAKE_PADDED_VAR(bool, m_canUseOnMeshes, m_canUseOnMeshes, 177);
		MAKE_PADDED_VAR(bool, m_canUseOnDestructionMeshes, m_canUseOnDestructionMeshes, 178);
		MAKE_PADDED_VAR(bool, m_canUseOnApexMeshes, m_canUseOnApexMeshes, 179);
		MAKE_PADDED_VAR(bool, m_canUseOnParticles, m_canUseOnParticles, 180);
		MAKE_PADDED_VAR(bool, m_canUseOnCollapsableObjects, m_canUseOnCollapsableObjects, 181);
		MAKE_PADDED_VAR(bool, m_canUseSkinning, m_canUseSkinning, 182);
		MAKE_PADDED_VAR(bool, m_canUseSkinnedInstancing, m_canUseSkinnedInstancing, 183);
		MAKE_PADDED_VAR(bool, m_canUseOnMorphMeshes, m_canUseOnMorphMeshes, 184);
	};
};

class IMenuBackgroundVideoParam {
public:
	union {
	CObject cobject;
	};
};

class IMenuDisplayParam {
public:
	union {
	CObject cobject;
	};
};

class IMenuFlashParam {
public:
	union {
	CObject cobject;
	};
};

class IMenuTimeParam {
public:
	union {
	CObject cobject;
	};
};

class IMergedWorldGeometryData {
public:
	union {
	CObject cobject;
	};
};

class IMotionExtractionCompression {
public:
	union {
	CObject cobject;
	};
};

class IMoveSteeringCondition {
public:
	union {
	CObject cobject;
	};
};

class IMoveSteeringNode {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
	};
};

class IMoveSteeringTask {
public:
	union {
	CObject cobject;
	};
};

class IMoveTargetSteeringTask {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
	};
};

class INormalBlendDataSource {
public:
	union {
	CObject cobject;
	};
};

class IParticleDrawer {
public:
	union {
	CObject cobject;
	};
};

class IParticleModule {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
	};
};

class IPerformableAction {
public:
	union {
	CObject cobject;
	};
};

class IPopupTimeParam {
public:
	union {
	CObject cobject;
	};
};

class IPoseCompression {
public:
	union {
	CObject cobject;
	};
};

class IPotentialField {
public:
	union {
	CObject cobject;
	};
};

class IQuestCondition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
	};
};

class IQuestSpawnsetAction {
public:
	union {
	CObject cobject;
	};
};

class IQuestTimeFunction {
public:
	union {
	CObject cobject;
	};
};

class IReactionAction {
public:
	union {
	CObject cobject;
	};
};

class IReactionCondition {
public:
	union {
	CObject cobject;
	};
};

class ISceneChoiceMemo {
public:
	union {
	CObject cobject;
	};
};

class ISlot {
public:
	union {
	CObject cobject;
	};
};

class ISpawnTreeBaseNode {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
	};
};

class ISpawnTreeBranch {
public:
	union {
	ISpawnTreeBaseNode ispawntreebasenode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
	};
};

class ISpawnTreeCompositeNode {
public:
	union {
	ISpawnTreeBranch ispawntreebranch;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_childNodes[2], m_childNodes, 144);
	};
};

class ISpawnTreeInitializer {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
	};
};

class ISpawnTreeInitializerAI {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
	};
};

class ISpawnTreeInitializerCommunityAI {
public:
	union {
	ISpawnTreeInitializerAI ispawntreeinitializerai;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
	};
};

class ISpawnTreeInitializerGuardAreaBase {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(float, m_pursuitRange, m_pursuitRange, 112);
	};
};

class ISpawnTreeInitializerToggleBehavior {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_behaviorSwitchName, m_behaviorSwitchName, 112);
		MAKE_PADDED_VAR(bool, m_enableBehavior, m_enableBehavior, 116);
	};
};

class ISpawnTreeLeafNode {
public:
	union {
	ISpawnTreeBaseNode ispawntreebasenode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
	};
};

class ISpawnTreeScriptedInitializer {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
	};
};

class ISpawnTreeSpawnerInitializer {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
	};
};

class ISpawnTreeSpawnMonitorBaseInitializer {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
	};
};

class ISpawnTreeSpawnMonitorInitializer {
public:
	union {
	ISpawnTreeSpawnMonitorBaseInitializer ispawntreespawnmonitorbaseinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
	};
};

class ISpawnTreeSpawnStrategy {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(bool, m_enablePooling, m_enablePooling, 112);
		MAKE_PADDED_VAR(float, m_overflowPoolRange, m_overflowPoolRange, 116);
	};
};

class IStorySceneChoiceLineAction {
public:
	union {
	CObject cobject;
	};
};

class IStorySceneItem {
public:
	union {
	CObject cobject;
	};
};

class ITexture {
public:
	union {
	CResource cresource;
	};
};

class ITicketAlgorithmScriptDefinition {
public:
	union {
	IBehTreeObjectDefinition ibehtreeobjectdefinition;
		MAKE_PADDED_VAR(int32_t, m_instanceClass, m_instanceClass, 56);
	};
};

class IUIConditionType {
public:
	union {
	CObject cobject;
	};
};

class SBehaviorConstraintPutLegIntoStirrupData {
public:
	union {
	int32_t m_footStoreName;
		MAKE_PADDED_VAR(int32_t, m_stirrupStoreName, m_stirrupStoreName, 4);
		MAKE_PADDED_VAR(int32_t, m_stirrupFinalStoreName, m_stirrupFinalStoreName, 8);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_ik, m_ik, 16);
		MAKE_PADDED_VAR(Vector, m_additionalSideDirForIKMS, m_additionalSideDirForIKMS, 224);
	};
};

class SFoliageInstanceStatistics {
public:
	union {
	CSRTBaseTree m_baseTree;
		MAKE_PADDED_VAR(uint32_t, m_instanceCount, m_instanceCount, 8);
	};
};

class SQuestBehaviorEvent {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 104);
		MAKE_PADDED_VAR(int32_t, m_behaviorEvent, m_behaviorEvent, 108);
	};
};

class SQuestBehaviorNotification {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 104);
		MAKE_PADDED_VAR(int32_t, m_notification, m_notification, 108);
		MAKE_PADDED_VAR(bool, m_all, m_all, 112);
	};
};

class SSwitchableFoliageEntry {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(CSRTBaseTree, m_tree, m_tree, 8);
	};
};

class StorySceneDefinition {
public:
	union {
	CStoryScene m_scene;
		MAKE_PADDED_VAR(int32_t, m_input, m_input, 32);
	};
};

class StorySceneFactory {
public:
	union {
	IFactory ifactory;
	};
};

class SVoicesetSlot {
public:
	union {
		MAKE_PADDED_VAR(CStoryScene, m_scene, m_scene, 8);
		MAKE_PADDED_VAR(char*, m_name, m_name, 40);
		MAKE_PADDED_VAR(int32_t, m_voiceTag, m_voiceTag, 52);
	};
};

class SWorldRenderSettings {
public:
	union {
	float m_cameraNearPlane;
		MAKE_PADDED_VAR(float, m_cameraFarPlane, m_cameraFarPlane, 4);
		MAKE_PADDED_VAR(bool, m_ssaoBlurEnable, m_ssaoBlurEnable, 8);
		MAKE_PADDED_VAR(bool, m_ssaoNormalsEnable, m_ssaoNormalsEnable, 9);
		MAKE_PADDED_VAR(float, m_envProbeSecondAmbientFilterSize, m_envProbeSecondAmbientFilterSize, 12);
		MAKE_PADDED_VAR(float, m_fakeCloudsShadowSize, m_fakeCloudsShadowSize, 16);
		MAKE_PADDED_VAR(float, m_fakeCloudsShadowSpeed, m_fakeCloudsShadowSpeed, 20);
		MAKE_PADDED_VAR(CTextureArray, m_fakeCloudsShadowTexture, m_fakeCloudsShadowTexture, 24);
		MAKE_PADDED_VAR(uint32_t, m_bloomLevelsRange, m_bloomLevelsRange, 32);
		MAKE_PADDED_VAR(uint32_t, m_bloomLevelsOffset, m_bloomLevelsOffset, 36);
		MAKE_PADDED_VAR(float, m_bloomScaleConst, m_bloomScaleConst, 40);
		MAKE_PADDED_VAR(float, m_bloomDownscaleDivBase, m_bloomDownscaleDivBase, 44);
		MAKE_PADDED_VAR(float, m_bloomDownscaleDivExp, m_bloomDownscaleDivExp, 48);
		MAKE_PADDED_VAR(float, m_bloomLevelScale0, m_bloomLevelScale0, 52);
		MAKE_PADDED_VAR(float, m_bloomLevelScale1, m_bloomLevelScale1, 56);
		MAKE_PADDED_VAR(float, m_bloomLevelScale2, m_bloomLevelScale2, 60);
		MAKE_PADDED_VAR(float, m_bloomLevelScale3, m_bloomLevelScale3, 64);
		MAKE_PADDED_VAR(float, m_bloomLevelScale4, m_bloomLevelScale4, 68);
		MAKE_PADDED_VAR(float, m_bloomLevelScale5, m_bloomLevelScale5, 72);
		MAKE_PADDED_VAR(float, m_bloomLevelScale6, m_bloomLevelScale6, 76);
		MAKE_PADDED_VAR(float, m_bloomLevelScale7, m_bloomLevelScale7, 80);
		MAKE_PADDED_VAR(float, m_bloomPrecision, m_bloomPrecision, 84);
		MAKE_PADDED_VAR(uint32_t, m_shaftsLevelIndex, m_shaftsLevelIndex, 88);
		MAKE_PADDED_VAR(float, m_shaftsIntensity, m_shaftsIntensity, 92);
		MAKE_PADDED_VAR(float, m_shaftsThresholdsScale, m_shaftsThresholdsScale, 96);
		MAKE_PADDED_VAR(float, m_fresnelScaleLights, m_fresnelScaleLights, 100);
		MAKE_PADDED_VAR(float, m_fresnelScaleEnvProbes, m_fresnelScaleEnvProbes, 104);
		MAKE_PADDED_VAR(float, m_fresnelRoughnessShape, m_fresnelRoughnessShape, 108);
		MAKE_PADDED_VAR(float, m_interiorDimmerAmbientLevel, m_interiorDimmerAmbientLevel, 112);
		MAKE_PADDED_VAR(float, m_interiorVolumeSmoothExtent, m_interiorVolumeSmoothExtent, 116);
		MAKE_PADDED_VAR(float, m_interiorVolumeSmoothRemovalRange, m_interiorVolumeSmoothRemovalRange, 120);
		MAKE_PADDED_VAR(float, m_interiorVolumesFadeStartDist, m_interiorVolumesFadeStartDist, 124);
		MAKE_PADDED_VAR(float, m_interiorVolumesFadeRange, m_interiorVolumesFadeRange, 128);
		MAKE_PADDED_VAR(float, m_interiorVolumesFadeEncodeRange, m_interiorVolumesFadeEncodeRange, 132);
		MAKE_PADDED_VAR(float, m_distantLightStartDistance, m_distantLightStartDistance, 136);
		MAKE_PADDED_VAR(float, m_distantLightFadeDistance, m_distantLightFadeDistance, 140);
		MAKE_PADDED_VAR(float, m_globalFlaresTransparencyThreshold, m_globalFlaresTransparencyThreshold, 144);
		MAKE_PADDED_VAR(float, m_globalFlaresTransparencyRange, m_globalFlaresTransparencyRange, 148);
		MAKE_PADDED_VAR(float, m_chromaticAberrationStart, m_chromaticAberrationStart, 152);
		MAKE_PADDED_VAR(float, m_chromaticAberrationRange, m_chromaticAberrationRange, 156);
		MAKE_PADDED_VAR(SWorldMotionBlurSettings, m_motionBlurSettings, m_motionBlurSettings, 160);
		MAKE_PADDED_VAR(float, m_interiorFallbackReflectionThresholdLow, m_interiorFallbackReflectionThresholdLow, 204);
		MAKE_PADDED_VAR(float, m_interiorFallbackReflectionThresholdHigh, m_interiorFallbackReflectionThresholdHigh, 208);
		MAKE_PADDED_VAR(float, m_interiorFallbackReflectionBlendLow, m_interiorFallbackReflectionBlendLow, 212);
		MAKE_PADDED_VAR(float, m_interiorFallbackReflectionBlendHigh, m_interiorFallbackReflectionBlendHigh, 216);
		MAKE_PADDED_VAR(bool, m_enableEnvProbeLights, m_enableEnvProbeLights, 220);
	};
};

class TCrPropertySet {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(float, m_shoulderWeight, m_shoulderWeight, 88);
		MAKE_PADDED_VAR(float, m_shoulderLimitUpDeg, m_shoulderLimitUpDeg, 92);
		MAKE_PADDED_VAR(float, m_shoulderLimitDownDeg, m_shoulderLimitDownDeg, 96);
		MAKE_PADDED_VAR(float, m_shoulderLimitLeftDeg, m_shoulderLimitLeftDeg, 100);
		MAKE_PADDED_VAR(float, m_shoulderLimitRightDeg, m_shoulderLimitRightDeg, 104);
	};
};

class W3GameParams {
public:
	union {
	CObject cobject;
	};
};

class AnimationTrajectoryPlayerScriptWrapper {
public:
	union {
	CObject cobject;
	};
};

class C2dArray {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(char**, m_headers[12], m_headers, 104);
		MAKE_PADDED_VAR(char***, m_data[12][12], m_data, 116);
	};
};

class CActionMoveAnimationProxy {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_isInitialized, m_isInitialized, 88);
		MAKE_PADDED_VAR(bool, m_isValid, m_isValid, 89);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 92);
		MAKE_PADDED_VAR(float, m_prevTime, m_prevTime, 96);
		MAKE_PADDED_VAR(float, m_currTime, m_currTime, 100);
		MAKE_PADDED_VAR(bool, m_finished, m_finished, 104);
	};
};

class CActionPointManager {
public:
	union {
	CObject cobject;
	};
};

class CAddFactPerformableAction {
public:
	union {
	IPerformableAction iperformableaction;
		MAKE_PADDED_VAR(char*, m_factID, m_factID, 88);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 100);
		MAKE_PADDED_VAR(int32_t, m_validForSeconds, m_validForSeconds, 104);
	};
};

class CAIAttackRange {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 88);
		MAKE_PADDED_VAR(float, m_height, m_height, 92);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 96);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 112);
		MAKE_PADDED_VAR(float, m_angleOffset, m_angleOffset, 116);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 120);
		MAKE_PADDED_VAR(float, m_lineOfSightHeight, m_lineOfSightHeight, 124);
		MAKE_PADDED_VAR(bool, m_useHeadOrientation, m_useHeadOrientation, 128);
	};
};

class CAIDefaults {
public:
	union {
	IAIParameters iaiparameters;
	};
};

class CAIParameters {
public:
	union {
	IAIParameters iaiparameters;
	};
};

class CAIRedefinitionParameters {
public:
	union {
	IAIParameters iaiparameters;
	};
};

class CAISenseParams {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 92);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 96);
		MAKE_PADDED_VAR(float, m_rangeAngle, m_rangeAngle, 100);
		MAKE_PADDED_VAR(float, m_height, m_height, 104);
		MAKE_PADDED_VAR(bool, m_testLOS, m_testLOS, 108);
		MAKE_PADDED_VAR(bool, m_detectOnlyHostiles, m_detectOnlyHostiles, 109);
	};
};

class CAlwaysTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
	};
};

class CAnimationEndCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(bool, m_useTransitionTimeOffset, m_useTransitionTimeOffset, 88);
		MAKE_PADDED_VAR(float, m_backTimeOffset, m_backTimeOffset, 92);
	};
};

class CAnimationManualSlotSyncInstance {
public:
	union {
	CObject cobject;
	};
};

class CAnimationSlots {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(Matrix*, m_transforms[2], m_transforms, 88);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 100);
	};
};

class CAnimEventSerializer {
public:
	union {
	CObject cobject;
	};
};

class CAnimEventTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 88);
	};
};

class CAreaMapPinsResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(SAreaMapPinInfo*, m_mappinsInfo[2], m_mappinsInfo, 104);
	};
};

class CAttitudeManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CBaseBehaviorVariable {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(uint32_t, m_varIndex, m_varIndex, 92);
	};
};

class CBehaviorConstraintBoneObject {
public:
	union {
	IBehaviorConstraintObject ibehaviorconstraintobject;
		MAKE_PADDED_VAR(Vector, m_localPositionOffset, m_localPositionOffset, 96);
		MAKE_PADDED_VAR(EulerAngles, m_localRotationOffset, m_localRotationOffset, 112);
		MAKE_PADDED_VAR(char*, m_Bone, m_Bone, 184);
	};
};

class CBehaviorConstraintComponentObject {
public:
	union {
	CBehaviorConstraintBoneObject cbehaviorconstraintboneobject;
		MAKE_PADDED_VAR(Vector, m_localPositionOffset, m_localPositionOffset, 96);
		MAKE_PADDED_VAR(EulerAngles, m_localRotationOffset, m_localRotationOffset, 112);
		MAKE_PADDED_VAR(char*, m_Bone, m_Bone, 184);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 224);
	};
};

class CBehaviorEventDescription {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 88);
		MAKE_PADDED_VAR(bool, m_isModifiableByEffect, m_isModifiableByEffect, 92);
	};
};

class CBehaviorGraphBlendMultipleCondNode_AnimEnd {
public:
	union {
	IBehaviorGraphBlendMultipleCondNode_Condition ibehaviorgraphblendmultiplecondnode_condition;
	};
};

class CBehaviorGraphBlendMultipleCondNode_AnimEvent {
public:
	union {
	IBehaviorGraphBlendMultipleCondNode_Condition ibehaviorgraphblendmultiplecondnode_condition;
		MAKE_PADDED_VAR(int32_t, m_animEventName, m_animEventName, 88);
	};
};

class CBehaviorGraphBlendMultipleCondNode_ConstDampMethod {
public:
	union {
	IBehaviorGraphBlendMultipleCondNode_DampMethod ibehaviorgraphblendmultiplecondnode_dampmethod;
		MAKE_PADDED_VAR(float, m_speed, m_speed, 88);
	};
};

class CBehaviorGraphBlendMultipleCondNode_Multi {
public:
	union {
	IBehaviorGraphBlendMultipleCondNode_Condition ibehaviorgraphblendmultiplecondnode_condition;
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 88);
		MAKE_PADDED_VAR(bool, m_logicAndOr, m_logicAndOr, 100);
	};
};

class CBehaviorGraphComboCooldownModifier {
public:
	union {
	IBehaviorGraphComboModifier ibehaviorgraphcombomodifier;
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 88);
	};
};

class CBehaviorGraphComboLevelModifier {
public:
	union {
	IBehaviorGraphComboModifier ibehaviorgraphcombomodifier;
		MAKE_PADDED_VAR(uint32_t, m_level, m_level, 88);
	};
};

class CBehaviorGraphComboStartingAnimationModifier {
public:
	union {
	IBehaviorGraphComboModifier ibehaviorgraphcombomodifier;
		MAKE_PADDED_VAR(int32_t, m_animationAttack, m_animationAttack, 88);
		MAKE_PADDED_VAR(int32_t, m_animationParry, m_animationParry, 92);
	};
};

class CBehaviorGraphComboTransitionInterface {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_modifiers[2], m_modifiers, 88);
	};
};

class CBehaviorGraphInstance {
public:
	union {
	CObject cobject;
	};
};

class CBehaviorGraphInstanceSnapshot {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_instanceName, m_instanceName, 88);
	};
};

class CBehaviorGraphPointCloudLookAtTransition_Spherical {
public:
	union {
	IBehaviorGraphPointCloudLookAtTransition_Vector ibehaviorgraphpointcloudlookattransition_vector;
	};
};

class CBehaviorGraphRetargetCharacterNodeMethod_Scale {
public:
	union {
	IBehaviorGraphRetargetCharacterNodeMethod ibehaviorgraphretargetcharacternodemethod;
		MAKE_PADDED_VAR(float, m_scaleFactor, m_scaleFactor, 96);
	};
};

class CBehaviorGraphStack {
public:
	union {
	CObject cobject;
	};
};

class CBehaviorGraphStackSnapshot {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_instanceSnapshots[2], m_instanceSnapshots, 88);
	};
};

class CBehaviorGraphStaticCondition_AnimTag {
public:
	union {
	IBehaviorGraphStaticCondition ibehaviorgraphstaticcondition;
		MAKE_PADDED_VAR(int32_t, m_animTag, m_animTag, 88);
	};
};

class CBehaviorMimicCloseEyesConstraint {
public:
	union {
	IBehaviorMimicConstraint ibehaviormimicconstraint;
		MAKE_PADDED_VAR(int32_t, m_eyeClosedTrack_Left, m_eyeClosedTrack_Left, 88);
		MAKE_PADDED_VAR(int32_t, m_eyeClosedTrack_Right, m_eyeClosedTrack_Right, 92);
		MAKE_PADDED_VAR(char**, m_bonesToOverride_Left[2], m_bonesToOverride_Left, 96);
		MAKE_PADDED_VAR(char**, m_bonesToOverride_Right[2], m_bonesToOverride_Right, 108);
	};
};

class CBehaviorMimiLipsyncCorrectionConstraint {
public:
	union {
	IBehaviorMimicConstraint ibehaviormimicconstraint;
		MAKE_PADDED_VAR(int32_t, m_controlTrack, m_controlTrack, 88);
		MAKE_PADDED_VAR(int32_t, m_trackBegin, m_trackBegin, 92);
		MAKE_PADDED_VAR(int32_t, m_trackEnd, m_trackEnd, 96);
	};
};

class CBehaviorSyncMethodDuration {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
	};
};

class CBehaviorSyncMethodEventProp {
public:
	union {
	IBehaviorSyncMethodEvent ibehaviorsyncmethodevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 88);
		MAKE_PADDED_VAR(float, m_offset, m_offset, 96);
	};
};

class CBehaviorSyncMethodEventStart {
public:
	union {
	IBehaviorSyncMethodEvent ibehaviorsyncmethodevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 88);
		MAKE_PADDED_VAR(bool, m_startAtRandomEvent, m_startAtRandomEvent, 96);
	};
};

class CBehaviorSyncMethodNone {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
	};
};

class CBehaviorSyncMethodOffset {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
		MAKE_PADDED_VAR(float, m_timeOffset, m_timeOffset, 88);
	};
};

class CBehaviorSyncMethodProp {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
	};
};

class CBehaviorSyncMethodSyncPoints {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
	};
};

class CBehaviorSyncMethodSyncPointsStartOnly {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
	};
};

class CBehaviorSyncMethodTime {
public:
	union {
	IBehaviorSyncMethod ibehaviorsyncmethod;
	};
};

class CBehaviorVariable {
public:
	union {
	CBaseBehaviorVariable cbasebehaviorvariable;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(uint32_t, m_varIndex, m_varIndex, 92);
		MAKE_PADDED_VAR(float, m_value, m_value, 96);
		MAKE_PADDED_VAR(float, m_defaultValue, m_defaultValue, 100);
		MAKE_PADDED_VAR(float, m_minValue, m_minValue, 104);
		MAKE_PADDED_VAR(float, m_maxValue, m_maxValue, 108);
		MAKE_PADDED_VAR(bool, m_isModifiableByEffect, m_isModifiableByEffect, 112);
		MAKE_PADDED_VAR(bool, m_shouldBeSyncedBetweenGraphs, m_shouldBeSyncedBetweenGraphs, 113);
	};
};

class CBehTree {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(IBehTreeNodeDefinition, m_rootNode, m_rootNode, 104);
	};
};

class CBehTreeAtomicTestSubtreeCondition {
public:
	union {
	IBehTreeAtomicCondition ibehtreeatomiccondition;
	};
};

class CBehTreeConstantTicketAlgorithmDefinition {
public:
	union {
	IBehTreeTicketAlgorithmDefinition ibehtreeticketalgorithmdefinition;
		MAKE_PADDED_VAR(CBehTreeValFloat, m_importance, m_importance, 88);
	};
};

class CBehTreeDistanceBasedTicketAlgorithmDefinition {
public:
	union {
	IBehTreeTicketAlgorithmDefinition ibehtreeticketalgorithmdefinition;
		MAKE_PADDED_VAR(CBehTreeDistanceBasedTicketAlgorithmField*, m_distanceToImportance[2], m_distanceToImportance, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_importanceMultiplier, m_importanceMultiplier, 100);
	};
};

class CBehTreeFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CBehTreeIfActiveTicketAlgorithmDefinition {
public:
	union {
	CBehTreeConstantTicketAlgorithmDefinition cbehtreeconstantticketalgorithmdefinition;
		MAKE_PADDED_VAR(CBehTreeValFloat, m_importance, m_importance, 88);
	};
};

class CBehTreeInstance {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(IScriptable*, m_dependentObjects[2], m_dependentObjects, 208);
		MAKE_PADDED_VAR(intptr_t*, m_onReattachCallback[2], m_onReattachCallback, 220);
	};
};

class CBehTreeNodeAtomicActionDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeAtomicIdleDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeAtomicMatchActionTargetRotationDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_completeOnTargetReached, m_completeOnTargetReached, 104);
	};
};

class CBehTreeNodeAtomicPlayAnimationDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValCName, m_animationName, m_animationName, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_slotName, m_slotName, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_blendInTime, m_blendInTime, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_blendOutTime, m_blendOutTime, 128);
	};
};

class CBehTreeNodeAtomicPlayAnimationEventDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_shouldForceEvent, m_shouldForceEvent, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_eventStateName, m_eventStateName, 108);
		MAKE_PADDED_VAR(int32_t, m_eventResetTriggerName, m_eventResetTriggerName, 116);
	};
};

class CBehTreeNodeAtomicPlayAnimationManualMotionExtractionDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 104);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 108);
		MAKE_PADDED_VAR(uint32_t, m_loopIterations, m_loopIterations, 112);
		MAKE_PADDED_VAR(bool, m_isTransitionAnimation, m_isTransitionAnimation, 116);
	};
};

class CBehTreeNodeAtomicSailorFollowPathDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pathTag, m_pathTag, 104);
		MAKE_PADDED_VAR(CBehTreeValBool, m_upThePath, m_upThePath, 112);
		MAKE_PADDED_VAR(CBehTreeValBool, m_startFromBeginning, m_startFromBeginning, 120);
		MAKE_PADDED_VAR(CBehTreeValCName, m_boatTag, m_boatTag, 128);
	};
};

class CBehTreeNodeAtomicSailorMoveToDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValCName, m_boatTag, m_boatTag, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_entityTag, m_entityTag, 112);
	};
};

class CBehTreeNodeAtomicSailorMoveToPathDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pathTag, m_pathTag, 104);
		MAKE_PADDED_VAR(CBehTreeValBool, m_upThePath, m_upThePath, 112);
		MAKE_PADDED_VAR(CBehTreeValBool, m_startFromBeginning, m_startFromBeginning, 120);
		MAKE_PADDED_VAR(CBehTreeValCName, m_boatTag, m_boatTag, 128);
	};
};

class CBehTreeNodeAtomicTeleportDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeAtomicTeleportToActionPointDefinition {
public:
	union {
	CBehTreeNodeAtomicTeleportDefinition cbehtreenodeatomicteleportdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeAttachToCurveDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValCName, m_animationName, m_animationName, 104);
		MAKE_PADDED_VAR(CBehTreeValString, m_componentName, m_componentName, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_blendInTime, m_blendInTime, 128);
	};
};

class CBehTreeNodeBaseRotateToTargetDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_completeOnTargetReached, m_completeOnTargetReached, 104);
	};
};

class CBehTreeNodeBreakAnimationsDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeCarryingItemBaseDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeCompleteImmediatelyDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_reportSuccess, m_reportSuccess, 104);
	};
};

class CBehTreeNodeDespawnDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeDropItemDefinition {
public:
	union {
	CBehTreeNodeCarryingItemBaseDefinition cbehtreenodecarryingitembasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeFinishAnimationsDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeFlyOnCurveDefinition {
public:
	union {
	CBehTreeNodeAttachToCurveDefinition cbehtreenodeattachtocurvedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValCName, m_animationName, m_animationName, 104);
		MAKE_PADDED_VAR(CBehTreeValString, m_componentName, m_componentName, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_blendInTime, m_blendInTime, 128);
		MAKE_PADDED_VAR(CBehTreeValCName, m_animValPitch, m_animValPitch, 136);
		MAKE_PADDED_VAR(CBehTreeValCName, m_animValYaw, m_animValYaw, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxPitchInput, m_maxPitchInput, 152);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxPitchOutput, m_maxPitchOutput, 160);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxYawInput, m_maxYawInput, 168);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxYawOutput, m_maxYawOutput, 176);
	};
};

class CBehTreeNodeFollowFormationDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodePCReleaseControlDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodePerformWorkDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodePickItemDefinition {
public:
	union {
	CBehTreeNodeCarryingItemBaseDefinition cbehtreenodecarryingitembasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValCName, m_rBoneToAttachItem, m_rBoneToAttachItem, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_lBoneToAttachItem, m_lBoneToAttachItem, 112);
	};
};

class CBehTreeNodePlaySceneDefinition {
public:
	union {
	IBehTreeNodeSpecialDefinition ibehtreenodespecialdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeReactionSceneAssignActorNodeDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(int32_t, m_roleName, m_roleName, 104);
	};
};

class CBehTreeNodeReactionSceneEndNodeDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeRiderRotateToHorseDefinition {
public:
	union {
	CBehTreeNodeBaseRotateToTargetDefinition cbehtreenodebaserotatetotargetdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_completeOnTargetReached, m_completeOnTargetReached, 104);
	};
};

class CBehTreeNodeScriptTerminalDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(IBehTreeTaskDefinition, m_taskOrigin, m_taskOrigin, 104);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 114);
		MAKE_PADDED_VAR(bool, m_runMainOnActivation, m_runMainOnActivation, 115);
	};
};

class CBehTreeNodeSelectTargetByTagDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(int32_t, m_tag, m_tag, 104);
	};
};

class CBehTreeNodeSendScaredEventDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_becomeScared, m_becomeScared, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_scaredTime, m_scaredTime, 108);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_scaredTimeMax, m_scaredTimeMax, 116);
	};
};

class CBehTreeNodeTeleportToActionTargetDefinition {
public:
	union {
	CBehTreeNodeAtomicTeleportDefinition cbehtreenodeatomicteleportdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeTeleportToMetalinkDestinationDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValBool, m_skipTeleportation, m_skipTeleportation, 108);
	};
};

class CBehTreeReactionEventData {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 104);
		MAKE_PADDED_VAR(float, m_lifetime, m_lifetime, 108);
		MAKE_PADDED_VAR(float, m_broadcastInterval, m_broadcastInterval, 112);
		MAKE_PADDED_VAR(float, m_distanceRange, m_distanceRange, 124);
		MAKE_PADDED_VAR(int32_t, m_recipientCount, m_recipientCount, 176);
	};
};

class CBehTreeReactionManager {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_reactionEvents[2], m_reactionEvents, 88);
		MAKE_PADDED_VAR(CReactionScene*, m_reactionScens[2], m_reactionScens, 100);
	};
};

class CBehTreeScriptTicketAlgorithmDefinition {
public:
	union {
	IBehTreeTicketAlgorithmDefinition ibehtreeticketalgorithmdefinition;
		MAKE_PADDED_VAR(ITicketAlgorithmScriptDefinition, m_scriptDef, m_scriptDef, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_importanceMultiplier, m_importanceMultiplier, 96);
	};
};

class CBehTreeStrafingAlgorithmDefinition {
public:
	union {
	CObject cobject;
	};
};

class CBehTreeStrafingAlgorithmListDefinition {
public:
	union {
	CBehTreeStrafingAlgorithmDefinition cbehtreestrafingalgorithmdefinition;
		MAKE_PADDED_VAR(intptr_t*, m_list[2], m_list, 88);
	};
};

class CBehTreeStrafingAlgorithmNeverBackDownDefinition {
public:
	union {
	CBehTreeStrafingAlgorithmDefinition cbehtreestrafingalgorithmdefinition;
	};
};

class CBehTreeTicketAlgorithmListSumDefinition {
public:
	union {
	IBehTreeTicketAlgorithmListDefinition ibehtreeticketalgorithmlistdefinition;
		MAKE_PADDED_VAR(intptr_t*, m_list[2], m_list, 88);
	};
};

class CBehTreeTimeBasedTicketAlgorithmDefinition {
public:
	union {
	IBehTreeTicketAlgorithmDefinition ibehtreeticketalgorithmdefinition;
		MAKE_PADDED_VAR(CBehTreeValFloat, m_importanceMultiplier, m_importanceMultiplier, 88);
	};
};

class CBehTreeValFile {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(CBehTree, m_value, m_value, 8);
	};
};

class CBgNpcTriggerActionSwordReaction {
public:
	union {
	IBgNpcTriggerAction ibgnpctriggeraction;
	};
};

class CBgNpcTriggerActionTalk {
public:
	union {
	IBgNpcTriggerAction ibgnpctriggeraction;
	};
};

class CBoxAttackRange {
public:
	union {
	CAIAttackRange caiattackrange;
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 88);
		MAKE_PADDED_VAR(float, m_height, m_height, 92);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 96);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 112);
		MAKE_PADDED_VAR(float, m_angleOffset, m_angleOffset, 116);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 120);
		MAKE_PADDED_VAR(float, m_lineOfSightHeight, m_lineOfSightHeight, 124);
		MAKE_PADDED_VAR(bool, m_useHeadOrientation, m_useHeadOrientation, 128);
		MAKE_PADDED_VAR(float, m_rangeWidth, m_rangeWidth, 144);
	};
};

class CBrushBuilder {
public:
	union {
	CObject cobject;
	};
};

class CBrushCompiledData {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_brushes[2], m_brushes, 88);
	};
};

class CCameraDirector {
public:
	union {
	CObject cobject;
	};
};

class CCarryableItemsRegistry {
public:
	union {
	CObject cobject;
	};
};

class CCCOpClearInventory {
public:
	union {
	ICharacterCustomizationOperation icharactercustomizationoperation;
	};
};

class CCCOpScript {
public:
	union {
	ICharacterCustomizationOperation icharactercustomizationoperation;
	};
};

class CCCOpVirtualContainerOp {
public:
	union {
	ICharacterCustomizationOperation icharactercustomizationoperation;
		MAKE_PADDED_VAR(int32_t, m_virtualContainerTag, m_virtualContainerTag, 88);
	};
};

class CChangeMovementDirectionTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(float, m_angleDiffThreshold, m_angleDiffThreshold, 88);
		MAKE_PADDED_VAR(float, m_startCheckingAfterTime, m_startCheckingAfterTime, 92);
		MAKE_PADDED_VAR(int32_t, m_requestedMovementDirectionWSVariableName, m_requestedMovementDirectionWSVariableName, 96);
		MAKE_PADDED_VAR(int32_t, m_currentMovementDirectionMSInternalVariableName, m_currentMovementDirectionMSInternalVariableName, 100);
	};
};

class CCharacterResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_charactersData[2], m_charactersData, 104);
	};
};

class CCharacterStats {
public:
	union {
	CObject cobject;
	};
};

class CCircularPotentialField {
public:
	union {
	IPotentialField ipotentialfield;
		MAKE_PADDED_VAR(float, m_radius, m_radius, 96);
		MAKE_PADDED_VAR(float, m_rangeTop, m_rangeTop, 100);
		MAKE_PADDED_VAR(float, m_rangeBottom, m_rangeBottom, 104);
		MAKE_PADDED_VAR(Vector, m_origin, m_origin, 112);
		MAKE_PADDED_VAR(bool, m_solid, m_solid, 128);
	};
};

class CCityLightManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CCollisionMesh {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_shapes[2], m_shapes, 112);
		MAKE_PADDED_VAR(float, m_occlusionAttenuation, m_occlusionAttenuation, 124);
		MAKE_PADDED_VAR(float, m_occlusionDiagonalLimit, m_occlusionDiagonalLimit, 128);
		MAKE_PADDED_VAR(int32_t, m_swimmingRotationAxis, m_swimmingRotationAxis, 132);
	};
};

class CCollisionShapeBox {
public:
	union {
	ICollisionShape icollisionshape;
		MAKE_PADDED_VAR(Matrix, m_pose, m_pose, 96);
		MAKE_PADDED_VAR(float, m_densityScaler, m_densityScaler, 160);
		MAKE_PADDED_VAR(int32_t, m_physicalMaterialName, m_physicalMaterialName, 176);
		MAKE_PADDED_VAR(float, m_halfExtendsX, m_halfExtendsX, 180);
		MAKE_PADDED_VAR(float, m_halfExtendsY, m_halfExtendsY, 184);
		MAKE_PADDED_VAR(float, m_halfExtendsZ, m_halfExtendsZ, 188);
	};
};

class CCollisionShapeCapsule {
public:
	union {
	ICollisionShape icollisionshape;
		MAKE_PADDED_VAR(Matrix, m_pose, m_pose, 96);
		MAKE_PADDED_VAR(float, m_densityScaler, m_densityScaler, 160);
		MAKE_PADDED_VAR(int32_t, m_physicalMaterialName, m_physicalMaterialName, 176);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 180);
		MAKE_PADDED_VAR(float, m_height, m_height, 184);
	};
};

class CCollisionShapeConvex {
public:
	union {
	ICollisionShape icollisionshape;
		MAKE_PADDED_VAR(Matrix, m_pose, m_pose, 96);
		MAKE_PADDED_VAR(float, m_densityScaler, m_densityScaler, 160);
		MAKE_PADDED_VAR(int32_t, m_physicalMaterialName, m_physicalMaterialName, 176);
		MAKE_PADDED_VAR(Vector*, m_vertices[94], m_vertices, 180);
		MAKE_PADDED_VAR(Vector*, m_planes[94], m_planes, 192);
		MAKE_PADDED_VAR(uint16_t*, m_polygons[94], m_polygons, 204);
	};
};

class CCollisionShapeSphere {
public:
	union {
	ICollisionShape icollisionshape;
		MAKE_PADDED_VAR(Matrix, m_pose, m_pose, 96);
		MAKE_PADDED_VAR(float, m_densityScaler, m_densityScaler, 160);
		MAKE_PADDED_VAR(int32_t, m_physicalMaterialName, m_physicalMaterialName, 176);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 180);
	};
};

class CCollisionShapeTriMesh {
public:
	union {
	ICollisionShape icollisionshape;
		MAKE_PADDED_VAR(Matrix, m_pose, m_pose, 96);
		MAKE_PADDED_VAR(float, m_densityScaler, m_densityScaler, 160);
		MAKE_PADDED_VAR(int32_t*, m_physicalMaterialNames[94], m_physicalMaterialNames, 176);
		MAKE_PADDED_VAR(Vector*, m_vertices[94], m_vertices, 188);
		MAKE_PADDED_VAR(uint16_t*, m_triangles[94], m_triangles, 200);
		MAKE_PADDED_VAR(uint16_t*, m_physicalMaterialIndexes[94], m_physicalMaterialIndexes, 212);
	};
};

class CComboAspect {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(intptr_t*, m_strings[2], m_strings, 92);
	};
};

class CComboDefinition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_aspects[2], m_aspects, 88);
	};
};

class CComboPlayer {
public:
	union {
	CObject cobject;
	};
};

class CComboString {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(SComboAnimationData*, m_attacks[2], m_attacks, 88);
		MAKE_PADDED_VAR(SComboAnimationData**, m_distAttacks[2][2], m_distAttacks, 100);
		MAKE_PADDED_VAR(SComboAnimationData***, m_dirAttacks[2][2][2], m_dirAttacks, 112);
		MAKE_PADDED_VAR(bool, m_leftSide, m_leftSide, 124);
	};
};

class CCommonMapManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CCommunityAreaType {
public:
	union {
	CObject cobject;
	};
};

class CCommunityAreaTypeDefault {
public:
	union {
	CCommunityAreaType ccommunityareatype;
		MAKE_PADDED_VAR(float, m_areaSpawnRadius, m_areaSpawnRadius, 88);
		MAKE_PADDED_VAR(float, m_areaDespawnRadius, m_areaDespawnRadius, 92);
		MAKE_PADDED_VAR(float, m_spawnRadius, m_spawnRadius, 96);
		MAKE_PADDED_VAR(float, m_despawnRadius, m_despawnRadius, 100);
		MAKE_PADDED_VAR(bool, m_dontRestore, m_dontRestore, 104);
	};
};

class CCommunityAreaTypeSpawnRadius {
public:
	union {
	CCommunityAreaType ccommunityareatype;
		MAKE_PADDED_VAR(float, m_spawnRadius, m_spawnRadius, 88);
		MAKE_PADDED_VAR(float, m_despawnRadius, m_despawnRadius, 92);
		MAKE_PADDED_VAR(bool, m_dontRestore, m_dontRestore, 96);
	};
};

class CCommunityFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CCommunityInitializers {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_initializers[2], m_initializers, 88);
	};
};

class CCommunitySystem {
public:
	union {
	IGameSystem igamesystem;
		MAKE_PADDED_VAR(CActionPointManager, m_apMan, m_apMan, 232);
		MAKE_PADDED_VAR(ISpawnTreeInitializerAI, m_communitySpawnInitializer, m_communitySpawnInitializer, 272);
	};
};

class CConeAttackRange {
public:
	union {
	CAIAttackRange caiattackrange;
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 88);
		MAKE_PADDED_VAR(float, m_height, m_height, 92);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 96);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 112);
		MAKE_PADDED_VAR(float, m_angleOffset, m_angleOffset, 116);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 120);
		MAKE_PADDED_VAR(float, m_lineOfSightHeight, m_lineOfSightHeight, 124);
		MAKE_PADDED_VAR(bool, m_useHeadOrientation, m_useHeadOrientation, 128);
		MAKE_PADDED_VAR(float, m_rangeAngle, m_rangeAngle, 144);
	};
};

class CControlRigSettings {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t*, m_fkBonesNames_l1[2], m_fkBonesNames_l1, 88);
		MAKE_PADDED_VAR(int32_t*, m_fkBones_l1[2], m_fkBones_l1, 100);
		MAKE_PADDED_VAR(int32_t*, m_ikBonesNames[2], m_ikBonesNames, 112);
		MAKE_PADDED_VAR(int32_t*, m_ikBones[2], m_ikBones, 124);
	};
};

class CCookedExplorations {
public:
	union {
	CResource cresource;
	};
};

class CCubeTexture {
public:
	union {
	CResource cresource;
	};
};

class CCurveEntitySpawner {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_templateWeights[2], m_templateWeights, 88);
		MAKE_PADDED_VAR(uint32_t, m_density, m_density, 132);
		MAKE_PADDED_VAR(float, m_variation, m_variation, 136);
	};
};

class CCustomCameraDefaultPDC {
public:
	union {
	ICustomCameraPivotDistanceController icustomcamerapivotdistancecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minDist, m_minDist, 96);
		MAKE_PADDED_VAR(float, m_maxDist, m_maxDist, 100);
		MAKE_PADDED_VAR(float, m_dampFactor, m_dampFactor, 108);
	};
};

class CCustomCameraOutdoorCollisionController {
public:
	union {
	ICustomCameraCollisionController icustomcameracollisioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
	};
};

class CCustomCameraPlayerPPC {
public:
	union {
	ICustomCameraPivotPositionController icustomcamerapivotpositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_offsetZ, m_offsetZ, 96);
		MAKE_PADDED_VAR(float, m_pivotZSmoothTime, m_pivotZSmoothTime, 100);
		MAKE_PADDED_VAR(float, m_dampFactor, m_dampFactor, 132);
		MAKE_PADDED_VAR(float, m_smoothZ, m_smoothZ, 136);
	};
};

class CCustomCameraRopePPC {
public:
	union {
	ICustomCameraPivotPositionController icustomcamerapivotpositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_offsetZ, m_offsetZ, 96);
		MAKE_PADDED_VAR(float, m_pivotZSmoothTime, m_pivotZSmoothTime, 100);
		MAKE_PADDED_VAR(float, m_dampFactor, m_dampFactor, 132);
		MAKE_PADDED_VAR(float, m_ropeLength, m_ropeLength, 136);
		MAKE_PADDED_VAR(float, m_smoothZ, m_smoothZ, 140);
	};
};

class CCutsceneModifierFreezer {
public:
	union {
	ICutsceneModifier icutscenemodifier;
	};
};

class CCylinderAttackRange {
public:
	union {
	CAIAttackRange caiattackrange;
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 88);
		MAKE_PADDED_VAR(float, m_height, m_height, 92);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 96);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 112);
		MAKE_PADDED_VAR(float, m_angleOffset, m_angleOffset, 116);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 120);
		MAKE_PADDED_VAR(float, m_lineOfSightHeight, m_lineOfSightHeight, 124);
		MAKE_PADDED_VAR(bool, m_useHeadOrientation, m_useHeadOrientation, 128);
	};
};

class CDebugAttributesManager {
public:
	union {
	CObject cobject;
	};
};

class CDefaultCompressedPose2 {
public:
	union {
	ICompressedPose icompressedpose;
	};
};

class CDefaultCompressedPoseWithExtraBones {
public:
	union {
	CDefaultCompressedPose2 cdefaultcompressedpose2;
	};
};

class CDefinitionsManagerAccessor {
public:
	union {
	CObject cobject;
	};
};

class CDelayStateTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(float, m_delayTime, m_delayTime, 88);
		MAKE_PADDED_VAR(bool, m_resetTime, m_resetTime, 92);
	};
};

class CDeltaAnimationCompression {
public:
	union {
	IAnimationCompression ianimationcompression;
		MAKE_PADDED_VAR(char, m_quantizationBits, m_quantizationBits, 88);
		MAKE_PADDED_VAR(float, m_positionTolerance, m_positionTolerance, 92);
		MAKE_PADDED_VAR(float, m_rotationTolerance, m_rotationTolerance, 96);
		MAKE_PADDED_VAR(float, m_scaleTolerance, m_scaleTolerance, 100);
	};
};

class CDiskBundleContent {
public:
	union {
	CObject cobject;
	};
};

class CDLCDefinition {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(int32_t, m_id, m_id, 104);
		MAKE_PADDED_VAR(char*, m_localizedNameKey, m_localizedNameKey, 108);
		MAKE_PADDED_VAR(char*, m_localizedDescriptionKey, m_localizedDescriptionKey, 120);
		MAKE_PADDED_VAR(intptr_t*, m_mounters[2], m_mounters, 132);
		MAKE_PADDED_VAR(SDLCLanguagePack*, m_languagePacks[2], m_languagePacks, 144);
		MAKE_PADDED_VAR(bool, m_initiallyEnabled, m_initiallyEnabled, 156);
		MAKE_PADDED_VAR(bool, m_visibleInDLCMenu, m_visibleInDLCMenu, 157);
		MAKE_PADDED_VAR(bool, m_requiredByGameSave, m_requiredByGameSave, 158);
	};
};

class CDLCManager {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CDLCDefinition*, m_definitions[2], m_definitions, 96);
		MAKE_PADDED_VAR(IGameplayDLCMounter*, m_mountedContent[2], m_mountedContent, 120);
	};
};

class CEnableDeniedAreaRequest {
public:
	union {
	IEntityStateChangeRequest ientitystatechangerequest;
		MAKE_PADDED_VAR(bool, m_enable, m_enable, 88);
	};
};

class CEntitiesDetector {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CEntityExternalAppearance {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(CEntityAppearance, m_appearance, m_appearance, 104);
	};
};

class CEntityMapPinsResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_mappinsInfo[2], m_mappinsInfo, 104);
	};
};

class CEntityTemplateParam {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
	};
};

class CEquipmentDefinition {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 96);
	};
};

class CEquipmentInitializerRandom {
public:
	union {
	IEquipmentInitializer iequipmentinitializer;
	};
};

class CEquipmentInitializerUniform {
public:
	union {
	IEquipmentInitializer iequipmentinitializer;
		MAKE_PADDED_VAR(int32_t, m_itemName, m_itemName, 88);
	};
};

class CEvaluatorColorConst {
public:
	union {
	IEvaluatorColor ievaluatorcolor;
		MAKE_PADDED_VAR(Color, m_value, m_value, 88);
	};
};

class CEvaluatorColorCurve {
public:
	union {
	IEvaluatorColor ievaluatorcolor;
	};
};

class CEvaluatorColorRandom {
public:
	union {
	IEvaluatorColor ievaluatorcolor;
		MAKE_PADDED_VAR(Color, m_value, m_value, 88);
	};
};

class CEvaluatorColorStartEnd {
public:
	union {
	IEvaluatorColor ievaluatorcolor;
		MAKE_PADDED_VAR(Color, m_start, m_start, 88);
		MAKE_PADDED_VAR(Color, m_end, m_end, 92);
	};
};

class CEvaluatorFloatConst {
public:
	union {
	IEvaluatorFloat ievaluatorfloat;
		MAKE_PADDED_VAR(float, m_value, m_value, 88);
	};
};

class CEvaluatorFloatCurve {
public:
	union {
	IEvaluatorFloat ievaluatorfloat;
	};
};

class CEvaluatorFloatRainStrength {
public:
	union {
	IEvaluatorFloat ievaluatorfloat;
		MAKE_PADDED_VAR(float, m_valueMultiplier, m_valueMultiplier, 88);
	};
};

class CEvaluatorFloatRandomUniform {
public:
	union {
	IEvaluatorFloat ievaluatorfloat;
		MAKE_PADDED_VAR(float, m_min, m_min, 88);
		MAKE_PADDED_VAR(float, m_max, m_max, 92);
	};
};

class CEvaluatorFloatStartEnd {
public:
	union {
	IEvaluatorFloat ievaluatorfloat;
		MAKE_PADDED_VAR(float, m_start, m_start, 88);
		MAKE_PADDED_VAR(float, m_end, m_end, 92);
	};
};

class CEventStateTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 96);
	};
};

class CExtAnimEventFileFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CExtAnimEventsFile {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(int32_t, m_requiredSfxTag, m_requiredSfxTag, 144);
	};
};

class CFactsDB {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CFactsDBChoiceMemo {
public:
	union {
	ISceneChoiceMemo iscenechoicememo;
		MAKE_PADDED_VAR(char*, m_factID, m_factID, 88);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 100);
	};
};

class CFlyingSwarmScriptInput {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CFlyingSwarmGroup*, m_groupList[2], m_groupList, 88);
	};
};

class CFocusModeController {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CFoliageResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(uint32_t, m_version, m_version, 104);
		MAKE_PADDED_VAR(Box, m_bbox, m_bbox, 112);
		MAKE_PADDED_VAR(Box, m_gridbbox, m_gridbbox, 144);
	};
};

class CFont {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_textures[2], m_textures, 140);
	};
};

class CFootstepData {
public:
	union {
	CObject cobject;
	};
};

class CFormationFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CFormationPatternCompositeNode {
public:
	union {
	IFormationPatternNode iformationpatternnode;
		MAKE_PADDED_VAR(IFormationPatternNode*, m_childNodes[2], m_childNodes, 88);
	};
};

class CFormationPatternRepeatNode {
public:
	union {
	CFormationPatternCompositeNode cformationpatterncompositenode;
		MAKE_PADDED_VAR(IFormationPatternNode*, m_childNodes[2], m_childNodes, 88);
		MAKE_PADDED_VAR(int32_t, m_repeatCount, m_repeatCount, 104);
	};
};

class CFormationPatternSlotsNode {
public:
	union {
	IFormationPatternNode iformationpatternnode;
		MAKE_PADDED_VAR(CFormationSlotDefinition*, m_slots[2], m_slots, 88);
	};
};

class CFXBase {
public:
	union {
	CObject cobject;
	};
};

class CFXDefinition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 92);
		MAKE_PADDED_VAR(intptr_t*, m_trackGroups[2], m_trackGroups, 96);
		MAKE_PADDED_VAR(float, m_length, m_length, 108);
		MAKE_PADDED_VAR(float, m_loopStart, m_loopStart, 112);
		MAKE_PADDED_VAR(float, m_loopEnd, m_loopEnd, 116);
		MAKE_PADDED_VAR(bool, m_isLooped, m_isLooped, 120);
		MAKE_PADDED_VAR(bool, m_randomStart, m_randomStart, 121);
		MAKE_PADDED_VAR(bool, m_stayInMemory, m_stayInMemory, 122);
		MAKE_PADDED_VAR(float, m_showDistance, m_showDistance, 124);
	};
};

class CFXSimpleSpawner {
public:
	union {
	IFXSpawner ifxspawner;
		MAKE_PADDED_VAR(int32_t*, m_slotNames[2], m_slotNames, 88);
		MAKE_PADDED_VAR(int32_t*, m_boneNames[2], m_boneNames, 100);
		MAKE_PADDED_VAR(Vector, m_relativePos, m_relativePos, 112);
		MAKE_PADDED_VAR(EulerAngles, m_relativeRot, m_relativeRot, 128);
	};
};

class CFXSpawnerComponent {
public:
	union {
	IFXSpawner ifxspawner;
		MAKE_PADDED_VAR(Vector, m_relativePosition, m_relativePosition, 96);
		MAKE_PADDED_VAR(EulerAngles, m_relativeRotation, m_relativeRotation, 112);
		MAKE_PADDED_VAR(float, m_percentage, m_percentage, 124);
		MAKE_PADDED_VAR(int32_t, m_componentName, m_componentName, 128);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 132);
		MAKE_PADDED_VAR(bool, m_copyRotation, m_copyRotation, 136);
		MAKE_PADDED_VAR(bool, m_freePositionAxisX, m_freePositionAxisX, 137);
		MAKE_PADDED_VAR(bool, m_freePositionAxisY, m_freePositionAxisY, 138);
		MAKE_PADDED_VAR(bool, m_freePositionAxisZ, m_freePositionAxisZ, 139);
		MAKE_PADDED_VAR(bool, m_freeRotation, m_freeRotation, 140);
		MAKE_PADDED_VAR(bool, m_attach, m_attach, 141);
	};
};

class CFXTrack {
public:
	union {
	CFXBase cfxbase;
		MAKE_PADDED_VAR(intptr_t*, m_trackItems[2], m_trackItems, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
	};
};

class CFXTrackGroup {
public:
	union {
	CFXBase cfxbase;
		MAKE_PADDED_VAR(char*, m_name, m_name, 88);
		MAKE_PADDED_VAR(intptr_t*, m_tracks[2], m_tracks, 100);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 112);
		MAKE_PADDED_VAR(bool, m_isExpanded, m_isExpanded, 113);
		MAKE_PADDED_VAR(Color, m_trackGroupColor, m_trackGroupColor, 114);
		MAKE_PADDED_VAR(int32_t, m_componentName, m_componentName, 120);
	};
};

class CFXTrackItem {
public:
	union {
	CFXBase cfxbase;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
	};
};

class CFXTrackItemCameraShake {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(float, m_effectFullForceRadius, m_effectFullForceRadius, 132);
		MAKE_PADDED_VAR(float, m_effectMaxRadius, m_effectMaxRadius, 136);
		MAKE_PADDED_VAR(int32_t, m_shakeType, m_shakeType, 140);
	};
};

class CFXTrackItemCurveBase {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
	};
};

class CFXTrackItemDisableHDRAdaptation {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
	};
};

class CFXTrackItemEnvironmentModifier {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(Vector, m_lightDirection, m_lightDirection, 96);
		MAKE_PADDED_VAR(Color, m_sunLightDiffuse, m_sunLightDiffuse, 112);
		MAKE_PADDED_VAR(float, m_sunLightBrightness, m_sunLightBrightness, 116);
		MAKE_PADDED_VAR(Color, m_ambientOverride, m_ambientOverride, 120);
		MAKE_PADDED_VAR(float, m_ambientOverrideBrightness, m_ambientOverrideBrightness, 124);
		MAKE_PADDED_VAR(bool, m_overrideBalancing, m_overrideBalancing, 128);
		MAKE_PADDED_VAR(Color, m_parametricBalanceLow, m_parametricBalanceLow, 129);
		MAKE_PADDED_VAR(float, m_parametricBalanceLowScale, m_parametricBalanceLowScale, 136);
		MAKE_PADDED_VAR(Color, m_parametricBalanceMid, m_parametricBalanceMid, 140);
		MAKE_PADDED_VAR(float, m_parametricBalanceMidScale, m_parametricBalanceMidScale, 144);
		MAKE_PADDED_VAR(Color, m_parametricBalanceHigh, m_parametricBalanceHigh, 148);
		MAKE_PADDED_VAR(float, m_parametricBalanceHighScale, m_parametricBalanceHighScale, 152);
	};
};

class CFXTrackItemForceFeedback {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(float, m_highFrequencyMotorSpeed, m_highFrequencyMotorSpeed, 96);
		MAKE_PADDED_VAR(float, m_lowFrequencyMotorSpeed, m_lowFrequencyMotorSpeed, 100);
	};
};

class CFXTrackItemFullscreenBlur {
public:
	union {
	CFXTrackItemCurveBase cfxtrackitemcurvebase;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
	};
};

class CFXTrackItemMaterialOverride {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(IMaterial, m_material, m_material, 104);
		MAKE_PADDED_VAR(bool, m_drawOriginal, m_drawOriginal, 112);
		MAKE_PADDED_VAR(int32_t, m_exclusionTag, m_exclusionTag, 116);
		MAKE_PADDED_VAR(int32_t*, m_includeList[2], m_includeList, 120);
		MAKE_PADDED_VAR(int32_t*, m_excludeList[2], m_excludeList, 132);
		MAKE_PADDED_VAR(bool, m_forceMeshAlternatives, m_forceMeshAlternatives, 144);
	};
};

class CFXTrackItemMovement {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
	};
};

class CFXTrackItemParameterColor {
public:
	union {
	CFXTrackItemCurveBase cfxtrackitemcurvebase;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(bool, m_restoreAtEnd, m_restoreAtEnd, 108);
	};
};

class CFXTrackItemParameterFloat {
public:
	union {
	CFXTrackItemCurveBase cfxtrackitemcurvebase;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(bool, m_restoreAtEnd, m_restoreAtEnd, 108);
		MAKE_PADDED_VAR(bool, m_allComponents, m_allComponents, 109);
	};
};

class CFXTrackItemPause {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
	};
};

class CFXTrackItemPlayItemEffect {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(int32_t, m_category, m_category, 104);
		MAKE_PADDED_VAR(int32_t, m_itemName_optional, m_itemName_optional, 108);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 112);
	};
};

class CFXTrackItemPlayPropertyAnim {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(int32_t, m_propertyAnimationName, m_propertyAnimationName, 96);
		MAKE_PADDED_VAR(uint32_t, m_loopCount, m_loopCount, 100);
		MAKE_PADDED_VAR(bool, m_restoreAtEnd, m_restoreAtEnd, 104);
	};
};

class CFXTrackItemRadialBlur {
public:
	union {
	CFXTrackItemCurveBase cfxtrackitemcurvebase;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(bool, m_trackComponentPosition, m_trackComponentPosition, 104);
		MAKE_PADDED_VAR(float, m_distanceFromCamera, m_distanceFromCamera, 108);
		MAKE_PADDED_VAR(float, m_centerMultiplier, m_centerMultiplier, 112);
	};
};

class CFXTrackItemSetDissolve {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(bool, m_DisableAllDissolves, m_DisableAllDissolves, 96);
	};
};

class CFXWaterSpawner {
public:
	union {
	IFXSpawner ifxspawner;
	};
};

class CGameFastForwardSystem {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CGameplayDLCMounterScripted {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
	};
};

class CGameplayEntityParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
	};
};

class CGameplayFXSurfacePost {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CGenericGrassMask {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(uint32_t, m_maskRes, m_maskRes, 112);
	};
};

class CGestureSystem {
public:
	union {
	CObject cobject;
	};
};

class CGlabalTicketSourceProvider {
public:
	union {
	CObject cobject;
	};
};

class CGlobalWater {
public:
	union {
	CObject cobject;
	};
};

class CGraphBlock {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
	};
};

class CGraphHelperBlock {
public:
	union {
	CGraphBlock cgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
	};
};

class CGrassOccurrenceMap {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CGrassCellMask*, m_cellMasks[2], m_cellMasks, 88);
	};
};

class CGuiConfigResourceFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CGuiManager {
public:
	union {
	CObject cobject;
	};
};

class CGuiObject {
public:
	union {
	CObject cobject;
	};
};

class CGuiScenePlayer {
public:
	union {
	CObject cobject;
	};
};

class CHorsePrediction {
public:
	union {
	CObject cobject;
	};
};

class CHud {
public:
	union {
	CGuiObject cguiobject;
	};
};

class CHudModule {
public:
	union {
	CGuiObject cguiobject;
	};
};

class CHudResource {
public:
	union {
	IGuiResource iguiresource;
		MAKE_PADDED_VAR(intptr_t*, m_resourceBlocks[2], m_resourceBlocks, 112);
		MAKE_PADDED_VAR(int32_t, m_hudClass, m_hudClass, 144);
		MAKE_PADDED_VAR(CSwfResource, m_hudFlashSwf, m_hudFlashSwf, 152);
	};
};

class CHudResourceFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CIndexed2dArray {
public:
	union {
	C2dArray c2darray;
		MAKE_PADDED_VAR(char**, m_headers[12], m_headers, 104);
		MAKE_PADDED_VAR(char***, m_data[12][12], m_data, 116);
	};
};

class CIndirectSlot {
public:
	union {
	ISlot islot;
		MAKE_PADDED_VAR(uint32_t, m_slotIndex, m_slotIndex, 88);
	};
};

class CInstantMountPartySpawnOrganizer {
public:
	union {
	CPartySpawnOrganizer cpartyspawnorganizer;
	};
};

class CInteractionsManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CInventoryDefinition {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 96);
	};
};

class CInventoryInitializerRandom {
public:
	union {
	IInventoryInitializer iinventoryinitializer;
	};
};

class CInventoryInitializerUniform {
public:
	union {
	IInventoryInitializer iinventoryinitializer;
		MAKE_PADDED_VAR(int32_t, m_itemName, m_itemName, 96);
	};
};

class CIsMovingForwardTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(float, m_maxOffAngle, m_maxOffAngle, 88);
		MAKE_PADDED_VAR(bool, m_notMovingForward, m_notMovingForward, 92);
	};
};

class CIsRagdolledTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
	};
};

class CJobTreeFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CJournalInitialEntriesResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 104);
		MAKE_PADDED_VAR(uint32_t, m_regularQuestCount, m_regularQuestCount, 116);
		MAKE_PADDED_VAR(uint32_t, m_monsterHuntQuestCount, m_monsterHuntQuestCount, 120);
		MAKE_PADDED_VAR(uint32_t, m_treasureHuntQuestCount, m_treasureHuntQuestCount, 124);
	};
};

class CJournalManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CJournalRoot {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_objects[2], m_objects, 88);
	};
};

class CLayer {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_entities[32], m_entities, 112);
		MAKE_PADDED_VAR(uint32_t, m_nameCount, m_nameCount, 124);
		MAKE_PADDED_VAR(CSectorData, m_sectorData, m_sectorData, 152);
	};
};

class CLocalizedContent {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(uint32_t, m_index, m_index, 88);
	};
};

class CMaterialBlock {
public:
	union {
	CGraphBlock cgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
	};
};

class CMaterialBlockInterpolator {
public:
	union {
	CMaterialBlock cmaterialblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
	};
};

class CMaterialInstance {
public:
	union {
	IMaterial imaterial;
		MAKE_PADDED_VAR(IMaterial, m_baseMaterial, m_baseMaterial, 112);
		MAKE_PADDED_VAR(bool, m_enableMask, m_enableMask, 140);
	};
};

class CMaterialParameter {
public:
	union {
	CMaterialBlock cmaterialblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(int32_t, m_parameterGroup, m_parameterGroup, 108);
	};
};

class CMaterialParameterColor {
public:
	union {
	CMaterialParameter cmaterialparameter;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(int32_t, m_parameterGroup, m_parameterGroup, 108);
		MAKE_PADDED_VAR(Color, m_color, m_color, 112);
	};
};

class CMaterialParameterCube {
public:
	union {
	CMaterialParameter cmaterialparameter;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(int32_t, m_parameterGroup, m_parameterGroup, 108);
		MAKE_PADDED_VAR(CCubeTexture, m_cube, m_cube, 112);
	};
};

class CMaterialParameterScalar {
public:
	union {
	CMaterialParameter cmaterialparameter;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(int32_t, m_parameterGroup, m_parameterGroup, 108);
		MAKE_PADDED_VAR(float, m_scalar, m_scalar, 112);
	};
};

class CMaterialParameterTexture {
public:
	union {
	CMaterialParameter cmaterialparameter;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(int32_t, m_parameterGroup, m_parameterGroup, 108);
		MAKE_PADDED_VAR(ITexture, m_texture, m_texture, 112);
		MAKE_PADDED_VAR(bool, m_isAtlas, m_isAtlas, 120);
	};
};

class CMaterialParameterTextureArray {
public:
	union {
	CMaterialParameter cmaterialparameter;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(int32_t, m_parameterGroup, m_parameterGroup, 108);
		MAKE_PADDED_VAR(CTextureArray, m_texture, m_texture, 112);
	};
};

class CMaterialParameterVector {
public:
	union {
	CMaterialParameter cmaterialparameter;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(int32_t, m_parameterName, m_parameterName, 104);
		MAKE_PADDED_VAR(int32_t, m_parameterGroup, m_parameterGroup, 108);
		MAKE_PADDED_VAR(Vector, m_vector, m_vector, 112);
		MAKE_PADDED_VAR(bool, m_useInVertexShader, m_useInVertexShader, 128);
	};
};

class CMenu {
public:
	union {
	CGuiObject cguiobject;
	};
};

class CMenuBackgroundEffectParam {
public:
	union {
	IMenuDisplayParam imenudisplayparam;
	};
};

class CMenuBackgroundVideoAliasParam {
public:
	union {
	IMenuBackgroundVideoParam imenubackgroundvideoparam;
		MAKE_PADDED_VAR(int32_t, m_videoAlias, m_videoAlias, 88);
	};
};

class CMenuBackgroundVideoFileParam {
public:
	union {
	IMenuBackgroundVideoParam imenubackgroundvideoparam;
		MAKE_PADDED_VAR(char*, m_videoFile, m_videoFile, 88);
	};
};

class CMenuClearBackgroundVideoParam {
public:
	union {
	IMenuBackgroundVideoParam imenubackgroundvideoparam;
	};
};

class CMenuFlashSwfParam {
public:
	union {
	IMenuFlashParam imenuflashparam;
		MAKE_PADDED_VAR(CSwfResource, m_flashSwfHandle, m_flashSwfHandle, 88);
	};
};

class CMenuFlashSymbolParam {
public:
	union {
	IMenuFlashParam imenuflashparam;
		MAKE_PADDED_VAR(char*, m_flashSymbolName, m_flashSymbolName, 88);
	};
};

class CMenuHudParam {
public:
	union {
	IMenuDisplayParam imenudisplayparam;
		MAKE_PADDED_VAR(bool, m_keepHud, m_keepHud, 88);
	};
};

class CMenuInheritBackgroundVideoParam {
public:
	union {
	IMenuBackgroundVideoParam imenubackgroundvideoparam;
	};
};

class CMenuRenderBackgroundParam {
public:
	union {
	IMenuDisplayParam imenudisplayparam;
		MAKE_PADDED_VAR(bool, m_renderGameWorld, m_renderGameWorld, 88);
	};
};

class CMenuResourceFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CMenuTimeScaleParam {
public:
	union {
	IMenuTimeParam imenutimeparam;
		MAKE_PADDED_VAR(float, m_timeScale, m_timeScale, 88);
		MAKE_PADDED_VAR(bool, m_multiplicative, m_multiplicative, 92);
	};
};

class CMergedWorldGeometry {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_gridSize, m_gridSize, 88);
		MAKE_PADDED_VAR(intptr_t*, m_mergers[2], m_mergers, 92);
	};
};

class CMergedWorldGeometryShadowData {
public:
	union {
	IMergedWorldGeometryData imergedworldgeometrydata;
		MAKE_PADDED_VAR(float, m_minExtractMeshRadius, m_minExtractMeshRadius, 88);
		MAKE_PADDED_VAR(float, m_minMergeMeshRadius, m_minMergeMeshRadius, 92);
		MAKE_PADDED_VAR(uint32_t, m_maxMeshTriangles, m_maxMeshTriangles, 96);
		MAKE_PADDED_VAR(float, m_killZ, m_killZ, 100);
		MAKE_PADDED_VAR(float, m_killAngle, m_killAngle, 104);
		MAKE_PADDED_VAR(bool, m_mergeCascade1, m_mergeCascade1, 108);
		MAKE_PADDED_VAR(bool, m_mergeCascade2, m_mergeCascade2, 109);
		MAKE_PADDED_VAR(bool, m_mergeCascade3, m_mergeCascade3, 110);
		MAKE_PADDED_VAR(bool, m_mergeCascade4, m_mergeCascade4, 111);
		MAKE_PADDED_VAR(float, m_streamingDistance, m_streamingDistance, 112);
		MAKE_PADDED_VAR(bool, m_excludeProxies, m_excludeProxies, 116);
		MAKE_PADDED_VAR(bool, m_useInCascade1, m_useInCascade1, 117);
		MAKE_PADDED_VAR(bool, m_useInCascade2, m_useInCascade2, 118);
		MAKE_PADDED_VAR(bool, m_useInCascade3, m_useInCascade3, 119);
		MAKE_PADDED_VAR(bool, m_useInCascade4, m_useInCascade4, 120);
	};
};

class CMeshTypeResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(IMaterial*, m_materials[2], m_materials, 104);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 128);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 168);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 172);
	};
};

class CMinigame {
public:
	union {
	CObject cobject;
	};
};

class CMonsterParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(int32_t, m_monsterCategory, m_monsterCategory, 112);
		MAKE_PADDED_VAR(int32_t, m_soundMonsterName, m_soundMonsterName, 116);
		MAKE_PADDED_VAR(bool, m_isTeleporting, m_isTeleporting, 120);
		MAKE_PADDED_VAR(bool, m_canBeTargeted, m_canBeTargeted, 121);
		MAKE_PADDED_VAR(bool, m_canBeHitByFists, m_canBeHitByFists, 122);
		MAKE_PADDED_VAR(bool, m_canBeStrafed, m_canBeStrafed, 123);
	};
};

class CMotionExtractionLineCompression {
public:
	union {
	IMotionExtractionCompression imotionextractioncompression;
		MAKE_PADDED_VAR(float, m_eps, m_eps, 88);
		MAKE_PADDED_VAR(uint32_t, m_minKnots, m_minKnots, 92);
	};
};

class CMotionExtractionLineCompression2 {
public:
	union {
	IMotionExtractionCompression imotionextractioncompression;
		MAKE_PADDED_VAR(float, m_eps, m_eps, 88);
		MAKE_PADDED_VAR(uint32_t, m_minKnots, m_minKnots, 92);
		MAKE_PADDED_VAR(int32_t, m_maxKnotsDistance, m_maxKnotsDistance, 96);
	};
};

class CMovableRepresentationCreator {
public:
	union {
	CObject cobject;
	};
};

class CMovementAdjustor {
public:
	union {
	CObject cobject;
	};
};

class CMoveSCAgentSpeed {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 88);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 92);
	};
};

class CMoveSCArrival {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_arrivalDistance, m_arrivalDistance, 88);
		MAKE_PADDED_VAR(float, m_acceptableAngleToGoal, m_acceptableAngleToGoal, 92);
	};
};

class CMoveSCDistanceToDestination {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 88);
		MAKE_PADDED_VAR(bool, m_considerGoalTolerance, m_considerGoalTolerance, 92);
	};
};

class CMoveSCDistanceToGoal {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 88);
	};
};

class CMoveSCDistanceToTarget {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 88);
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 92);
	};
};

class CMoveSCFastSurround {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_usageDelay, m_usageDelay, 88);
		MAKE_PADDED_VAR(float, m_angleDistanceToActivate, m_angleDistanceToActivate, 92);
		MAKE_PADDED_VAR(float, m_speedMinToActivate, m_speedMinToActivate, 96);
		MAKE_PADDED_VAR(float, m_angleDistanceToBreak, m_angleDistanceToBreak, 100);
		MAKE_PADDED_VAR(float, m_speedMinLimitToBreak, m_speedMinLimitToBreak, 104);
	};
};

class CMoveSCGoalChannel {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(bool, m_orientationRequired, m_orientationRequired, 88);
		MAKE_PADDED_VAR(bool, m_headingRequired, m_headingRequired, 89);
	};
};

class CMoveSCHasTargetNodeSetCondition {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class CMoveSCHeadingOutputLength {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_minOutputLength, m_minOutputLength, 88);
		MAKE_PADDED_VAR(bool, m_considerSpeed, m_considerSpeed, 92);
	};
};

class CMoveSCHeadingToGoalAngle {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_acceptableDiff, m_acceptableDiff, 88);
	};
};

class CMoveSCIsGoalHeadingSet {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class CMoveSCIsGoalSet {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class CMoveSCNavigationClearLine {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_destinationForward, m_destinationForward, 88);
		MAKE_PADDED_VAR(float, m_destinationLeft, m_destinationLeft, 92);
		MAKE_PADDED_VAR(float, m_testRadius, m_testRadius, 96);
		MAKE_PADDED_VAR(bool, m_useCharacterOrientation, m_useCharacterOrientation, 100);
		MAKE_PADDED_VAR(bool, m_useSteeringOutput, m_useSteeringOutput, 101);
		MAKE_PADDED_VAR(bool, m_useGoalDirection, m_useGoalDirection, 102);
	};
};

class CMoveSCOrientationMatchHeading {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class CMoveSCRoadMovement {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class CMoveSCScriptedCondition {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class CMoveSCTargetsCount {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(uint32_t, m_count, m_count, 88);
	};
};

class CMoveSCWaitingForNotification {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(int32_t, m_notificationName, m_notificationName, 88);
	};
};

class CMoveSCWalkSideBySide {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(float, m_sideBySideDistance, m_sideBySideDistance, 88);
		MAKE_PADDED_VAR(float, m_distanceLimit, m_distanceLimit, 92);
	};
};

class CMoveSCWasEventTriggered {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class CMoveSCWasNotificationReceived {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(int32_t, m_notificationName, m_notificationName, 88);
	};
};

class CMoveSTApplySteering {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_minSpeed, m_minSpeed, 88);
	};
};

class CMoveSTApplySteeringToPlayerVariables {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTArrive {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(int32_t, m_rotationVar, m_rotationVar, 88);
		MAKE_PADDED_VAR(int32_t, m_rotationEvent, m_rotationEvent, 92);
		MAKE_PADDED_VAR(int32_t, m_rotationNotification, m_rotationNotification, 96);
	};
};

class CMoveSTAvoidObstacles {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_avoidObstaclesImportance, m_avoidObstaclesImportance, 88);
		MAKE_PADDED_VAR(float, m_timeToChooseNextObstacle, m_timeToChooseNextObstacle, 92);
		MAKE_PADDED_VAR(float, m_maxDistanceToObstacle, m_maxDistanceToObstacle, 96);
		MAKE_PADDED_VAR(float, m_furthestImpactTime, m_furthestImpactTime, 100);
		MAKE_PADDED_VAR(bool, m_overrideValues, m_overrideValues, 112);
		MAKE_PADDED_VAR(bool, m_modifyRotation, m_modifyRotation, 113);
		MAKE_PADDED_VAR(bool, m_modifyHeading, m_modifyHeading, 114);
		MAKE_PADDED_VAR(bool, m_modifySpeed, m_modifySpeed, 115);
	};
};

class CMoveSTCollisionResponse {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_headingImportanceMin, m_headingImportanceMin, 88);
		MAKE_PADDED_VAR(float, m_headingImportanceMax, m_headingImportanceMax, 92);
		MAKE_PADDED_VAR(float, m_radiusMult, m_radiusMult, 96);
	};
};

class CMoveSteeringBehaviorFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CMoveSTFaceTargetFacing {
public:
	union {
	IMoveTargetSteeringTask imovetargetsteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
	};
};

class CMoveSTForwardCollisionResponse {
public:
	union {
	CMoveSTCollisionResponse cmovestcollisionresponse;
		MAKE_PADDED_VAR(float, m_headingImportanceMin, m_headingImportanceMin, 88);
		MAKE_PADDED_VAR(float, m_headingImportanceMax, m_headingImportanceMax, 92);
		MAKE_PADDED_VAR(float, m_radiusMult, m_radiusMult, 96);
		MAKE_PADDED_VAR(float, m_probeDistanceInTime, m_probeDistanceInTime, 104);
		MAKE_PADDED_VAR(int32_t, m_crowdThroughVar, m_crowdThroughVar, 108);
	};
};

class CMoveSTHorse {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_horseSlowWalkMult, m_horseSlowWalkMult, 88);
		MAKE_PADDED_VAR(float, m_horseWalkMult, m_horseWalkMult, 92);
		MAKE_PADDED_VAR(float, m_horseTrotMult, m_horseTrotMult, 96);
		MAKE_PADDED_VAR(float, m_horseGallopMult, m_horseGallopMult, 100);
		MAKE_PADDED_VAR(float, m_horseCanterMult, m_horseCanterMult, 104);
	};
};

class CMoveSTKeepAwayTarget {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 88);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 92);
	};
};

class CMoveSTKeepAwayWallsInPathfollow {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_wallDetectionDistance, m_wallDetectionDistance, 88);
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 92);
	};
};

class CMoveSTKeepNavdata {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_slidingRate, m_slidingRate, 88);
		MAKE_PADDED_VAR(float, m_maxSlidingRange, m_maxSlidingRange, 92);
		MAKE_PADDED_VAR(float, m_maxTeleportationRange, m_maxTeleportationRange, 96);
		MAKE_PADDED_VAR(bool, m_applyStandardConditions, m_applyStandardConditions, 100);
	};
};

class CMoveSTMapRotationChangeUsingCustomRotation {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_defaultMaxDirectionChange, m_defaultMaxDirectionChange, 88);
		MAKE_PADDED_VAR(float, m_defaultMaxRotationChange, m_defaultMaxRotationChange, 92);
	};
};

class CMoveSTMatchHeadingOrientation {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(bool, m_limitSpeedOnTurns, m_limitSpeedOnTurns, 88);
		MAKE_PADDED_VAR(float, m_maxAngleNotLimitingSpeed, m_maxAngleNotLimitingSpeed, 92);
		MAKE_PADDED_VAR(float, m_speedLimitOnRotation, m_speedLimitOnRotation, 96);
	};
};

class CMoveSTMoveTightening {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTOnRoad {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 168);
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 172);
		MAKE_PADDED_VAR(float, m_anticipatedPositionDistance, m_anticipatedPositionDistance, 176);
		MAKE_PADDED_VAR(float, m_roadMaxDist, m_roadMaxDist, 180);
	};
};

class CMoveSTResetSteering {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTResolveStucking {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(int32_t, m_signalName, m_signalName, 120);
		MAKE_PADDED_VAR(uint32_t, m_stuckFramesThreshold, m_stuckFramesThreshold, 124);
		MAKE_PADDED_VAR(float, m_distanceThreshold, m_distanceThreshold, 128);
	};
};

class CMoveSTRotate {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTSeparateFromActors {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_separationDistance, m_separationDistance, 88);
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 92);
	};
};

class CMoveSTSetAcceleration {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_acceleration, m_acceleration, 88);
		MAKE_PADDED_VAR(float, m_deceleration, m_deceleration, 92);
	};
};

class CMoveSTSetMaxDirectionChange {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_angle, m_angle, 88);
	};
};

class CMoveSTSetMaxRotationChange {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_angle, m_angle, 88);
	};
};

class CMoveSTSetupRotationChange {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_maxDirectionChange, m_maxDirectionChange, 88);
		MAKE_PADDED_VAR(float, m_maxRotationChange, m_maxRotationChange, 92);
	};
};

class CMoveSTSlide {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTSnapToMinimalVelocity {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_minVelocity, m_minVelocity, 88);
	};
};

class CMoveSTSpeedMultOnPath {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTStep {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(int32_t, m_stepDistanceVar, m_stepDistanceVar, 88);
		MAKE_PADDED_VAR(int32_t, m_stepHeadingVar, m_stepHeadingVar, 92);
		MAKE_PADDED_VAR(int32_t, m_stepEvent, m_stepEvent, 96);
		MAKE_PADDED_VAR(int32_t, m_stepNotification, m_stepNotification, 100);
	};
};

class CMoveSTStop {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTStopOnFreezing {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class CMoveSTStrafeSurroundTarget {
public:
	union {
	IMoveTargetSteeringTask imovetargetsteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(float, m_importance, m_importance, 96);
		MAKE_PADDED_VAR(float, m_acceleration, m_acceleration, 100);
		MAKE_PADDED_VAR(float, m_moveSpeed, m_moveSpeed, 104);
		MAKE_PADDED_VAR(float, m_desiredSeparationAngle, m_desiredSeparationAngle, 108);
		MAKE_PADDED_VAR(float, m_toleranceAngle, m_toleranceAngle, 112);
		MAKE_PADDED_VAR(float, m_smoothAngle, m_smoothAngle, 116);
		MAKE_PADDED_VAR(int32_t, m_strafingRing, m_strafingRing, 120);
		MAKE_PADDED_VAR(bool, m_gravityToSeparationAngle, m_gravityToSeparationAngle, 124);
	};
};

class CMoveSTWalkSideBySide {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_sideBySideDistance, m_sideBySideDistance, 88);
		MAKE_PADDED_VAR(float, m_minApproachDistance, m_minApproachDistance, 92);
		MAKE_PADDED_VAR(float, m_maxApproachDistance, m_maxApproachDistance, 96);
		MAKE_PADDED_VAR(float, m_catchupSpeedMultiplier, m_catchupSpeedMultiplier, 100);
		MAKE_PADDED_VAR(float, m_slowDownSpeedMultiplier, m_slowDownSpeedMultiplier, 104);
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 108);
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 112);
	};
};

class CMultiRangeSpawnStrategy {
public:
	union {
	ISpawnTreeSpawnStrategy ispawntreespawnstrategy;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(bool, m_enablePooling, m_enablePooling, 112);
		MAKE_PADDED_VAR(float, m_overflowPoolRange, m_overflowPoolRange, 116);
		MAKE_PADDED_VAR(float, m_primaryMinSpawnRange, m_primaryMinSpawnRange, 120);
		MAKE_PADDED_VAR(float, m_primaryMaxSpawnRange, m_primaryMaxSpawnRange, 124);
		MAKE_PADDED_VAR(float, m_visibilityTestRange, m_visibilityTestRange, 136);
		MAKE_PADDED_VAR(float, m_primaryMinPoolRange, m_primaryMinPoolRange, 144);
		MAKE_PADDED_VAR(SSpawnStrategyRange*, m_orientedRanges[2], m_orientedRanges, 148);
		MAKE_PADDED_VAR(bool, m_canPoolOnSight, m_canPoolOnSight, 160);
		MAKE_PADDED_VAR(float, m_forcePoolRange, m_forcePoolRange, 164);
		MAKE_PADDED_VAR(float, m_poolDelay, m_poolDelay, 168);
	};
};

class CMultiTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 88);
	};
};

class CNavmesh {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(uint16_t, m_vertexCount, m_vertexCount, 104);
		MAKE_PADDED_VAR(uint16_t, m_triangleCount, m_triangleCount, 106);
		MAKE_PADDED_VAR(uint16_t, m_phantomEdgesCount, m_phantomEdgesCount, 108);
		MAKE_PADDED_VAR(uint16_t, m_binariesVersion, m_binariesVersion, 110);
		MAKE_PADDED_VAR(Vector, m_centralPoint, m_centralPoint, 144);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 160);
		MAKE_PADDED_VAR(Box, m_bbox, m_bbox, 176);
	};
};

class CNavmeshFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CNewNPCStateBase {
public:
	union {
	CScriptableState cscriptablestate;
	};
};

class CNewNPCStateReactingBase {
public:
	union {
	CNewNPCStateBase cnewnpcstatebase;
	};
};

class CNoAnimationCompression {
public:
	union {
	IAnimationCompression ianimationcompression;
	};
};

class CNoCompressedPose {
public:
	union {
	ICompressedPose icompressedpose;
	};
};

class CNodesBinaryStorage {
public:
	union {
	CObject cobject;
	};
};

class COldCommunitySpawnStrategy {
public:
	union {
	IEngineSpawnStrategy ienginespawnstrategy;
		MAKE_PADDED_VAR(float, m_spawnRadius, m_spawnRadius, 96);
		MAKE_PADDED_VAR(float, m_despawnRadius, m_despawnRadius, 100);
	};
};

class CParticleDrawerBillboard {
public:
	union {
	IParticleDrawer iparticledrawer;
	};
};

class CParticleDrawerEmitterOrientation {
public:
	union {
	IParticleDrawer iparticledrawer;
	};
};

class CParticleDrawerMotionBlur {
public:
	union {
	IParticleDrawer iparticledrawer;
		MAKE_PADDED_VAR(float, m_stretchPerVelocity, m_stretchPerVelocity, 88);
		MAKE_PADDED_VAR(float, m_blendStartVelocity, m_blendStartVelocity, 92);
		MAKE_PADDED_VAR(float, m_blendEndVelocity, m_blendEndVelocity, 96);
	};
};

class CParticleDrawerRain {
public:
	union {
	IParticleDrawer iparticledrawer;
		MAKE_PADDED_VAR(float, m_stretchPerVelocity, m_stretchPerVelocity, 88);
		MAKE_PADDED_VAR(float, m_blendStartVelocity, m_blendStartVelocity, 92);
		MAKE_PADDED_VAR(float, m_blendEndVelocity, m_blendEndVelocity, 96);
	};
};

class CParticleDrawerScreen {
public:
	union {
	IParticleDrawer iparticledrawer;
	};
};

class CParticleDrawerSphereAligned {
public:
	union {
	IParticleDrawer iparticledrawer;
		MAKE_PADDED_VAR(bool, m_verticalFixed, m_verticalFixed, 88);
	};
};

class CParticleDrawerTrail {
public:
	union {
	IParticleDrawer iparticledrawer;
		MAKE_PADDED_VAR(float, m_texturesPerUnit, m_texturesPerUnit, 88);
		MAKE_PADDED_VAR(bool, m_dynamicTexCoords, m_dynamicTexCoords, 92);
		MAKE_PADDED_VAR(int32_t, m_minSegmentsPer360Degrees, m_minSegmentsPer360Degrees, 96);
	};
};

class CPauseTimeFunction {
public:
	union {
	IQuestTimeFunction iquesttimefunction;
		MAKE_PADDED_VAR(bool, m_pause, m_pause, 88);
	};
};

class CPlayerStateBase {
public:
	union {
	CScriptableState cscriptablestate;
	};
};

class CPlayerStatePostUseVehicle {
public:
	union {
	CPlayerStateBase cplayerstatebase;
	};
};

class CPlayerStateUseVehicle {
public:
	union {
	CPlayerStateBase cplayerstatebase;
	};
};

class CPlayerTargetPriority {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(float, m_priority, m_priority, 112);
	};
};

class CPopup {
public:
	union {
	CGuiObject cguiobject;
	};
};

class CPopupResourceFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CPopupTimeScaleParam {
public:
	union {
	IPopupTimeParam ipopuptimeparam;
		MAKE_PADDED_VAR(float, m_timeScale, m_timeScale, 88);
		MAKE_PADDED_VAR(bool, m_multiplicative, m_multiplicative, 92);
	};
};

class CPoseCompressionNone {
public:
	union {
	IPoseCompression iposecompression;
	};
};

class CQCActorInventory {
public:
	union {
	IActorConditionType iactorconditiontype;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
	};
};

class CQCActorScriptedCondition {
public:
	union {
	IActorConditionType iactorconditiontype;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
	};
};

class CQCAnimationState {
public:
	union {
	IGameplayEntConditionType igameplayentconditiontype;
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 96);
		MAKE_PADDED_VAR(bool, m_isPlaying, m_isPlaying, 100);
	};
};

class CQCHasAbility {
public:
	union {
	IActorConditionType iactorconditiontype;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
		MAKE_PADDED_VAR(int32_t, m_ability, m_ability, 96);
	};
};

class CQCIsAlive {
public:
	union {
	IActorConditionType iactorconditiontype;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
	};
};

class CQCIsOpenedMenu {
public:
	union {
	IUIConditionType iuiconditiontype;
		MAKE_PADDED_VAR(int32_t, m_menuToBeOpened, m_menuToBeOpened, 96);
	};
};

class CQCIsSentCustomUIEvent {
public:
	union {
	IUIConditionType iuiconditiontype;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 96);
	};
};

class CQuestColorblindModeCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
	};
};

class CQuestCutsceneCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(char*, m_cutsceneName, m_cutsceneName, 96);
		MAKE_PADDED_VAR(int32_t, m_event, m_event, 108);
	};
};

class CQuestEngineTimeWaitForCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(GameTime, m_howLong, m_howLong, 96);
	};
};

class CQuestFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CQuestHiResRealtimeDelayCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(uint32_t, m_hours, m_hours, 96);
		MAKE_PADDED_VAR(uint32_t, m_minutes, m_minutes, 100);
		MAKE_PADDED_VAR(uint32_t, m_seconds, m_seconds, 104);
		MAKE_PADDED_VAR(uint32_t, m_miliseconds, m_miliseconds, 108);
	};
};

class CQuestInCombatCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(bool, m_isInCombat, m_isInCombat, 96);
	};
};

class CQuestLoadingScreenCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(bool, m_isShown, m_isShown, 96);
	};
};

class CQuestMapPinsResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(SQuestMapPinInfo*, m_mappinsInfo[2], m_mappinsInfo, 104);
	};
};

class CQuestPhaseFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CQuestRealtimeDelayCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(GameTime, m_howLong, m_howLong, 96);
	};
};

class CQuestScriptedCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
	};
};

class CQuestsSystem {
public:
	union {
	IGameSystem igamesystem;
		MAKE_PADDED_VAR(intptr_t*, m_runningQuests[2], m_runningQuests, 284);
	};
};

class CQuestTimePeriodCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(GameTime, m_fromTime, m_fromTime, 96);
		MAKE_PADDED_VAR(GameTime, m_toTime, m_toTime, 100);
	};
};

class CQuestTriggerCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_triggerTag, m_triggerTag, 112);
		MAKE_PADDED_VAR(int32_t, m_tag, m_tag, 116);
	};
};

class CQuestWaitForCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(GameTime, m_howLong, m_howLong, 96);
	};
};

class CR4ActionPointCategoriesDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_actionPointCategoriesTableFilePath, m_actionPointCategoriesTableFilePath, 88);
	};
};

class CR4AnimationsCategoriesDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_animationsCategoriesTableFilePath, m_animationsCategoriesTableFilePath, 88);
	};
};

class CR4AttitudesDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_attitudeGroupsTableFilePath, m_attitudeGroupsTableFilePath, 88);
		MAKE_PADDED_VAR(char*, m_attitudesXMLFilePath, m_attitudesXMLFilePath, 104);
	};
};

class CR4BehTreeInstance {
public:
	union {
	CBehTreeInstance cbehtreeinstance;
		MAKE_PADDED_VAR(IScriptable*, m_dependentObjects[2], m_dependentObjects, 208);
		MAKE_PADDED_VAR(intptr_t*, m_onReattachCallback[2], m_onReattachCallback, 220);
	};
};

class CR4CameraDirector {
public:
	union {
	CCameraDirector ccameradirector;
	};
};

class CR4DefinitionsDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_definitionXmlFilePath, m_definitionXmlFilePath, 96);
	};
};

class CR4DefinitionsEntitieTemplatesDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_entitieTemplatesDirectoryPath, m_entitieTemplatesDirectoryPath, 88);
	};
};

class CR4DefinitionsNGPlusDLCMounter {
public:
	union {
	CR4DefinitionsDLCMounter cr4definitionsdlcmounter;
		MAKE_PADDED_VAR(char*, m_definitionXmlFilePath, m_definitionXmlFilePath, 96);
	};
};

class CR4DropPhysicsSetupDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char**, m_entityTemplatePaths[2], m_entityTemplatePaths, 96);
		MAKE_PADDED_VAR(intptr_t*, m_dropSetups[2], m_dropSetups, 108);
	};
};

class CR4EntityExternalAppearanceDLC {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_appearanceToRepleace, m_appearanceToRepleace, 88);
		MAKE_PADDED_VAR(CEntityExternalAppearance, m_entityExternalAppearance, m_entityExternalAppearance, 96);
	};
};

class CR4EntityExternalAppearanceDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char**, m_entityTemplatePaths[2], m_entityTemplatePaths, 104);
		MAKE_PADDED_VAR(intptr_t*, m_entityExternalAppearances[2], m_entityExternalAppearances, 116);
	};
};

class CR4EntityTemplateParamDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char**, m_entityTemplatePaths[2], m_entityTemplatePaths, 96);
		MAKE_PADDED_VAR(intptr_t*, m_entityTemplateParams[2], m_entityTemplateParams, 108);
	};
};

class CR4EntityTemplateSlotDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_baseEntityTemplatePath, m_baseEntityTemplatePath, 96);
		MAKE_PADDED_VAR(char**, m_entityTemplatePaths[2], m_entityTemplatePaths, 108);
		MAKE_PADDED_VAR(intptr_t*, m_entityTemplateSlots[2], m_entityTemplateSlots, 120);
	};
};

class CR4GameResourceFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CR4GuiManager {
public:
	union {
	CGuiManager cguimanager;
	};
};

class CR4GwintManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CR4Hud {
public:
	union {
	CHud chud;
	};
};

class CR4HudModule {
public:
	union {
	CHudModule chudmodule;
	};
};

class CR4JournalDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_journalDirectoryPath, m_journalDirectoryPath, 88);
	};
};

class CR4JournalEntriesDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(CJournalInitialEntriesResource, m_journalEntriesFilePath, m_journalEntriesFilePath, 88);
	};
};

class CR4LootManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CR4LootParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(CR4LootContainerParam*, m_containers[2], m_containers, 112);
		MAKE_PADDED_VAR(uint32_t, m_usedContainersMin, m_usedContainersMin, 124);
		MAKE_PADDED_VAR(uint32_t, m_usedContainersMax, m_usedContainersMax, 128);
		MAKE_PADDED_VAR(bool, m_alwaysPresent, m_alwaysPresent, 132);
	};
};

class CR4Menu {
public:
	union {
	CMenu cmenu;
	};
};

class CR4Popup {
public:
	union {
	CPopup cpopup;
	};
};

class CR4QuestSystem {
public:
	union {
	CQuestsSystem cquestssystem;
		MAKE_PADDED_VAR(intptr_t*, m_runningQuests[2], m_runningQuests, 284);
	};
};

class CR4ReactionManager {
public:
	union {
	CBehTreeReactionManager cbehtreereactionmanager;
		MAKE_PADDED_VAR(intptr_t*, m_reactionEvents[2], m_reactionEvents, 88);
		MAKE_PADDED_VAR(CReactionScene*, m_reactionScens[2], m_reactionScens, 100);
		MAKE_PADDED_VAR(bool, m_rainReactionsEnabled, m_rainReactionsEnabled, 168);
		MAKE_PADDED_VAR(CBehTreeReactionEventData, m_rainEventParams, m_rainEventParams, 176);
	};
};

class CR4ResourceDefinitionsDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_resourceDefinitionXmlFilePath, m_resourceDefinitionXmlFilePath, 88);
	};
};

class CR4RewardsDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_rewordsXmlFilePath, m_rewordsXmlFilePath, 88);
	};
};

class CR4ScaleformContentDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_scaleformDirectoryPath, m_scaleformDirectoryPath, 88);
	};
};

class CR4SceneAnimationsDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_sceneAnimationsBodyFilePath, m_sceneAnimationsBodyFilePath, 88);
		MAKE_PADDED_VAR(char*, m_sceneAnimationsMimicsFilePath, m_sceneAnimationsMimicsFilePath, 100);
		MAKE_PADDED_VAR(char*, m_sceneAnimationsMimicsEmoStatesFilePath, m_sceneAnimationsMimicsEmoStatesFilePath, 112);
	};
};

class CR4Telemetry {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CR4TutorialSystem {
public:
	union {
	IGameSystem igamesystem;
		MAKE_PADDED_VAR(bool, m_needsTickEvent, m_needsTickEvent, 96);
	};
};

class CR4VideoDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_videoDirectoryPath, m_videoDirectoryPath, 88);
	};
};

class CR4VoicetagDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char**, m_entityTemplatePaths[2], m_entityTemplatePaths, 96);
		MAKE_PADDED_VAR(VoicetagAppearancePair*, m_voicetags[2], m_voicetags, 108);
	};
};

class CR4WorldDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(CR4WorldDescriptionDLC*, m_worlds[2], m_worlds, 88);
	};
};

class CReactionAndCondition {
public:
	union {
	IReactionCondition ireactioncondition;
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 88);
	};
};

class CReactionMultiAction {
public:
	union {
	IReactionAction ireactionaction;
		MAKE_PADDED_VAR(intptr_t*, m_actions[2], m_actions, 88);
	};
};

class CReactionOrCondition {
public:
	union {
	IReactionCondition ireactioncondition;
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 88);
	};
};

class CReactionQuestNotification {
public:
	union {
	IReactionAction ireactionaction;
	};
};

class CReactionScript {
public:
	union {
	IReactionAction ireactionaction;
	};
};

class CReactionScriptedCondition {
public:
	union {
	IReactionCondition ireactioncondition;
	};
};

class CReactionSendEvent {
public:
	union {
	IReactionAction ireactionaction;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 88);
	};
};

class CReactionVoiceAction {
public:
	union {
	IReactionAction ireactionaction;
		MAKE_PADDED_VAR(char*, m_voiceset, m_voiceset, 88);
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 100);
	};
};

class CRewardGroupFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CRoadsManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CSaveFileDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(char*, m_starterSaveFilePath, m_starterSaveFilePath, 88);
	};
};

class CScenesTableEntry {
public:
	union {
	CStoryScene m_sceneFile;
		MAKE_PADDED_VAR(char*, m_sceneInput, m_sceneInput, 32);
		MAKE_PADDED_VAR(char*, m_requiredFact, m_requiredFact, 44);
		MAKE_PADDED_VAR(char*, m_forbiddenFact, m_forbiddenFact, 56);
	};
};

class CScriptedAction {
public:
	union {
	IPerformableAction iperformableaction;
	};
};

class CScriptedEntityStateChangeRequest {
public:
	union {
	IEntityStateChangeRequest ientitystatechangerequest;
	};
};

class CSequentialAnimationController {
public:
	union {
	IAnimationController ianimationcontroller;
		MAKE_PADDED_VAR(bool, m_collectEvents, m_collectEvents, 88);
		MAKE_PADDED_VAR(int32_t*, m_animations[2], m_animations, 112);
		MAKE_PADDED_VAR(float*, m_speeds[2], m_speeds, 124);
		MAKE_PADDED_VAR(float, m_startingOffsetRange, m_startingOffsetRange, 136);
		MAKE_PADDED_VAR(float, m_startingOffsetBias, m_startingOffsetBias, 140);
	};
};

class CSetTimeFunction {
public:
	union {
	IQuestTimeFunction iquesttimefunction;
		MAKE_PADDED_VAR(GameTime, m_newTime, m_newTime, 88);
		MAKE_PADDED_VAR(bool, m_callEvents, m_callEvents, 92);
	};
};

class CShiftTimeFunction {
public:
	union {
	IQuestTimeFunction iquesttimefunction;
		MAKE_PADDED_VAR(GameTime, m_timeShift, m_timeShift, 88);
		MAKE_PADDED_VAR(bool, m_callEvents, m_callEvents, 92);
	};
};

class CSimpleSpawnStrategy {
public:
	union {
	ISpawnTreeSpawnStrategy ispawntreespawnstrategy;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(bool, m_enablePooling, m_enablePooling, 112);
		MAKE_PADDED_VAR(float, m_overflowPoolRange, m_overflowPoolRange, 116);
		MAKE_PADDED_VAR(float, m_minSpawnRange, m_minSpawnRange, 120);
		MAKE_PADDED_VAR(float, m_visibilityTestRange, m_visibilityTestRange, 124);
		MAKE_PADDED_VAR(float, m_maxSpawnRange, m_maxSpawnRange, 128);
		MAKE_PADDED_VAR(bool, m_canPoolOnSight, m_canPoolOnSight, 144);
		MAKE_PADDED_VAR(float, m_minPoolRange, m_minPoolRange, 148);
		MAKE_PADDED_VAR(float, m_forcePoolRange, m_forcePoolRange, 152);
	};
};

class CSingleAnimationController {
public:
	union {
	IAnimationController ianimationcontroller;
		MAKE_PADDED_VAR(bool, m_collectEvents, m_collectEvents, 88);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 112);
	};
};

class CSkeletonBoneSlot {
public:
	union {
	ISlot islot;
		MAKE_PADDED_VAR(uint32_t, m_boneIndex, m_boneIndex, 88);
	};
};

class CSoundEntityParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(char*, m_fallTauntEvent, m_fallTauntEvent, 96);
	};
};

class CSoundPotentialField {
public:
	union {
	IPotentialField ipotentialfield;
		MAKE_PADDED_VAR(float, m_radius, m_radius, 96);
	};
};

class CSpawnTreeBaseEntryGenerator {
public:
	union {
	ISpawnTreeLeafNode ispawntreeleafnode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(ISpawnTreeBaseNode*, m_childNodes[2], m_childNodes, 152);
	};
};

class CSpawnTreeDespawnInitializer {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(SSpawnTreeDespawnConfiguration, m_instantDespawnConfiguration, m_instantDespawnConfiguration, 112);
	};
};

class CSpawnTreeEntryList {
public:
	union {
	ISpawnTreeBranch ispawntreebranch;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 144);
	};
};

class CSpawnTreeFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CSpawnTreeInitializerAttitude {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_attitudeGroup, m_attitudeGroup, 112);
	};
};

class CSpawnTreeInitializerCollectDetachedSetup {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(float, m_maximumCollectionDelay, m_maximumCollectionDelay, 112);
		MAKE_PADDED_VAR(bool, m_greedyCollection, m_greedyCollection, 116);
	};
};

class CSpawnTreeInitializerForceCombat {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_targetTag, m_targetTag, 112);
	};
};

class CSpawnTreeInitializerGuardArea {
public:
	union {
	ISpawnTreeInitializerGuardAreaBase ispawntreeinitializerguardareabase;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(float, m_pursuitRange, m_pursuitRange, 112);
		MAKE_PADDED_VAR(int32_t, m_guardAreaTag, m_guardAreaTag, 120);
		MAKE_PADDED_VAR(int32_t, m_pursuitAreaTag, m_pursuitAreaTag, 124);
		MAKE_PADDED_VAR(bool, m_findAreasInEncounter, m_findAreasInEncounter, 128);
	};
};

class CSpawnTreeInitializerIdleAI {
public:
	union {
	ISpawnTreeInitializerAI ispawntreeinitializerai;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
	};
};

class CSpawnTreeInitializerIdleFlightAI {
public:
	union {
	ISpawnTreeInitializerAI ispawntreeinitializerai;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
	};
};

class CSpawnTreeInitializerPersistent {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
	};
};

class CSpawnTreeInitializerRainHandler {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(float, m_ratioWhenRaining, m_ratioWhenRaining, 112);
	};
};

class CSpawnTreeInitializerRiderIdleAI {
public:
	union {
	ISpawnTreeInitializerAI ispawntreeinitializerai;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
	};
};

class CSpawnTreeInitializerSetAppearance {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_appearanceName, m_appearanceName, 112);
		MAKE_PADDED_VAR(bool, m_onlySetOnSpawnAppearance, m_onlySetOnSpawnAppearance, 116);
	};
};

class CSpawnTreeInitializerSpawnLimitMonitor {
public:
	union {
	ISpawnTreeSpawnMonitorBaseInitializer ispawntreespawnmonitorbaseinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(uint16_t, m_totalSpawnLimitMin, m_totalSpawnLimitMin, 112);
		MAKE_PADDED_VAR(uint16_t, m_totalSpawnLimitMax, m_totalSpawnLimitMax, 114);
		MAKE_PADDED_VAR(int32_t, m_creatureDefinition, m_creatureDefinition, 116);
		MAKE_PADDED_VAR(bool, m_resetOnFullRespawn, m_resetOnFullRespawn, 120);
	};
};

class CSpawnTreeNode {
public:
	union {
	ISpawnTreeCompositeNode ispawntreecompositenode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_childNodes[2], m_childNodes, 144);
	};
};

class CSpawnTreeParallelNode {
public:
	union {
	ISpawnTreeCompositeNode ispawntreecompositenode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_childNodes[2], m_childNodes, 144);
	};
};

class CSpawnTreeQuestNode {
public:
	union {
	ISpawnTreeBranch ispawntreebranch;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_spawnPhases[2], m_spawnPhases, 144);
	};
};

class CSpawnTreeQuestPhase {
public:
	union {
	CSpawnTreeNode cspawntreenode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_childNodes[2], m_childNodes, 144);
	};
};

class CSpawnTreeSelectRandomNode {
public:
	union {
	ISpawnTreeCompositeNode ispawntreecompositenode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_childNodes[2], m_childNodes, 144);
		MAKE_PADDED_VAR(GameTime, m_rerollDelay, m_rerollDelay, 160);
	};
};

class CSpawnTreeTimetableEntry {
public:
	union {
	CSpawnTreeEntryList cspawntreeentrylist;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 144);
		MAKE_PADDED_VAR(GameTime, m_begin, m_begin, 160);
		MAKE_PADDED_VAR(GameTime, m_end, m_end, 164);
	};
};

class CSphereAttackRange {
public:
	union {
	CAIAttackRange caiattackrange;
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 88);
		MAKE_PADDED_VAR(float, m_height, m_height, 92);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 96);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 112);
		MAKE_PADDED_VAR(float, m_angleOffset, m_angleOffset, 116);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 120);
		MAKE_PADDED_VAR(float, m_lineOfSightHeight, m_lineOfSightHeight, 124);
		MAKE_PADDED_VAR(bool, m_useHeadOrientation, m_useHeadOrientation, 128);
	};
};

class CSplineAnimationCompression {
public:
	union {
	IAnimationCompression ianimationcompression;
		MAKE_PADDED_VAR(float, m_positionTolerance, m_positionTolerance, 88);
		MAKE_PADDED_VAR(uint16_t, m_positionPolynomialDegree, m_positionPolynomialDegree, 92);
		MAKE_PADDED_VAR(float, m_rotationTolerance, m_rotationTolerance, 96);
		MAKE_PADDED_VAR(uint16_t, m_rotationPolynomialDegree, m_rotationPolynomialDegree, 100);
		MAKE_PADDED_VAR(float, m_scaleTolerance, m_scaleTolerance, 104);
		MAKE_PADDED_VAR(uint16_t, m_scalePolynomialDegree, m_scalePolynomialDegree, 108);
		MAKE_PADDED_VAR(float, m_floatTolerance, m_floatTolerance, 112);
		MAKE_PADDED_VAR(uint16_t, m_floatPolynomialDegree, m_floatPolynomialDegree, 116);
	};
};

class CSteeringFormationLogic {
public:
	union {
	IFormationLogic iformationlogic;
		MAKE_PADDED_VAR(float, m_recomputionDelay, m_recomputionDelay, 88);
		MAKE_PADDED_VAR(float, m_minCatchupDistance, m_minCatchupDistance, 92);
	};
};

class CStorySceneActionMoveTo {
public:
	union {
	CStorySceneActionTeleport cstorysceneactionteleport;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
		MAKE_PADDED_VAR(float, m_allowedDistance, m_allowedDistance, 120);
	};
};

class CStorySceneActionSlide {
public:
	union {
	CStorySceneActionTeleport cstorysceneactionteleport;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
		MAKE_PADDED_VAR(float, m_allowedDistance, m_allowedDistance, 120);
		MAKE_PADDED_VAR(float, m_slideTime, m_slideTime, 128);
	};
};

class CStorySceneChoice {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(intptr_t*, m_choiceLines[2], m_choiceLines, 136);
		MAKE_PADDED_VAR(float, m_timeLimit, m_timeLimit, 148);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 152);
		MAKE_PADDED_VAR(bool, m_isLooped, m_isLooped, 156);
		MAKE_PADDED_VAR(bool, m_questChoice, m_questChoice, 157);
		MAKE_PADDED_VAR(bool, m_showLastLine, m_showLastLine, 158);
		MAKE_PADDED_VAR(bool, m_alternativeUI, m_alternativeUI, 159);
	};
};

class CStorySceneChoiceLineActionScripted {
public:
	union {
	IStorySceneChoiceLineAction istoryscenechoicelineaction;
	};
};

class CStorySceneChoiceLineActionScriptedContentGuard {
public:
	union {
	CStorySceneChoiceLineActionScripted cstoryscenechoicelineactionscripted;
		MAKE_PADDED_VAR(int32_t, m_playGoChunk, m_playGoChunk, 88);
	};
};

class CStorySceneChoiceLineActionStallForContent {
public:
	union {
	CStorySceneChoiceLineActionScripted cstoryscenechoicelineactionscripted;
	};
};

class CStorySceneCutscenePlayer {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(char*, m_descriptionText, m_descriptionText, 136);
	};
};

class CStorySceneDialogsetFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CStorySceneGraphBlock {
public:
	union {
	CGraphBlock cgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
	};
};

class CStrayActorManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CSwarmCellMapFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CSwitchableFoliageResourceFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CTemplateListParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
	};
};

class CTicketConfigurationParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(CTicketSourceConfiguration*, m_tickets[2], m_tickets, 112);
	};
};

class CTimeThresholdStateTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(float, m_maxActivationTime, m_maxActivationTime, 88);
		MAKE_PADDED_VAR(float, m_minActivationTime, m_minActivationTime, 92);
		MAKE_PADDED_VAR(bool, m_resetTime, m_resetTime, 96);
	};
};

class CVegetationBrushFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CVoicesetParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(SVoicesetSlot*, m_slots[2], m_slots, 96);
	};
};

class CVolumePathManager {
public:
	union {
	IGameSystem igamesystem;
	};
};

class CWanderAndWorkEntryGenerator {
public:
	union {
	CSpawnTreeBaseEntryGenerator cspawntreebaseentrygenerator;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(ISpawnTreeBaseNode*, m_childNodes[2], m_childNodes, 152);
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 168);
	};
};

class CWaveletAnimationCompression {
public:
	union {
	IAnimationCompression ianimationcompression;
		MAKE_PADDED_VAR(char, m_quantizationBits, m_quantizationBits, 88);
		MAKE_PADDED_VAR(float, m_positionTolerance, m_positionTolerance, 92);
		MAKE_PADDED_VAR(float, m_rotationTolerance, m_rotationTolerance, 96);
		MAKE_PADDED_VAR(float, m_scaleTolerance, m_scaleTolerance, 100);
	};
};

class CWitcherJournalManager {
public:
	union {
	CJournalManager cjournalmanager;
	};
};

class CWizardDefinitionFactory {
public:
	union {
	IFactory ifactory;
	};
};

class CWorkEntryGenerator {
public:
	union {
	CSpawnTreeBaseEntryGenerator cspawntreebaseentrygenerator;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(ISpawnTreeBaseNode*, m_childNodes[2], m_childNodes, 152);
		MAKE_PADDED_VAR(intptr_t*, m_entries[2], m_entries, 168);
	};
};

class IActorLatentAction {
public:
	union {
	IAIParameters iaiparameters;
	};
};

class IAIActionParameters {
public:
	union {
	CAIParameters caiparameters;
	};
};

class IAITree {
public:
	union {
	IAIParameters iaiparameters;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
	};
};

class IBehTreeConditionalTaskDefinition {
public:
	union {
	IBehTreeTaskDefinition ibehtreetaskdefinition;
		MAKE_PADDED_VAR(int32_t, m_instanceClass, m_instanceClass, 56);
		MAKE_PADDED_VAR(int32_t*, m_listenToGameplayEvents[2], m_listenToGameplayEvents, 80);
		MAKE_PADDED_VAR(int32_t*, m_listenToAnimEvents[2], m_listenToAnimEvents, 92);
	};
};

class IBehTreeDynamicNodeBaseDefinition {
public:
	union {
	IBehTreeNodeSpecialDefinition ibehtreenodespecialdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class IBehTreeMetanodeDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class IBehTreeNodeAtomicFlightDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class IBehTreeNodeAtomicFlyAroundBaseDefinition {
public:
	union {
	IBehTreeNodeAtomicFlightDefinition ibehtreenodeatomicflightdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_stayInGuardArea, m_stayInGuardArea, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distance, m_distance, 108);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceMax, m_distanceMax, 116);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_height, m_height, 124);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_heightMax, m_heightMax, 132);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_randomizationDelay, m_randomizationDelay, 140);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pickTargetDistance, m_pickTargetDistance, 148);
	};
};

class IBehTreeNodeAtomicFlyToBaseDefinition {
public:
	union {
	IBehTreeNodeAtomicFlightDefinition ibehtreenodeatomicflightdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_skipHeightCheck, m_skipHeightCheck, 104);
		MAKE_PADDED_VAR(bool, m_useAbsoluteHeightDifference, m_useAbsoluteHeightDifference, 105);
		MAKE_PADDED_VAR(bool, m_checkDistanceWithoutOffsets, m_checkDistanceWithoutOffsets, 106);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceOffset, m_distanceOffset, 116);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_heightOffset, m_heightOffset, 124);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_min2DDistance, m_min2DDistance, 132);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minHeight, m_minHeight, 140);
	};
};

class IBehTreeNodeCombatTargetSelectionBaseDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class IBehTreeNodeCompositeDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
	};
};

class IBehTreeVoidDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class ICustomCameraScriptedCurveSetPivotDistanceController {
public:
	union {
	ICustomCameraScriptedPivotDistanceController icustomcamerascriptedpivotdistancecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minDist, m_minDist, 96);
		MAKE_PADDED_VAR(float, m_maxDist, m_maxDist, 100);
		MAKE_PADDED_VAR(intptr_t*, m_curveSet[2], m_curveSet, 104);
		MAKE_PADDED_VAR(int32_t*, m_curveNames[2], m_curveNames, 116);
	};
};

class ICustomCameraScriptedCurveSetPivotPositionController {
public:
	union {
	ICustomCameraScriptedPivotPositionController icustomcamerascriptedpivotpositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_offsetZ, m_offsetZ, 96);
		MAKE_PADDED_VAR(float, m_pivotZSmoothTime, m_pivotZSmoothTime, 100);
		MAKE_PADDED_VAR(intptr_t*, m_curveSet[2], m_curveSet, 128);
		MAKE_PADDED_VAR(int32_t*, m_curveNames[2], m_curveNames, 140);
	};
};

class ICustomCameraScriptedCurveSetPositionController {
public:
	union {
	ICustomCameraScriptedPositionController icustomcamerascriptedpositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(bool, m_enableAutoCollisionAvoidance, m_enableAutoCollisionAvoidance, 96);
		MAKE_PADDED_VAR(bool, m_enableScreenSpaceCorrections, m_enableScreenSpaceCorrections, 97);
		MAKE_PADDED_VAR(intptr_t*, m_curveSet[2], m_curveSet, 144);
		MAKE_PADDED_VAR(int32_t*, m_curveNames[2], m_curveNames, 156);
	};
};

class ICustomValAIParameters {
public:
	union {
	CAIRedefinitionParameters cairedefinitionparameters;
	};
};

class IFormationSteeringCondition {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
	};
};

class IFormationSteeringTask {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
	};
};

class IGuiResourceBlock {
public:
	union {
	CGraphBlock cgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
	};
};

class IManageSpeedSteeringTask {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
	};
};

class IMoveSNComposite {
public:
	union {
	IMoveSteeringNode imovesteeringnode;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 96);
	};
};

class IMoveTargetPositionSteeringTask {
public:
	union {
	IMoveTargetSteeringTask imovetargetsteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(int32_t, m_customPosition, m_customPosition, 96);
	};
};

class IParticleInitializer {
public:
	union {
	IParticleModule iparticlemodule;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
	};
};

class IParticleModificator {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
	};
};

class IRiderActionParameters {
public:
	union {
	CAIParameters caiparameters;
	};
};

class ISpawnTreeInitializerIdleSmartAI {
public:
	union {
	CSpawnTreeInitializerIdleAI cspawntreeinitializeridleai;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
		MAKE_PADDED_VAR(ISpawnTreeInitializer, m_subInitializer, m_subInitializer, 136);
	};
};

class SHudDescription {
public:
	union {
	int32_t m_hudName;
		MAKE_PADDED_VAR(CHudResource, m_hudResource, m_hudResource, 8);
	};
};

class SLensFlareElementParameters {
public:
	union {
	CMaterialInstance m_material;
		MAKE_PADDED_VAR(bool, m_isConstRadius, m_isConstRadius, 8);
		MAKE_PADDED_VAR(bool, m_isAligned, m_isAligned, 9);
		MAKE_PADDED_VAR(float, m_centerFadeStart, m_centerFadeStart, 12);
		MAKE_PADDED_VAR(float, m_centerFadeRange, m_centerFadeRange, 16);
		MAKE_PADDED_VAR(uint32_t, m_colorGroupParamsIndex, m_colorGroupParamsIndex, 20);
		MAKE_PADDED_VAR(float, m_alpha, m_alpha, 24);
		MAKE_PADDED_VAR(float, m_size, m_size, 28);
		MAKE_PADDED_VAR(float, m_aspect, m_aspect, 32);
		MAKE_PADDED_VAR(float, m_shift, m_shift, 36);
		MAKE_PADDED_VAR(float, m_pivot, m_pivot, 40);
		MAKE_PADDED_VAR(Color, m_color, m_color, 44);
	};
};

class CAIBaseTree {
public:
	union {
	IAITree iaitree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
	};
};

class CAIPerformCustomWorkTree {
public:
	union {
	IAITree iaitree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
	};
};

class CAIPresetsTemplateParam {
public:
	union {
	CTemplateListParam ctemplatelistparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(ICustomValAIParameters*, m_customValParameters[2], m_customValParameters, 112);
	};
};

class CAIQuestScriptedActionsTree {
public:
	union {
	IAITree iaitree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
		MAKE_PADDED_VAR(IAITree, m_actionTree, m_actionTree, 104);
		MAKE_PADDED_VAR(SBehTreeExternalListenerPtr, m_listener, m_listener, 112);
	};
};

class CAITemplateParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
	};
};

class CAITree {
public:
	union {
	IAITree iaitree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
	};
};

class CAnimAnimsetsParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 96);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 108);
		MAKE_PADDED_VAR(intptr_t*, m_animationSets[2], m_animationSets, 120);
	};
};

class CAnimBehaviorsParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 96);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 108);
		MAKE_PADDED_VAR(intptr_t*, m_slots[2], m_slots, 120);
	};
};

class CAnimMimicParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t*, m_animationSets[2], m_animationSets, 96);
		MAKE_PADDED_VAR(intptr_t*, m_behaviorInstanceSlots[2], m_behaviorInstanceSlots, 108);
	};
};

class CAnimSlotsParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t*, m_animationSlots[2], m_animationSlots, 96);
	};
};

class CApexResource {
public:
	union {
	CMeshTypeResource cmeshtyperesource;
		MAKE_PADDED_VAR(IMaterial*, m_materials[2], m_materials, 104);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 128);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 168);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 172);
		MAKE_PADDED_VAR(char**, m_apexMaterialNames[2], m_apexMaterialNames, 268);
		MAKE_PADDED_VAR(char*, m_apexBinaryAsset[95], m_apexBinaryAsset, 284);
		MAKE_PADDED_VAR(float, m_shadowDistance, m_shadowDistance, 304);
	};
};

class CAttackableArea {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(Vector, m_offset, m_offset, 112);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 128);
		MAKE_PADDED_VAR(float, m_height, m_height, 132);
	};
};

class CAttackRangeParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(intptr_t*, m_attackRanges[2], m_attackRanges, 112);
	};
};

class CAutoEffectsParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(int32_t*, m_autoEffects[2], m_autoEffects, 112);
	};
};

class CBehaviorGraphNode {
public:
	union {
	CGraphBlock cgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphRandomNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float*, m_weights[2], m_weights, 232);
		MAKE_PADDED_VAR(float*, m_cooldowns[2], m_cooldowns, 244);
		MAKE_PADDED_VAR(float*, m_maxStartAnimTime[2], m_maxStartAnimTime, 256);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 320);
	};
};

class CBehaviorGraphRandomSelectNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(bool, m_avoidSelectingPrevious, m_avoidSelectingPrevious, 236);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 272);
	};
};

class CBehaviorGraphTPoseNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphValueNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphVariableBaseNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphVariableNode {
public:
	union {
	CBehaviorGraphVariableBaseNode cbehaviorgraphvariablebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 232);
	};
};

class CBehaviorGraphVectorValueNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphVectorVariableBaseNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphVectorVariableNode {
public:
	union {
	CBehaviorGraphVectorVariableBaseNode cbehaviorgraphvectorvariablebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 232);
	};
};

class CBehaviorGraphWrapNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_minValue, m_minValue, 232);
		MAKE_PADDED_VAR(float, m_maxValue, m_maxValue, 236);
	};
};

class CBehTreeAtomicForgetCombatTargetDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeDynamicNodeDefinition {
public:
	union {
	IBehTreeDynamicNodeBaseDefinition ibehtreedynamicnodebasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(int32_t, m_dynamicEventName, m_dynamicEventName, 104);
		MAKE_PADDED_VAR(int32_t, m_baseTreeVar, m_baseTreeVar, 108);
		MAKE_PADDED_VAR(CAITree, m_baseTree, m_baseTree, 112);
	};
};

class CBehTreeNodeAlreadyAtWorkDefinition {
public:
	union {
	CBehTreeNodeCompleteImmediatelyDefinition cbehtreenodecompleteimmediatelydefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_reportSuccess, m_reportSuccess, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_acceptDistance, m_acceptDistance, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_acceptRotationRequired, m_acceptRotationRequired, 120);
	};
};

class CBehTreeNodeAtomicDamageReactionDefinition {
public:
	union {
	CBehTreeNodeAtomicPlayAnimationEventDefinition cbehtreenodeatomicplayanimationeventdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_shouldForceEvent, m_shouldForceEvent, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_eventStateName, m_eventStateName, 108);
		MAKE_PADDED_VAR(int32_t, m_eventResetTriggerName, m_eventResetTriggerName, 116);
		MAKE_PADDED_VAR(float, m_delay, m_delay, 120);
	};
};

class CBehTreeNodeAtomicFlyAroundDefinition {
public:
	union {
	IBehTreeNodeAtomicFlyAroundBaseDefinition ibehtreenodeatomicflyaroundbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_stayInGuardArea, m_stayInGuardArea, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distance, m_distance, 108);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceMax, m_distanceMax, 116);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_height, m_height, 124);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_heightMax, m_heightMax, 132);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_randomizationDelay, m_randomizationDelay, 140);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pickTargetDistance, m_pickTargetDistance, 148);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 160);
	};
};

class CBehTreeNodeAtomicFlyAroundPositionDefinition {
public:
	union {
	IBehTreeNodeAtomicFlyAroundBaseDefinition ibehtreenodeatomicflyaroundbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_stayInGuardArea, m_stayInGuardArea, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distance, m_distance, 108);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceMax, m_distanceMax, 116);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_height, m_height, 124);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_heightMax, m_heightMax, 132);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_randomizationDelay, m_randomizationDelay, 140);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pickTargetDistance, m_pickTargetDistance, 148);
	};
};

class CBehTreeNodeAtomicFlyToDefinition {
public:
	union {
	IBehTreeNodeAtomicFlyToBaseDefinition ibehtreenodeatomicflytobasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_skipHeightCheck, m_skipHeightCheck, 104);
		MAKE_PADDED_VAR(bool, m_useAbsoluteHeightDifference, m_useAbsoluteHeightDifference, 105);
		MAKE_PADDED_VAR(bool, m_checkDistanceWithoutOffsets, m_checkDistanceWithoutOffsets, 106);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceOffset, m_distanceOffset, 116);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_heightOffset, m_heightOffset, 124);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_min2DDistance, m_min2DDistance, 132);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minHeight, m_minHeight, 140);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 152);
	};
};

class CBehTreeNodeAtomicFlyToPositionDefinition {
public:
	union {
	IBehTreeNodeAtomicFlyToBaseDefinition ibehtreenodeatomicflytobasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_skipHeightCheck, m_skipHeightCheck, 104);
		MAKE_PADDED_VAR(bool, m_useAbsoluteHeightDifference, m_useAbsoluteHeightDifference, 105);
		MAKE_PADDED_VAR(bool, m_checkDistanceWithoutOffsets, m_checkDistanceWithoutOffsets, 106);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceOffset, m_distanceOffset, 116);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_heightOffset, m_heightOffset, 124);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_min2DDistance, m_min2DDistance, 132);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minHeight, m_minHeight, 140);
	};
};

class CBehTreeNodeAtomicLookAtDefinition {
public:
	union {
	CBehTreeNodeCompleteImmediatelyDefinition cbehtreenodecompleteimmediatelydefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_reportSuccess, m_reportSuccess, 104);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 112);
		MAKE_PADDED_VAR(bool, m_player, m_player, 116);
		MAKE_PADDED_VAR(bool, m_actionTarget, m_actionTarget, 117);
		MAKE_PADDED_VAR(bool, m_combatTarget, m_combatTarget, 118);
		MAKE_PADDED_VAR(bool, m_reactionTarget, m_reactionTarget, 119);
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 120);
	};
};

class CBehTreeNodeAtomicRotateToTargetDefinition {
public:
	union {
	CBehTreeNodeBaseRotateToTargetDefinition cbehtreenodebaserotatetotargetdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(bool, m_completeOnTargetReached, m_completeOnTargetReached, 104);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 112);
	};
};

class CBehTreeNodeBaseForcedBehaviorDefinition {
public:
	union {
	IBehTreeDynamicNodeBaseDefinition ibehtreedynamicnodebasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeBaseIdleDynamicRootDefinition {
public:
	union {
	IBehTreeDynamicNodeBaseDefinition ibehtreedynamicnodebasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CAITree, m_defaultIdleTree, m_defaultIdleTree, 104);
	};
};

class CBehTreeNodeChoiceDefinition {
public:
	union {
	IBehTreeNodeCompositeDefinition ibehtreenodecompositedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(bool, m_useScoring, m_useScoring, 120);
		MAKE_PADDED_VAR(bool, m_selectRandom, m_selectRandom, 121);
		MAKE_PADDED_VAR(bool, m_forwardChildrenCompletness, m_forwardChildrenCompletness, 122);
	};
};

class CBehTreeNodeClosestNonFriendlyTargetSelectionDefinition {
public:
	union {
	IBehTreeNodeCombatTargetSelectionBaseDefinition ibehtreenodecombattargetselectionbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(float, m_testDelay, m_testDelay, 104);
	};
};

class CBehTreeNodeCombatFollowFormationDefinition {
public:
	union {
	CBehTreeNodeFollowFormationDefinition cbehtreenodefollowformationdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeCustomWorkDefinition {
public:
	union {
	IBehTreeDynamicNodeBaseDefinition ibehtreedynamicnodebasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeDynamicCombatStyleDefinition {
public:
	union {
	IBehTreeDynamicNodeBaseDefinition ibehtreedynamicnodebasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeEvaluatingChoiceDefinition {
public:
	union {
	CBehTreeNodeChoiceDefinition cbehtreenodechoicedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(bool, m_useScoring, m_useScoring, 120);
		MAKE_PADDED_VAR(bool, m_selectRandom, m_selectRandom, 121);
		MAKE_PADDED_VAR(bool, m_forwardChildrenCompletness, m_forwardChildrenCompletness, 122);
	};
};

class CBehTreeNodeFlightIdleDynamicRootDefinition {
public:
	union {
	CBehTreeNodeBaseIdleDynamicRootDefinition cbehtreenodebaseidledynamicrootdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CAITree, m_defaultIdleTree, m_defaultIdleTree, 104);
	};
};

class CBehTreeNodeForcedBehaviorDefinition {
public:
	union {
	CBehTreeNodeBaseForcedBehaviorDefinition cbehtreenodebaseforcedbehaviordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeIdleDynamicRootDefinition {
public:
	union {
	CBehTreeNodeBaseIdleDynamicRootDefinition cbehtreenodebaseidledynamicrootdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CAITree, m_defaultIdleTree, m_defaultIdleTree, 104);
	};
};

class CBehTreeNodePersistantSequenceDefinition {
public:
	union {
	IBehTreeNodeCompositeDefinition ibehtreenodecompositedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
	};
};

class CBehTreeNodeProbabilitySelectorDefinition {
public:
	union {
	IBehTreeNodeCompositeDefinition ibehtreenodecompositedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(bool, m_testAvailability, m_testAvailability, 120);
		MAKE_PADDED_VAR(char, m_probability0, m_probability0, 121);
		MAKE_PADDED_VAR(char, m_probability1, m_probability1, 122);
		MAKE_PADDED_VAR(char, m_probability2, m_probability2, 123);
		MAKE_PADDED_VAR(char, m_probability3, m_probability3, 124);
		MAKE_PADDED_VAR(char, m_probability4, m_probability4, 125);
		MAKE_PADDED_VAR(char, m_probability5, m_probability5, 126);
	};
};

class CBehTreeNodeRiderForcedBehaviorDefinition {
public:
	union {
	CBehTreeNodeBaseForcedBehaviorDefinition cbehtreenodebaseforcedbehaviordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
	};
};

class CBehTreeNodeRiderIdleDynamicRootDefinition {
public:
	union {
	CBehTreeNodeBaseIdleDynamicRootDefinition cbehtreenodebaseidledynamicrootdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CAITree, m_defaultIdleTree, m_defaultIdleTree, 104);
	};
};

class CBehTreeNodeScriptedActionsListReaderDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(int32_t, m_actionListVar, m_actionListVar, 104);
	};
};

class CBehTreeNodeSelectorDefinition {
public:
	union {
	IBehTreeNodeCompositeDefinition ibehtreenodecompositedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(float, m_checkFrequency, m_checkFrequency, 120);
		MAKE_PADDED_VAR(bool, m_useScoring, m_useScoring, 124);
		MAKE_PADDED_VAR(bool, m_selectRandom, m_selectRandom, 125);
		MAKE_PADDED_VAR(bool, m_forwardChildrenCompletness, m_forwardChildrenCompletness, 126);
	};
};

class CBehTreeNodeSequenceDefinition {
public:
	union {
	IBehTreeNodeCompositeDefinition ibehtreenodecompositedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
	};
};

class CBehTreeNodeSequenceFowardAndBackDefinition {
public:
	union {
	CBehTreeNodeSequenceDefinition cbehtreenodesequencedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(float, m_checkFrequency, m_checkFrequency, 120);
	};
};

class CBehTreeNodeSubtreeDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(int32_t, m_treeName, m_treeName, 104);
		MAKE_PADDED_VAR(CAITree, m_data, m_data, 112);
	};
};

class CBehTreeNodeSubtreeListDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(int32_t, m_listName, m_listName, 104);
	};
};

class CBehTreeNodeTeleportToActionTargetCheckPositionDefinition {
public:
	union {
	CBehTreeNodeTeleportToActionTargetDefinition cbehtreenodeteleporttoactiontargetdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_queryDelay, m_queryDelay, 104);
		MAKE_PADDED_VAR(SPositioningFilter, m_filter, m_filter, 112);
	};
};

class CBehTreeNodeTemplateDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTree, m_res, m_res, 104);
		MAKE_PADDED_VAR(IAIParameters, m_aiParameters, m_aiParameters, 112);
	};
};

class CBehTreeValRes {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(CAITree, m_value, m_value, 8);
	};
};

class CBloodTrailEffect {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(int32_t, m_effect, m_effect, 112);
	};
};

class CCameraCompressedPose {
public:
	union {
	CDefaultCompressedPose2 cdefaultcompressedpose2;
		MAKE_PADDED_VAR(float*, m_tracks[2], m_tracks, 120);
	};
};

class CCCOpItemsFromVirtualContainer {
public:
	union {
	CCCOpVirtualContainerOp cccopvirtualcontainerop;
		MAKE_PADDED_VAR(int32_t, m_virtualContainerTag, m_virtualContainerTag, 88);
		MAKE_PADDED_VAR(bool, m_applyMounts, m_applyMounts, 96);
	};
};

class CCCOpItemsRemoveMatchingVirtualContainer {
public:
	union {
	CCCOpVirtualContainerOp cccopvirtualcontainerop;
		MAKE_PADDED_VAR(int32_t, m_virtualContainerTag, m_virtualContainerTag, 88);
	};
};

class CCCOpItemsToVirtualContainer {
public:
	union {
	CCCOpVirtualContainerOp cccopvirtualcontainerop;
		MAKE_PADDED_VAR(int32_t, m_virtualContainerTag, m_virtualContainerTag, 88);
		MAKE_PADDED_VAR(bool, m_canOverride, m_canOverride, 96);
	};
};

class CCCOpPreserveVirtualContainerContents {
public:
	union {
	CCCOpVirtualContainerOp cccopvirtualcontainerop;
		MAKE_PADDED_VAR(int32_t, m_virtualContainerTag, m_virtualContainerTag, 88);
	};
};

class CCCOpRestoreVirtualContainerContents {
public:
	union {
	CCCOpVirtualContainerOp cccopvirtualcontainerop;
		MAKE_PADDED_VAR(int32_t, m_virtualContainerTag, m_virtualContainerTag, 88);
	};
};

class CCharacterCompressedPose {
public:
	union {
	CDefaultCompressedPose2 cdefaultcompressedpose2;
	};
};

class CCharacterStatsParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(int32_t*, m_abilities[2], m_abilities, 112);
	};
};

class CCombatDataComponentParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(uint32_t, m_attackersPoolMaxSize, m_attackersPoolMaxSize, 112);
	};
};

class CCommentGraphBlock {
public:
	union {
	CGraphHelperBlock cgraphhelperblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
	};
};

class CCompositeSimultaneousTransitionCondition {
public:
	union {
	CMultiTransitionCondition cmultitransitioncondition;
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 88);
	};
};

class CCompositeTransitionCondition {
public:
	union {
	CMultiTransitionCondition cmultitransitioncondition;
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 88);
	};
};

class CCustomCameraAdditivePDC {
public:
	union {
	CCustomCameraDefaultPDC ccustomcameradefaultpdc;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minDist, m_minDist, 96);
		MAKE_PADDED_VAR(float, m_maxDist, m_maxDist, 100);
		MAKE_PADDED_VAR(float, m_dampFactor, m_dampFactor, 108);
		MAKE_PADDED_VAR(float, m_addedValue, m_addedValue, 144);
	};
};

class CCustomCameraBoatPPC {
public:
	union {
	CCustomCameraRopePPC ccustomcameraropeppc;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_offsetZ, m_offsetZ, 96);
		MAKE_PADDED_VAR(float, m_pivotZSmoothTime, m_pivotZSmoothTime, 100);
		MAKE_PADDED_VAR(float, m_dampFactor, m_dampFactor, 132);
		MAKE_PADDED_VAR(float, m_ropeLength, m_ropeLength, 136);
		MAKE_PADDED_VAR(float, m_smoothZ, m_smoothZ, 140);
	};
};

class CDescriptionGraphBlock {
public:
	union {
	CGraphHelperBlock cgraphhelperblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_caption, m_caption, 104);
		MAKE_PADDED_VAR(char*, m_descriptionText, m_descriptionText, 116);
		MAKE_PADDED_VAR(Vector, m_size, m_size, 128);
	};
};

class CDynamicLayer {
public:
	union {
	CLayer clayer;
		MAKE_PADDED_VAR(intptr_t*, m_entities[32], m_entities, 112);
		MAKE_PADDED_VAR(uint32_t, m_nameCount, m_nameCount, 124);
		MAKE_PADDED_VAR(CSectorData, m_sectorData, m_sectorData, 152);
	};
};

class CEdEntitySetupListParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(IEdEntitySetupEffector*, m_effectors[2], m_effectors, 112);
		MAKE_PADDED_VAR(bool, m_detachFromTemplate, m_detachFromTemplate, 124);
	};
};

class CEntityDismemberment {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t*, m_wounds[2], m_wounds, 96);
		MAKE_PADDED_VAR(SDismembermentWoundFilter*, m_disabledWounds[2], m_disabledWounds, 108);
	};
};

class CFistfightMinigame {
public:
	union {
	CMinigame cminigame;
		MAKE_PADDED_VAR(CFistfightOpponent*, m_enemies[2], m_enemies, 88);
		MAKE_PADDED_VAR(int32_t, m_fightAreaTag, m_fightAreaTag, 100);
		MAKE_PADDED_VAR(int32_t, m_playerPosTag, m_playerPosTag, 104);
		MAKE_PADDED_VAR(bool, m_toTheDeath, m_toTheDeath, 108);
		MAKE_PADDED_VAR(bool, m_endsWithBlackscreen, m_endsWithBlackscreen, 109);
	};
};

class CFocusSoundParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(int32_t, m_eventStart, m_eventStart, 112);
		MAKE_PADDED_VAR(int32_t, m_eventStop, m_eventStop, 116);
		MAKE_PADDED_VAR(float, m_hearingAngle, m_hearingAngle, 120);
		MAKE_PADDED_VAR(int32_t, m_visualEffectBoneName, m_visualEffectBoneName, 124);
	};
};

class CFormationCatchupSlotSteeringTask {
public:
	union {
	IFormationSteeringTask iformationsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
		MAKE_PADDED_VAR(float, m_toleranceDistance, m_toleranceDistance, 92);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 96);
		MAKE_PADDED_VAR(float, m_cachupSpeed, m_cachupSpeed, 100);
	};
};

class CFormationDontBackDownSteeringTask {
public:
	union {
	IFormationSteeringTask iformationsteeringtask;
		MAKE_PADDED_VAR(float, m_maxAngleDifference, m_maxAngleDifference, 88);
	};
};

class CFormationDontFallBehindSteeringTask {
public:
	union {
	IFormationSteeringTask iformationsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
		MAKE_PADDED_VAR(float, m_minFallBehindDistance, m_minFallBehindDistance, 92);
		MAKE_PADDED_VAR(float, m_maxFallBehindDistance, m_maxFallBehindDistance, 96);
	};
};

class CFormationFaceSteeringTask {
public:
	union {
	IFormationSteeringTask iformationsteeringtask;
	};
};

class CFormationIsBrokenSteeringCondition {
public:
	union {
	IFormationSteeringCondition iformationsteeringcondition;
		MAKE_PADDED_VAR(float, m_howMuchBroken, m_howMuchBroken, 88);
	};
};

class CFormationIsMovingSteeringCondition {
public:
	union {
	IFormationSteeringCondition iformationsteeringcondition;
	};
};

class CFormationKeepComradesSpeedSteeringTask {
public:
	union {
	IFormationSteeringTask iformationsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
		MAKE_PADDED_VAR(float, m_distanceToComrades, m_distanceToComrades, 92);
	};
};

class CFormationKeepSpeedSteeringTask {
public:
	union {
	IFormationSteeringTask iformationsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
	};
};

class CFXTrackItemBrightnessTint {
public:
	union {
	CFXTrackItemCurveBase cfxtrackitemcurvebase;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(Color, m_color, m_color, 104);
		MAKE_PADDED_VAR(float, m_range, m_range, 108);
	};
};

class CHudModuleResourceBlock {
public:
	union {
	IGuiResourceBlock iguiresourceblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_moduleName, m_moduleName, 104);
		MAKE_PADDED_VAR(int32_t, m_moduleClass, m_moduleClass, 116);
	};
};

class CMoveSNComposite {
public:
	union {
	IMoveSNComposite imovesncomposite;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 96);
		MAKE_PADDED_VAR(char*, m_groupName, m_groupName, 112);
	};
};

class CMoveSTApplyAnimationSteering {
public:
	union {
	CMoveSTApplySteering cmovestapplysteering;
		MAKE_PADDED_VAR(float, m_minSpeed, m_minSpeed, 88);
		MAKE_PADDED_VAR(int32_t, m_rotationVar, m_rotationVar, 96);
	};
};

class CMoveSTFaceTarget {
public:
	union {
	IMoveTargetPositionSteeringTask imovetargetpositionsteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(int32_t, m_customPosition, m_customPosition, 96);
	};
};

class CMoveSTKeepAwayWalls {
public:
	union {
	CMoveSTKeepAwayWallsInPathfollow cmovestkeepawaywallsinpathfollow;
		MAKE_PADDED_VAR(float, m_wallDetectionDistance, m_wallDetectionDistance, 88);
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 92);
	};
};

class CMoveSTKeepDistanceToTarget {
public:
	union {
	IMoveTargetPositionSteeringTask imovetargetpositionsteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(int32_t, m_customPosition, m_customPosition, 96);
		MAKE_PADDED_VAR(float, m_importance, m_importance, 104);
		MAKE_PADDED_VAR(float, m_acceleration, m_acceleration, 108);
		MAKE_PADDED_VAR(float, m_moveSpeed, m_moveSpeed, 112);
		MAKE_PADDED_VAR(float, m_minRange, m_minRange, 116);
		MAKE_PADDED_VAR(float, m_maxRange, m_maxRange, 120);
		MAKE_PADDED_VAR(float, m_tolerance, m_tolerance, 124);
		MAKE_PADDED_VAR(float, m_brakeDistance, m_brakeDistance, 128);
		MAKE_PADDED_VAR(float, m_randomizationFrequency, m_randomizationFrequency, 132);
	};
};

class CMoveSTMaintainRandomSpeed {
public:
	union {
	IManageSpeedSteeringTask imanagespeedsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
		MAKE_PADDED_VAR(float, m_minSpeed, m_minSpeed, 96);
		MAKE_PADDED_VAR(float, m_maxSpeed, m_maxSpeed, 100);
	};
};

class CMoveSTMaintainSpeed {
public:
	union {
	IManageSpeedSteeringTask imanagespeedsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 96);
	};
};

class CMoveSTMaintainTargetSpeed {
public:
	union {
	IManageSpeedSteeringTask imanagespeedsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
		MAKE_PADDED_VAR(float, m_allowedDiffPerSecond, m_allowedDiffPerSecond, 96);
		MAKE_PADDED_VAR(float, m_stopSpeedThreshold, m_stopSpeedThreshold, 100);
		MAKE_PADDED_VAR(float, m_distanceCoefficient, m_distanceCoefficient, 104);
	};
};

class CMoveSTMove {
public:
	union {
	CMoveSTRotate cmovestrotate;
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 88);
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 92);
	};
};

class CMoveSTMoveWithOffset {
public:
	union {
	CMoveSTRotate cmovestrotate;
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 88);
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 92);
		MAKE_PADDED_VAR(float, m_offset, m_offset, 96);
	};
};

class CMoveSTNeverBackDown {
public:
	union {
	IMoveTargetPositionSteeringTask imovetargetpositionsteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(int32_t, m_customPosition, m_customPosition, 96);
		MAKE_PADDED_VAR(float, m_maxAngleFromTarget, m_maxAngleFromTarget, 104);
	};
};

class CMoveSTSaneMaintainTargetSpeed {
public:
	union {
	IManageSpeedSteeringTask imanagespeedsteeringtask;
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 88);
	};
};

class CNewNPCStateIdle {
public:
	union {
	CNewNPCStateReactingBase cnewnpcstatereactingbase;
	};
};

class CParticleDrawerFacingTrail {
public:
	union {
	CParticleDrawerTrail cparticledrawertrail;
		MAKE_PADDED_VAR(float, m_texturesPerUnit, m_texturesPerUnit, 88);
		MAKE_PADDED_VAR(bool, m_dynamicTexCoords, m_dynamicTexCoords, 92);
		MAKE_PADDED_VAR(int32_t, m_minSegmentsPer360Degrees, m_minSegmentsPer360Degrees, 96);
	};
};

class CParticleInitializerCollisionSpawn {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(float, m_probability, m_probability, 128);
		MAKE_PADDED_VAR(int32_t, m_parentEmitterName, m_parentEmitterName, 132);
	};
};

class CParticleInitializerRandomFlip {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(bool, m_randomFlipU, m_randomFlipU, 128);
		MAKE_PADDED_VAR(bool, m_randomFlipV, m_randomFlipV, 129);
	};
};

class CParticleModificatorAlphaByDistance {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(float, m_far, m_far, 128);
		MAKE_PADDED_VAR(float, m_near, m_near, 132);
	};
};

class CParticleModificatorAlphaOverEffect {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
	};
};

class CParticleModificatorCollision {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(int32_t*, m_triggeringCollisionGroupNames[2], m_triggeringCollisionGroupNames, 128);
		MAKE_PADDED_VAR(float, m_dynamicFriction, m_dynamicFriction, 140);
		MAKE_PADDED_VAR(float, m_staticFriction, m_staticFriction, 144);
		MAKE_PADDED_VAR(float, m_restition, m_restition, 148);
		MAKE_PADDED_VAR(float, m_velocityDamp, m_velocityDamp, 152);
		MAKE_PADDED_VAR(bool, m_disableGravity, m_disableGravity, 156);
		MAKE_PADDED_VAR(bool, m_Use_Gpu_Simulation_If_Avaible, m_Use_Gpu_Simulation_If_Avaible, 157);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 160);
		MAKE_PADDED_VAR(bool, m_killWhenCollide, m_killWhenCollide, 164);
	};
};

class CQuestEnterTriggerCondition {
public:
	union {
	CQuestTriggerCondition cquesttriggercondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_triggerTag, m_triggerTag, 112);
		MAKE_PADDED_VAR(int32_t, m_tag, m_tag, 116);
		MAKE_PADDED_VAR(bool, m_onAreaEntry, m_onAreaEntry, 176);
	};
};

class CQuestInsideTriggerCondition {
public:
	union {
	CQuestTriggerCondition cquesttriggercondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_triggerTag, m_triggerTag, 112);
		MAKE_PADDED_VAR(int32_t, m_tag, m_tag, 116);
		MAKE_PADDED_VAR(bool, m_isInside, m_isInside, 176);
	};
};

class CRandomAnimationController {
public:
	union {
	CSequentialAnimationController csequentialanimationcontroller;
		MAKE_PADDED_VAR(bool, m_collectEvents, m_collectEvents, 88);
		MAKE_PADDED_VAR(int32_t*, m_animations[2], m_animations, 112);
		MAKE_PADDED_VAR(float*, m_speeds[2], m_speeds, 124);
		MAKE_PADDED_VAR(float, m_startingOffsetRange, m_startingOffsetRange, 136);
		MAKE_PADDED_VAR(float, m_startingOffsetBias, m_startingOffsetBias, 140);
	};
};

class CRandomWithWeightAnimationController {
public:
	union {
	CSequentialAnimationController csequentialanimationcontroller;
		MAKE_PADDED_VAR(bool, m_collectEvents, m_collectEvents, 88);
		MAKE_PADDED_VAR(int32_t*, m_animations[2], m_animations, 112);
		MAKE_PADDED_VAR(float*, m_speeds[2], m_speeds, 124);
		MAKE_PADDED_VAR(float, m_startingOffsetRange, m_startingOffsetRange, 136);
		MAKE_PADDED_VAR(float, m_startingOffsetBias, m_startingOffsetBias, 140);
		MAKE_PADDED_VAR(float*, m_weights[2], m_weights, 160);
	};
};

class CSpawnTreeConditionNode {
public:
	union {
	CSpawnTreeNode cspawntreenode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t*, m_childNodes[2], m_childNodes, 144);
		MAKE_PADDED_VAR(ISpawnCondition*, m_conditions[2], m_conditions, 176);
	};
};

class IAIActionTree {
public:
	union {
	CAITree caitree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
	};
};

class IFormationFragmentarySteeringTask {
public:
	union {
	IFormationSteeringTask iformationsteeringtask;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 88);
	};
};

class IMoveSTBaseStrafeTarget {
public:
	union {
	IMoveTargetPositionSteeringTask imovetargetpositionsteeringtask;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(int32_t, m_customPosition, m_customPosition, 96);
		MAKE_PADDED_VAR(float, m_importance, m_importance, 104);
		MAKE_PADDED_VAR(float, m_acceleration, m_acceleration, 108);
		MAKE_PADDED_VAR(float, m_moveSpeed, m_moveSpeed, 112);
	};
};

class IRiderActionTree {
public:
	union {
	CAITree caitree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
	};
};

class CAIActionSequence {
public:
	union {
	IAIActionTree iaiactiontree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
		MAKE_PADDED_VAR(IAIActionTree*, m_actions[2], m_actions, 104);
	};
};

class CAIBaseTreeTemplateParam {
public:
	union {
	CAITemplateParam caitemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(CAIBaseTree, m_aiBaseTree, m_aiBaseTree, 112);
	};
};

class CAIDespawnParameters {
public:
	union {
	IAIActionParameters iaiactionparameters;
		MAKE_PADDED_VAR(IAIActionTree, m_despawnAction, m_despawnAction, 72);
	};
};

class CAIDespawnTree {
public:
	union {
	IAIActionTree iaiactiontree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
		MAKE_PADDED_VAR(CAIDespawnParameters, m_params, m_params, 104);
	};
};

class CAIPresetParam {
public:
	union {
	CAITemplateParam caitemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(IAIParameters*, m_redefinitionParameters[2], m_redefinitionParameters, 112);
	};
};

class CApexClothResource {
public:
	union {
	CApexResource capexresource;
		MAKE_PADDED_VAR(IMaterial*, m_materials[2], m_materials, 104);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 128);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 168);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 172);
		MAKE_PADDED_VAR(char**, m_apexMaterialNames[2], m_apexMaterialNames, 268);
		MAKE_PADDED_VAR(char*, m_apexBinaryAsset[95], m_apexBinaryAsset, 284);
		MAKE_PADDED_VAR(float, m_shadowDistance, m_shadowDistance, 304);
		MAKE_PADDED_VAR(float, m_simThickness, m_simThickness, 324);
		MAKE_PADDED_VAR(float, m_simVirtualParticleDensity, m_simVirtualParticleDensity, 328);
		MAKE_PADDED_VAR(bool, m_simDisableCCD, m_simDisableCCD, 332);
		MAKE_PADDED_VAR(float, m_mtlBendingStiffness, m_mtlBendingStiffness, 336);
		MAKE_PADDED_VAR(float, m_mtlShearingStiffness, m_mtlShearingStiffness, 340);
		MAKE_PADDED_VAR(float, m_mtlTetherStiffness, m_mtlTetherStiffness, 344);
		MAKE_PADDED_VAR(float, m_mtlTetherLimit, m_mtlTetherLimit, 348);
		MAKE_PADDED_VAR(float, m_mtlDamping, m_mtlDamping, 352);
		MAKE_PADDED_VAR(float, m_mtlDrag, m_mtlDrag, 356);
		MAKE_PADDED_VAR(bool, m_mtlComDamping, m_mtlComDamping, 360);
		MAKE_PADDED_VAR(float, m_mtlFriction, m_mtlFriction, 364);
		MAKE_PADDED_VAR(float, m_mtlGravityScale, m_mtlGravityScale, 368);
		MAKE_PADDED_VAR(float, m_mtlInertiaScale, m_mtlInertiaScale, 372);
		MAKE_PADDED_VAR(float, m_mtlHardStretchLimitation, m_mtlHardStretchLimitation, 376);
		MAKE_PADDED_VAR(float, m_mtlMaxDistanceBias, m_mtlMaxDistanceBias, 380);
		MAKE_PADDED_VAR(float, m_mtlSelfcollisionThickness, m_mtlSelfcollisionThickness, 384);
		MAKE_PADDED_VAR(float, m_mtlSelfcollisionStiffness, m_mtlSelfcollisionStiffness, 388);
		MAKE_PADDED_VAR(float, m_mtlMassScale, m_mtlMassScale, 392);
		MAKE_PADDED_VAR(intptr_t*, m_graphicalLodLevelInfo[2], m_graphicalLodLevelInfo, 396);
		MAKE_PADDED_VAR(int32_t*, m_boneNames[2], m_boneNames, 408);
		MAKE_PADDED_VAR(Matrix*, m_boneMatrices[2], m_boneMatrices, 420);
		MAKE_PADDED_VAR(uint32_t, m_boneCount, m_boneCount, 432);
	};
};

class CBehaviorGraph2DVariableNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraph2DVectorVariableNode {
public:
	union {
	CBehaviorGraph2DVariableNode cbehaviorgraph2dvariablenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 232);
	};
};

class CBehaviorGraphAnimatedRagdollNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_chanceToGoToRagdoll, m_chanceToGoToRagdoll, 232);
		MAKE_PADDED_VAR(float, m_stateBlendTime, m_stateBlendTime, 236);
		MAKE_PADDED_VAR(Vector2, m_maxFlightTime, m_maxFlightTime, 240);
		MAKE_PADDED_VAR(Vector2, m_initialVelocityBoostZ, m_initialVelocityBoostZ, 248);
		MAKE_PADDED_VAR(float, m_gravity, m_gravity, 256);
		MAKE_PADDED_VAR(float, m_topVerticalVelocity, m_topVerticalVelocity, 260);
		MAKE_PADDED_VAR(int32_t, m_switchAnimatedRagdollToRagdollEvent, m_switchAnimatedRagdollToRagdollEvent, 264);
		MAKE_PADDED_VAR(SApplyRotationIKSolverData, m_poseRotateIK, m_poseRotateIK, 268);
		MAKE_PADDED_VAR(SBehaviorGraphAnimatedRagdollDirDefinition*, m_dirIndices[2], m_dirIndices, 272);
		MAKE_PADDED_VAR(intptr_t*, m_cachedNodes[2], m_cachedNodes, 512);
	};
};

class CBehaviorGraphAnimationManualSlotNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_defaultAnimation, m_defaultAnimation, 240);
	};
};

class CBehaviorGraphConstantVectorValueNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(Vector, m_value, m_value, 240);
	};
};

class CBehaviorGraphContainerNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
	};
};

class CBehaviorGraphEditorValueNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphFloatValueNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_value, m_value, 232);
	};
};

class CBehaviorGraphIdentityPoseNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphInputNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
	};
};

class CBehaviorGraphInternalVariableNode {
public:
	union {
	CBehaviorGraphVariableBaseNode cbehaviorgraphvariablebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_internalVariableName, m_internalVariableName, 232);
	};
};

class CBehaviorGraphInternalVectorVariableNode {
public:
	union {
	CBehaviorGraphVectorVariableBaseNode cbehaviorgraphvectorvariablebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_internalVariableName, m_internalVariableName, 232);
	};
};

class CBehaviorGraphMimicManualSlotNode {
public:
	union {
	CBehaviorGraphAnimationManualSlotNode cbehaviorgraphanimationmanualslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_defaultAnimation, m_defaultAnimation, 240);
	};
};

class CBehaviorGraphMimicRandomNode {
public:
	union {
	CBehaviorGraphRandomNode cbehaviorgraphrandomnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float*, m_weights[2], m_weights, 232);
		MAKE_PADDED_VAR(float*, m_cooldowns[2], m_cooldowns, 244);
		MAKE_PADDED_VAR(float*, m_maxStartAnimTime[2], m_maxStartAnimTime, 256);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 320);
	};
};

class CBehaviorGraphMotionExValueNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animation, m_animation, 256);
	};
};

class CBehaviorGraphOnSlopeMovementNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float*, m_angles[2], m_angles, 232);
		MAKE_PADDED_VAR(float, m_slopeBlendTime, m_slopeBlendTime, 244);
		MAKE_PADDED_VAR(float, m_slopeMaxBlendSpeed, m_slopeMaxBlendSpeed, 248);
		MAKE_PADDED_VAR(bool, m_neverReachBorderValues, m_neverReachBorderValues, 252);
	};
};

class CBehaviorGraphRandomValueNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_value, m_value, 232);
		MAKE_PADDED_VAR(bool, m_rand, m_rand, 236);
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 240);
		MAKE_PADDED_VAR(float, m_min, m_min, 244);
		MAKE_PADDED_VAR(float, m_max, m_max, 248);
		MAKE_PADDED_VAR(bool, m_randDefaultValue, m_randDefaultValue, 252);
	};
};

class CBehaviorGraphStateMachineNode {
public:
	union {
	CBehaviorGraphContainerNode cbehaviorgraphcontainernode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t*, m_globalTransitions[2], m_globalTransitions, 320);
		MAKE_PADDED_VAR(bool, m_resetStateOnExit, m_resetStateOnExit, 344);
		MAKE_PADDED_VAR(bool, m_applySyncTags, m_applySyncTags, 345);
	};
};

class CBehaviorGraphTopLevelNode {
public:
	union {
	CBehaviorGraphContainerNode cbehaviorgraphcontainernode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
	};
};

class CBehTreeNodeArbitratorDefinition {
public:
	union {
	CBehTreeNodeSelectorDefinition cbehtreenodeselectordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(float, m_checkFrequency, m_checkFrequency, 120);
		MAKE_PADDED_VAR(bool, m_useScoring, m_useScoring, 124);
		MAKE_PADDED_VAR(bool, m_selectRandom, m_selectRandom, 125);
		MAKE_PADDED_VAR(bool, m_forwardChildrenCompletness, m_forwardChildrenCompletness, 126);
	};
};

class CBehTreeNodeEvaluatingSelectorDefinition {
public:
	union {
	CBehTreeNodeSelectorDefinition cbehtreenodeselectordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(float, m_checkFrequency, m_checkFrequency, 120);
		MAKE_PADDED_VAR(bool, m_useScoring, m_useScoring, 124);
		MAKE_PADDED_VAR(bool, m_selectRandom, m_selectRandom, 125);
		MAKE_PADDED_VAR(bool, m_forwardChildrenCompletness, m_forwardChildrenCompletness, 126);
	};
};

class CBehTreeNodeReactionSceneAssignmentsDefinition {
public:
	union {
	CBehTreeNodeSelectorDefinition cbehtreenodeselectordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(float, m_checkFrequency, m_checkFrequency, 120);
		MAKE_PADDED_VAR(bool, m_useScoring, m_useScoring, 124);
		MAKE_PADDED_VAR(bool, m_selectRandom, m_selectRandom, 125);
		MAKE_PADDED_VAR(bool, m_forwardChildrenCompletness, m_forwardChildrenCompletness, 126);
	};
};

class CBehTreeNodeSequenceCheckAvailabilityDefinition {
public:
	union {
	CBehTreeNodeSequenceDefinition cbehtreenodesequencedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(bool, m_continueSequenceOnChildFailure, m_continueSequenceOnChildFailure, 120);
		MAKE_PADDED_VAR(bool, m_updateCheckIsAvailable, m_updateCheckIsAvailable, 121);
		MAKE_PADDED_VAR(float, m_updateCheckIsAvailFreq, m_updateCheckIsAvailFreq, 124);
	};
};

class CFormationKeepAwaylLeaderSteeringTask {
public:
	union {
	IFormationFragmentarySteeringTask iformationfragmentarysteeringtask;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 88);
		MAKE_PADDED_VAR(float, m_minLeaderDistance, m_minLeaderDistance, 96);
		MAKE_PADDED_VAR(float, m_noticeLeaderDistance, m_noticeLeaderDistance, 100);
	};
};

class CFormationKeepDistanceToMembersSteeringTask {
public:
	union {
	IFormationFragmentarySteeringTask iformationfragmentarysteeringtask;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 88);
		MAKE_PADDED_VAR(float, m_minDistance, m_minDistance, 96);
		MAKE_PADDED_VAR(float, m_desiredDistance, m_desiredDistance, 100);
	};
};

class CFormationSteerToCenterOfMassSteeringTask {
public:
	union {
	IFormationFragmentarySteeringTask iformationfragmentarysteeringtask;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 88);
	};
};

class CFormationSteerToLeaderSteeringTask {
public:
	union {
	IFormationFragmentarySteeringTask iformationfragmentarysteeringtask;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 88);
	};
};

class CFormationSteerToPathSteeringTask {
public:
	union {
	IFormationFragmentarySteeringTask iformationfragmentarysteeringtask;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 88);
	};
};

class CFormationSteerToSlotSteeringTask {
public:
	union {
	IFormationFragmentarySteeringTask iformationfragmentarysteeringtask;
		MAKE_PADDED_VAR(float, m_importance, m_importance, 88);
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 96);
	};
};

class CMoveSTFinalStep {
public:
	union {
	CMoveSTMove cmovestmove;
		MAKE_PADDED_VAR(float, m_headingImportance, m_headingImportance, 88);
		MAKE_PADDED_VAR(float, m_speedImportance, m_speedImportance, 92);
		MAKE_PADDED_VAR(bool, m_ignoreGoalToleranceForFinalLocation, m_ignoreGoalToleranceForFinalLocation, 96);
		MAKE_PADDED_VAR(int32_t, m_finalStepPositionVar, m_finalStepPositionVar, 100);
		MAKE_PADDED_VAR(int32_t, m_finalStepDistanceVar, m_finalStepDistanceVar, 104);
		MAKE_PADDED_VAR(int32_t, m_finalStepActiveVar, m_finalStepActiveVar, 108);
		MAKE_PADDED_VAR(int32_t, m_finalStepEvent, m_finalStepEvent, 112);
		MAKE_PADDED_VAR(int32_t, m_finalStepActivationNotification, m_finalStepActivationNotification, 116);
		MAKE_PADDED_VAR(int32_t, m_finalStepDeactivationNotification, m_finalStepDeactivationNotification, 120);
		MAKE_PADDED_VAR(float, m_finalStepDeactivationNotificationTimeOut, m_finalStepDeactivationNotificationTimeOut, 124);
		MAKE_PADDED_VAR(float, m_finalStepDistanceLimit, m_finalStepDistanceLimit, 128);
	};
};

class CMoveSTStrafeTargetOneWay {
public:
	union {
	IMoveSTBaseStrafeTarget imovestbasestrafetarget;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(int32_t, m_customPosition, m_customPosition, 96);
		MAKE_PADDED_VAR(float, m_importance, m_importance, 104);
		MAKE_PADDED_VAR(float, m_acceleration, m_acceleration, 108);
		MAKE_PADDED_VAR(float, m_moveSpeed, m_moveSpeed, 112);
		MAKE_PADDED_VAR(bool, m_left, m_left, 136);
	};
};

class CMoveSTStrafeTargetRandomly {
public:
	union {
	IMoveSTBaseStrafeTarget imovestbasestrafetarget;
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 88);
		MAKE_PADDED_VAR(int32_t, m_customPosition, m_customPosition, 96);
		MAKE_PADDED_VAR(float, m_importance, m_importance, 104);
		MAKE_PADDED_VAR(float, m_acceleration, m_acceleration, 108);
		MAKE_PADDED_VAR(float, m_moveSpeed, m_moveSpeed, 112);
		MAKE_PADDED_VAR(float, m_randomizationFrequency, m_randomizationFrequency, 136);
		MAKE_PADDED_VAR(float, m_outputRandomizationPower, m_outputRandomizationPower, 140);
		MAKE_PADDED_VAR(float, m_changeDirectionOnBlockDelay, m_changeDirectionOnBlockDelay, 144);
	};
};

class CBehaviorGraph2DMultiVariablesNode {
public:
	union {
	CBehaviorGraph2DVariableNode cbehaviorgraph2dvariablenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_variableName1, m_variableName1, 232);
		MAKE_PADDED_VAR(int32_t, m_variableName2, m_variableName2, 236);
	};
};

class CBehaviorGraphMimicRandomBlendNode {
public:
	union {
	CBehaviorGraphMimicRandomNode cbehaviorgraphmimicrandomnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float*, m_weights[2], m_weights, 232);
		MAKE_PADDED_VAR(float*, m_cooldowns[2], m_cooldowns, 244);
		MAKE_PADDED_VAR(float*, m_maxStartAnimTime[2], m_maxStartAnimTime, 256);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 320);
		MAKE_PADDED_VAR(float, m_blendDuration, m_blendDuration, 336);
	};
};

class CBehTreeNodeReactionSceneFlowControllerDefinition {
public:
	union {
	CBehTreeNodeSequenceCheckAvailabilityDefinition cbehtreenodesequencecheckavailabilitydefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 104);
		MAKE_PADDED_VAR(bool, m_continueSequenceOnChildFailure, m_continueSequenceOnChildFailure, 120);
		MAKE_PADDED_VAR(bool, m_updateCheckIsAvailable, m_updateCheckIsAvailable, 121);
		MAKE_PADDED_VAR(float, m_updateCheckIsAvailFreq, m_updateCheckIsAvailFreq, 124);
	};
};

class ApertureDofParams {
public:
	union {
	intptr_t m_aperture;
		MAKE_PADDED_VAR(float, m_focalLength, m_focalLength, 4);
		MAKE_PADDED_VAR(float, m_distance, m_distance, 8);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 12);
	};
};

class CAbstractStorySceneLine {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(int32_t, m_voicetag, m_voicetag, 136);
		MAKE_PADDED_VAR(intptr_t, m_comment, m_comment, 140);
		MAKE_PADDED_VAR(int32_t, m_speakingTo, m_speakingTo, 144);
	};
};

class CActivateStoryPhase {
public:
	union {
	IQuestSpawnsetAction iquestspawnsetaction;
		MAKE_PADDED_VAR(intptr_t, m_spawnset, m_spawnset, 96);
		MAKE_PADDED_VAR(int32_t, m_phase, m_phase, 128);
		MAKE_PADDED_VAR(char*, m_streamingPartition, m_streamingPartition, 132);
	};
};

class CAIMinigameParamsWristWrestling {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_hotSpotMinWidth, m_hotSpotMinWidth, 88);
		MAKE_PADDED_VAR(int32_t, m_hotSpotMaxWidth, m_hotSpotMaxWidth, 92);
		MAKE_PADDED_VAR(intptr_t, m_gameDifficulty, m_gameDifficulty, 96);
	};
};

class CAIProfile {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t*, m_reactions[2], m_reactions, 96);
		MAKE_PADDED_VAR(intptr_t, m_senseVisionParams, m_senseVisionParams, 112);
		MAKE_PADDED_VAR(intptr_t, m_senseAbsoluteParams, m_senseAbsoluteParams, 120);
		MAKE_PADDED_VAR(int32_t, m_attitudeGroup, m_attitudeGroup, 128);
		MAKE_PADDED_VAR(intptr_t, m_minigameParams, m_minigameParams, 136);
	};
};

class CAIReaction {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_fieldName, m_fieldName, 88);
		MAKE_PADDED_VAR(float, m_cooldownTime, m_cooldownTime, 92);
		MAKE_PADDED_VAR(intptr_t, m_visibilityTest, m_visibilityTest, 96);
		MAKE_PADDED_VAR(SAIReactionRange, m_range, m_range, 100);
		MAKE_PADDED_VAR(intptr_t, m_factTest, m_factTest, 124);
		MAKE_PADDED_VAR(intptr_t, m_condition, m_condition, 152);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 160);
	};
};

class CAIStorageRiderData {
public:
	union {
	IScriptable iscriptable;
		MAKE_PADDED_VAR(intptr_t, m_sharedParams, m_sharedParams, 48);
		MAKE_PADDED_VAR(IAIActionTree, m_horseScriptedActionTree, m_horseScriptedActionTree, 56);
		MAKE_PADDED_VAR(bool, m_ridingManagerMountError, m_ridingManagerMountError, 64);
		MAKE_PADDED_VAR(intptr_t, m_ridingManagerCurrentTask, m_ridingManagerCurrentTask, 68);
		MAKE_PADDED_VAR(intptr_t, m_ridingManagerDismountType, m_ridingManagerDismountType, 76);
		MAKE_PADDED_VAR(bool, m_ridingManagerInstantMount, m_ridingManagerInstantMount, 80);
	};
};

class CAlternativeDisplayName {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(intptr_t, m_altName, m_altName, 112);
		MAKE_PADDED_VAR(char*, m_factID, m_factID, 116);
	};
};

class CAnimatedComponentPhysicsRepresentation {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_ragdoll, m_ragdoll, 88);
		MAKE_PADDED_VAR(bool, m_ragdollAlwaysEnabled, m_ragdollAlwaysEnabled, 96);
		MAKE_PADDED_VAR(bool, m_allowRagdollInCutscene, m_allowRagdollInCutscene, 97);
		MAKE_PADDED_VAR(intptr_t, m_ragdollCollisionType, m_ragdollCollisionType, 112);
	};
};

class CAnimationBufferBitwiseCompressed {
public:
	union {
	IAnimationBuffer ianimationbuffer;
		MAKE_PADDED_VAR(uint32_t, m_version, m_version, 16);
		MAKE_PADDED_VAR(SAnimationBufferBitwiseCompressedBoneTrack*, m_bones[129], m_bones, 20);
		MAKE_PADDED_VAR(SAnimationBufferBitwiseCompressedData*, m_tracks[129], m_tracks, 32);
		MAKE_PADDED_VAR(int8_t*, m_data[129], m_data, 44);
		MAKE_PADDED_VAR(int8_t*, m_fallbackData[129], m_fallbackData, 56);
		MAKE_PADDED_VAR(intptr_t, m_deferredData, m_deferredData, 72);
		MAKE_PADDED_VAR(intptr_t, m_streamingOption, m_streamingOption, 228);
		MAKE_PADDED_VAR(uint32_t, m_nonStreamableBones, m_nonStreamableBones, 232);
		MAKE_PADDED_VAR(intptr_t, m_orientationCompressionMethod, m_orientationCompressionMethod, 236);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 240);
		MAKE_PADDED_VAR(uint32_t, m_numFrames, m_numFrames, 244);
		MAKE_PADDED_VAR(float, m_dt, m_dt, 248);
		MAKE_PADDED_VAR(bool, m_hasRefIKBones, m_hasRefIKBones, 252);
	};
};

class CAnimationFpsCompression {
public:
	union {
	IAnimationCompression ianimationcompression;
		MAKE_PADDED_VAR(intptr_t, m_fps, m_fps, 88);
	};
};

class CAnimConstraintsParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t, m_graph, m_graph, 96);
	};
};

class CAnimDangleConstraint_NobleDressFix {
public:
	union {
	IAnimDangleConstraint ianimdangleconstraint;
		MAKE_PADDED_VAR(char*, m_boneNameA, m_boneNameA, 88);
		MAKE_PADDED_VAR(char*, m_boneNameB, m_boneNameB, 100);
		MAKE_PADDED_VAR(intptr_t, m_boneAxisA, m_boneAxisA, 112);
		MAKE_PADDED_VAR(intptr_t, m_boneAxisB, m_boneAxisB, 116);
		MAKE_PADDED_VAR(float, m_boneValueA, m_boneValueA, 120);
		MAKE_PADDED_VAR(float, m_boneValueB, m_boneValueB, 124);
	};
};

class CAnimDef {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_animName, m_animName, 88);
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 96);
		MAKE_PADDED_VAR(SAnimShift*, m_shifts[2], m_shifts, 104);
		MAKE_PADDED_VAR(Matrix, m_totalTransform, m_totalTransform, 128);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 192);
	};
};

class CAnimGlobalParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t, m_skeletonType, m_skeletonType, 104);
		MAKE_PADDED_VAR(int32_t, m_defaultAnimationName, m_defaultAnimationName, 108);
		MAKE_PADDED_VAR(int32_t, m_customMimicsFilter_Full, m_customMimicsFilter_Full, 112);
		MAKE_PADDED_VAR(int32_t, m_customMimicsFilter_Lipsync, m_customMimicsFilter_Lipsync, 116);
		MAKE_PADDED_VAR(int32_t, m_animTag, m_animTag, 120);
		MAKE_PADDED_VAR(int32_t, m_sfxTag, m_sfxTag, 124);
	};
};

class CAnimPointCloudLookAtParam {
public:
	union {
	ISkeletalAnimationSetEntryParam iskeletalanimationsetentryparam;
		MAKE_PADDED_VAR(int32_t, m_boneName, m_boneName, 16);
		MAKE_PADDED_VAR(Vector, m_directionLS, m_directionLS, 32);
		MAKE_PADDED_VAR(Matrix, m_boneMSInv, m_boneMSInv, 48);
		MAKE_PADDED_VAR(intptr_t, m_boneTransMSInv, m_boneTransMSInv, 112);
		MAKE_PADDED_VAR(Vector*, m_pointsBS[2], m_pointsBS, 172);
		MAKE_PADDED_VAR(int32_t**, m_pointToTriMapping[2][2], m_pointToTriMapping, 184);
		MAKE_PADDED_VAR(intptr_t*, m_refPose[133], m_refPose, 196);
	};
};

class CAnimSkeletalDangleConstraint {
public:
	union {
	IAnimDangleConstraint ianimdangleconstraint;
		MAKE_PADDED_VAR(intptr_t, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
	};
};

class CAnimSkeletalMultiDangleConstraint {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(intptr_t, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
	};
};

class CAnimSkeletalMultiDangleConstraint_Painter {
public:
	union {
	CAnimSkeletalMultiDangleConstraint canimskeletalmultidangleconstraint;
		MAKE_PADDED_VAR(intptr_t, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
	};
};

class CApexDestructionResource {
public:
	union {
	CApexResource capexresource;
		MAKE_PADDED_VAR(IMaterial*, m_materials[2], m_materials, 104);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 128);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 168);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 172);
		MAKE_PADDED_VAR(char**, m_apexMaterialNames[2], m_apexMaterialNames, 268);
		MAKE_PADDED_VAR(char*, m_apexBinaryAsset[95], m_apexBinaryAsset, 284);
		MAKE_PADDED_VAR(float, m_shadowDistance, m_shadowDistance, 304);
		MAKE_PADDED_VAR(uint32_t, m_maxDepth, m_maxDepth, 320);
		MAKE_PADDED_VAR(uint32_t, m_originalMaxDepth, m_originalMaxDepth, 324);
		MAKE_PADDED_VAR(uint32_t, m_supportDepth, m_supportDepth, 328);
		MAKE_PADDED_VAR(float, m_neighborPadding, m_neighborPadding, 332);
		MAKE_PADDED_VAR(uint32_t, m_initialAllowance, m_initialAllowance, 336);
		MAKE_PADDED_VAR(bool, m_formExtendedStructures, m_formExtendedStructures, 340);
		MAKE_PADDED_VAR(bool, m_useAssetSupport, m_useAssetSupport, 341);
		MAKE_PADDED_VAR(bool, m_useWorldSupport, m_useWorldSupport, 342);
		MAKE_PADDED_VAR(int32_t*, m_chunkDepthMaterials[2], m_chunkDepthMaterials, 344);
		MAKE_PADDED_VAR(float, m_unfracturedDensityScaler, m_unfracturedDensityScaler, 356);
		MAKE_PADDED_VAR(float, m_fracturedDensityScaler, m_fracturedDensityScaler, 360);
		MAKE_PADDED_VAR(intptr_t, m_fractureSoundEvent, m_fractureSoundEvent, 364);
		MAKE_PADDED_VAR(int32_t, m_fxName, m_fxName, 376);
	};
};

class CAreaEnvironmentParams {
public:
	union {
	intptr_t m_m_finalColorBalance;
		MAKE_PADDED_VAR(intptr_t, m_m_sharpen, m_m_sharpen, 1032);
		MAKE_PADDED_VAR(intptr_t, m_m_paintEffect, m_m_paintEffect, 1328);
		MAKE_PADDED_VAR(intptr_t, m_m_ssaoNV, m_m_ssaoNV, 1384);
		MAKE_PADDED_VAR(intptr_t, m_m_ssaoMS, m_m_ssaoMS, 1872);
		MAKE_PADDED_VAR(intptr_t, m_m_globalLight, m_m_globalLight, 2272);
		MAKE_PADDED_VAR(intptr_t, m_m_interiorFallback, m_m_interiorFallback, 4512);
		MAKE_PADDED_VAR(intptr_t, m_m_speedTree, m_m_speedTree, 4712);
		MAKE_PADDED_VAR(intptr_t, m_m_toneMapping, m_m_toneMapping, 6256);
		MAKE_PADDED_VAR(intptr_t, m_m_bloomNew, m_m_bloomNew, 7080);
		MAKE_PADDED_VAR(intptr_t, m_m_globalFog, m_m_globalFog, 7664);
		MAKE_PADDED_VAR(intptr_t, m_m_sky, m_m_sky, 9256);
		MAKE_PADDED_VAR(intptr_t, m_m_depthOfField, m_m_depthOfField, 10128);
		MAKE_PADDED_VAR(intptr_t, m_m_colorModTransparency, m_m_colorModTransparency, 10392);
		MAKE_PADDED_VAR(intptr_t, m_m_shadows, m_m_shadows, 11056);
		MAKE_PADDED_VAR(intptr_t, m_m_water, m_m_water, 11352);
		MAKE_PADDED_VAR(intptr_t, m_m_colorGroups, m_m_colorGroups, 11840);
		MAKE_PADDED_VAR(intptr_t, m_m_flareColorGroups, m_m_flareColorGroups, 14848);
		MAKE_PADDED_VAR(intptr_t, m_m_sunAndMoonParams, m_m_sunAndMoonParams, 16424);
		MAKE_PADDED_VAR(intptr_t, m_m_windParams, m_m_windParams, 17504);
		MAKE_PADDED_VAR(intptr_t, m_m_gameplayEffects, m_m_gameplayEffects, 17608);
		MAKE_PADDED_VAR(intptr_t, m_m_motionBlur, m_m_motionBlur, 17808);
		MAKE_PADDED_VAR(intptr_t, m_m_cameraLightsSetup, m_m_cameraLightsSetup, 17864);
		MAKE_PADDED_VAR(intptr_t, m_m_dialogLightParams, m_m_dialogLightParams, 20432);
	};
};

class CBaseCreatureEntry {
public:
	union {
	ISpawnTreeLeafNode ispawntreeleafnode;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(ISpawnTreeInitializer*, m_initializers[2], m_initializers, 144);
		MAKE_PADDED_VAR(int32_t, m_quantityMin, m_quantityMin, 156);
		MAKE_PADDED_VAR(int32_t, m_quantityMax, m_quantityMax, 160);
		MAKE_PADDED_VAR(float, m_spawnInterval, m_spawnInterval, 164);
		MAKE_PADDED_VAR(float, m_waveDelay, m_waveDelay, 168);
		MAKE_PADDED_VAR(float, m_waveCounterHitAtDeathRatio, m_waveCounterHitAtDeathRatio, 172);
		MAKE_PADDED_VAR(bool, m_randomizeRotation, m_randomizeRotation, 176);
		MAKE_PADDED_VAR(int32_t, m_group, m_group, 180);
		MAKE_PADDED_VAR(intptr_t, m_baseSpawner, m_baseSpawner, 184);
		MAKE_PADDED_VAR(GameTime, m_recalculateDelay, m_recalculateDelay, 248);
	};
};

class CBaseDamage {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(Vector, m_hitLocation, m_hitLocation, 96);
		MAKE_PADDED_VAR(Vector, m_momentum, m_momentum, 112);
		MAKE_PADDED_VAR(IScriptable, m_causer, m_causer, 128);
		MAKE_PADDED_VAR(intptr_t, m_attacker, m_attacker, 136);
		MAKE_PADDED_VAR(intptr_t, m_victim, m_victim, 144);
		MAKE_PADDED_VAR(bool, m_hitReactionAnimRequested, m_hitReactionAnimRequested, 152);
	};
};

class CBehaviorConstraintVectorObject {
public:
	union {
	IBehaviorConstraintObject ibehaviorconstraintobject;
		MAKE_PADDED_VAR(Vector, m_localPositionOffset, m_localPositionOffset, 96);
		MAKE_PADDED_VAR(EulerAngles, m_localRotationOffset, m_localRotationOffset, 112);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetPositionNode, m_cachedTargetPositionNode, 208);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetRotationNode, m_cachedTargetRotationNode, 216);
	};
};

class CBehaviorGraph {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_defaultStateMachine, m_defaultStateMachine, 144);
		MAKE_PADDED_VAR(intptr_t*, m_stateMachines[2], m_stateMachines, 152);
		MAKE_PADDED_VAR(int32_t*, m_customTrackNames[2], m_customTrackNames, 520);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 532);
		MAKE_PADDED_VAR(bool, m_sourceDataRemoved, m_sourceDataRemoved, 533);
		MAKE_PADDED_VAR(intptr_t*, m_poseSlots[2], m_poseSlots, 536);
		MAKE_PADDED_VAR(intptr_t*, m_animSlots[2], m_animSlots, 548);
	};
};

class CBehaviorGraphAimingWithIKNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_aimingBaseBoneName, m_aimingBaseBoneName, 240);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_ik, m_ik, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 512);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 520);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtTargetDirMSInputNode, m_cachedLookAtTargetDirMSInputNode, 528);
	};
};

class CBehaviorGraphAnimationManualWithInputSlotNode {
public:
	union {
	CBehaviorGraphAnimationManualSlotNode cbehaviorgraphanimationmanualslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_defaultAnimation, m_defaultAnimation, 240);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 424);
	};
};

class CBehaviorGraphAnimationNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
	};
};

class CBehaviorGraphAnimationSwitchNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 232);
		MAKE_PADDED_VAR(uint32_t, m_inputNum, m_inputNum, 236);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_synchronizeOnSwitch, m_synchronizeOnSwitch, 244);
		MAKE_PADDED_VAR(intptr_t, m_syncOnSwitchMethod, m_syncOnSwitchMethod, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 368);
		MAKE_PADDED_VAR(intptr_t, m_cachedBlendTimeValueNode, m_cachedBlendTimeValueNode, 376);
	};
};

class CBehaviorGraphAnimEventTrackNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 256);
	};
};

class CBehaviorGraphBaseNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
	};
};

class CBehaviorGraphBlend3Node {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 232);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 240);
		MAKE_PADDED_VAR(bool, m_useCustomSpace, m_useCustomSpace, 248);
		MAKE_PADDED_VAR(bool, m_takeEventsFromMostImportantInput, m_takeEventsFromMostImportantInput, 249);
		MAKE_PADDED_VAR(Vector, m_A, m_A, 256);
		MAKE_PADDED_VAR(Vector, m_B, m_B, 272);
		MAKE_PADDED_VAR(Vector, m_C, m_C, 288);
		MAKE_PADDED_VAR(Vector, m_D, m_D, 304);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode_A, m_cachedInputNode_A, 384);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode_B, m_cachedInputNode_B, 392);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode_C, m_cachedInputNode_C, 400);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode_D, m_cachedInputNode_D, 408);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode_A, m_cachedControlVariableNode_A, 416);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode_B, m_cachedControlVariableNode_B, 424);
	};
};

class CBehaviorGraphBlendAdditiveNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_biasValue, m_biasValue, 232);
		MAKE_PADDED_VAR(float, m_scaleValue, m_scaleValue, 236);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 240);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 248);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 296);
		MAKE_PADDED_VAR(intptr_t, m_cachedAddedInputNode, m_cachedAddedInputNode, 304);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 312);
	};
};

class CBehaviorGraphBlendMultipleCondNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float*, m_inputValues[2], m_inputValues, 232);
		MAKE_PADDED_VAR(intptr_t, m_syncMethodAnimation, m_syncMethodAnimation, 248);
		MAKE_PADDED_VAR(intptr_t, m_weightDampMethod, m_weightDampMethod, 256);
		MAKE_PADDED_VAR(intptr_t, m_controlValueDampMethod, m_controlValueDampMethod, 264);
		MAKE_PADDED_VAR(intptr_t*, m_transitions[2], m_transitions, 272);
		MAKE_PADDED_VAR(bool, m_synchronizeAnimations, m_synchronizeAnimations, 284);
		MAKE_PADDED_VAR(bool, m_useTransitions, m_useTransitions, 285);
		MAKE_PADDED_VAR(bool, m_useWeightDamp, m_useWeightDamp, 286);
		MAKE_PADDED_VAR(bool, m_useControlValueDamp, m_useControlValueDamp, 287);
		MAKE_PADDED_VAR(bool, m_radialBlending, m_radialBlending, 288);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 440);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 456);
	};
};

class CBehaviorGraphBlendMultipleCondNode_Transition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 88);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 96);
		MAKE_PADDED_VAR(float, m_transitionDuration, m_transitionDuration, 104);
		MAKE_PADDED_VAR(bool, m_blockEvents, m_blockEvents, 108);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 109);
		MAKE_PADDED_VAR(intptr_t, m_condition, m_condition, 112);
	};
};

class CBehaviorGraphBlendMultipleNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float*, m_inputValues[2], m_inputValues, 232);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 256);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 264);
		MAKE_PADDED_VAR(float, m_minControlValue, m_minControlValue, 272);
		MAKE_PADDED_VAR(float, m_maxControlValue, m_maxControlValue, 276);
		MAKE_PADDED_VAR(bool, m_radialBlending, m_radialBlending, 280);
		MAKE_PADDED_VAR(bool, m_takeEventsFromMoreImportantInput, m_takeEventsFromMoreImportantInput, 281);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 384);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 400);
		MAKE_PADDED_VAR(intptr_t, m_cachedMinControlValue, m_cachedMinControlValue, 408);
		MAKE_PADDED_VAR(intptr_t, m_cachedMaxControlValue, m_cachedMaxControlValue, 416);
	};
};

class CBehaviorGraphBlendNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_firstInputValue, m_firstInputValue, 232);
		MAKE_PADDED_VAR(float, m_secondInputValue, m_secondInputValue, 236);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 240);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 248);
		MAKE_PADDED_VAR(bool, m_takeEventsFromMostImportantInput, m_takeEventsFromMostImportantInput, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 296);
		MAKE_PADDED_VAR(intptr_t, m_cachedSecondInputNode, m_cachedSecondInputNode, 304);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 312);
	};
};

class CBehaviorGraphBlendOverrideNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 240);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 248);
		MAKE_PADDED_VAR(bool, m_synchronizeInputFromParent, m_synchronizeInputFromParent, 256);
		MAKE_PADDED_VAR(bool, m_synchronizeOverrideFromParent, m_synchronizeOverrideFromParent, 257);
		MAKE_PADDED_VAR(intptr_t, m_syncMethodFromParent, m_syncMethodFromParent, 264);
		MAKE_PADDED_VAR(intptr_t, m_lodAtOrAboveLevel, m_lodAtOrAboveLevel, 272);
		MAKE_PADDED_VAR(SBehaviorGraphBoneInfo*, m_Bones_with_weights[2], m_Bones_with_weights, 276);
		MAKE_PADDED_VAR(bool, m_alwaysActiveOverrideInput, m_alwaysActiveOverrideInput, 288);
		MAKE_PADDED_VAR(bool, m_getDeltaMotionFromOverride, m_getDeltaMotionFromOverride, 289);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 328);
		MAKE_PADDED_VAR(intptr_t, m_cachedOverrideInputNode, m_cachedOverrideInputNode, 336);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 344);
	};
};

class CBehaviorGraphBlockEventNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_eventToBlock, m_eventToBlock, 240);
	};
};

class CBehaviorGraphCameraControllerNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_valueScale, m_valueScale, 260);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 264);
		MAKE_PADDED_VAR(intptr_t, m_axis, m_axis, 276);
		MAKE_PADDED_VAR(bool, m_clamp, m_clamp, 280);
		MAKE_PADDED_VAR(float, m_angleMin, m_angleMin, 284);
		MAKE_PADDED_VAR(float, m_angleMax, m_angleMax, 288);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlInputNode, m_cachedControlInputNode, 424);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightInputNode, m_cachedWeightInputNode, 432);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlAngleInputNode, m_cachedControlAngleInputNode, 440);
	};
};

class CBehaviorGraphChangeDirectionNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(bool, m_anyDirection, m_anyDirection, 232);
		MAKE_PADDED_VAR(float*, m_angles[2], m_angles, 236);
		MAKE_PADDED_VAR(float, m_overshootAngle, m_overshootAngle, 248);
		MAKE_PADDED_VAR(bool, m_updateOnlyOnActivation, m_updateOnlyOnActivation, 252);
		MAKE_PADDED_VAR(float, m_dirBlendTime, m_dirBlendTime, 256);
		MAKE_PADDED_VAR(float, m_dirMaxBlendSpeed, m_dirMaxBlendSpeed, 260);
		MAKE_PADDED_VAR(int32_t, m_requestedFacingDirectionWSVariableName, m_requestedFacingDirectionWSVariableName, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedFacingDirectionWSValueNode, m_cachedRequestedFacingDirectionWSValueNode, 320);
	};
};

class CBehaviorGraphCharacterMotionToWSNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
	};
};

class CBehaviorGraphCharacterRotationNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(Vector, m_axis, m_axis, 240);
		MAKE_PADDED_VAR(float, m_rotationSpeedMultiplier, m_rotationSpeedMultiplier, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleVariableNode, m_cachedAngleVariableNode, 312);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 320);
		MAKE_PADDED_VAR(intptr_t, m_cachedBiasVariableNode, m_cachedBiasVariableNode, 328);
		MAKE_PADDED_VAR(intptr_t, m_cachedMaxAngleVariableNode, m_cachedMaxAngleVariableNode, 336);
	};
};

class CBehaviorGraphChooseRecoverFromRagdollAnimNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_mode, m_mode, 240);
		MAKE_PADDED_VAR(float, m_additionalOneFrameRotationYaw, m_additionalOneFrameRotationYaw, 244);
		MAKE_PADDED_VAR(int32_t, m_pelvisBone, m_pelvisBone, 248);
		MAKE_PADDED_VAR(intptr_t, m_pelvisBoneFrontAxis, m_pelvisBoneFrontAxis, 252);
		MAKE_PADDED_VAR(bool, m_pelvisBoneFrontAxisInverted, m_pelvisBoneFrontAxisInverted, 256);
		MAKE_PADDED_VAR(float, m_pelvisBoneWeight, m_pelvisBoneWeight, 260);
		MAKE_PADDED_VAR(int32_t, m_shoulderBone, m_shoulderBone, 264);
		MAKE_PADDED_VAR(intptr_t, m_shoulderBoneFrontAxis, m_shoulderBoneFrontAxis, 268);
		MAKE_PADDED_VAR(bool, m_shoulderBoneFrontAxisInverted, m_shoulderBoneFrontAxisInverted, 272);
		MAKE_PADDED_VAR(float, m_shoulderBoneWeight, m_shoulderBoneWeight, 276);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 392);
	};
};

class CBehaviorGraphComparatorNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_firstValue, m_firstValue, 232);
		MAKE_PADDED_VAR(float, m_secondValue, m_secondValue, 236);
		MAKE_PADDED_VAR(float, m_trueValue, m_trueValue, 240);
		MAKE_PADDED_VAR(float, m_falseValue, m_falseValue, 244);
		MAKE_PADDED_VAR(intptr_t, m_operation, m_operation, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedSecondInputNode, m_cachedSecondInputNode, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedTrueInputNode, m_cachedTrueInputNode, 288);
		MAKE_PADDED_VAR(intptr_t, m_cachedFalseInputNode, m_cachedFalseInputNode, 296);
	};
};

class CBehaviorGraphConstraintCameraDialog {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_cameraBone, m_cameraBone, 248);
		MAKE_PADDED_VAR(float, m_referenceZ, m_referenceZ, 260);
		MAKE_PADDED_VAR(intptr_t, m_cachedSourceTargetValueNode, m_cachedSourceTargetValueNode, 344);
		MAKE_PADDED_VAR(intptr_t, m_cachedDestTargetValueNode, m_cachedDestTargetValueNode, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 360);
	};
};

class CBehaviorGraphConstraintNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_dampType, m_dampType, 496);
		MAKE_PADDED_VAR(bool, m_useDampCurve, m_useDampCurve, 500);
		MAKE_PADDED_VAR(intptr_t, m_dampCurve, m_dampCurve, 504);
		MAKE_PADDED_VAR(float, m_dampTimeAxisScale, m_dampTimeAxisScale, 512);
		MAKE_PADDED_VAR(float, m_dampTimeSpeed, m_dampTimeSpeed, 516);
		MAKE_PADDED_VAR(bool, m_useFollowCurve, m_useFollowCurve, 520);
		MAKE_PADDED_VAR(intptr_t, m_followCurve, m_followCurve, 528);
		MAKE_PADDED_VAR(float, m_followTimeAxisScale, m_followTimeAxisScale, 536);
		MAKE_PADDED_VAR(float, m_followTimeSpeed, m_followTimeSpeed, 540);
		MAKE_PADDED_VAR(intptr_t, m_targetObject, m_targetObject, 544);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 560);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationValueNode, m_cachedDurationValueNode, 568);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationFollowValueNode, m_cachedDurationFollowValueNode, 576);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedDampValueNode, m_cachedSpeedDampValueNode, 584);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedFollowValueNode, m_cachedSpeedFollowValueNode, 592);
	};
};

class CBehaviorGraphConstraintNodeBoneInterpolate {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneInputA, m_boneInputA, 248);
		MAKE_PADDED_VAR(char*, m_boneInputB, m_boneInputB, 260);
		MAKE_PADDED_VAR(char*, m_boneOutput, m_boneOutput, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 352);
	};
};

class CBehaviorGraphConstraintNodeCameraFocus {
public:
	union {
	CBehaviorGraphConstraintNode cbehaviorgraphconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_dampType, m_dampType, 496);
		MAKE_PADDED_VAR(bool, m_useDampCurve, m_useDampCurve, 500);
		MAKE_PADDED_VAR(intptr_t, m_dampCurve, m_dampCurve, 504);
		MAKE_PADDED_VAR(float, m_dampTimeAxisScale, m_dampTimeAxisScale, 512);
		MAKE_PADDED_VAR(float, m_dampTimeSpeed, m_dampTimeSpeed, 516);
		MAKE_PADDED_VAR(bool, m_useFollowCurve, m_useFollowCurve, 520);
		MAKE_PADDED_VAR(intptr_t, m_followCurve, m_followCurve, 528);
		MAKE_PADDED_VAR(float, m_followTimeAxisScale, m_followTimeAxisScale, 536);
		MAKE_PADDED_VAR(float, m_followTimeSpeed, m_followTimeSpeed, 540);
		MAKE_PADDED_VAR(intptr_t, m_targetObject, m_targetObject, 544);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 560);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationValueNode, m_cachedDurationValueNode, 568);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationFollowValueNode, m_cachedDurationFollowValueNode, 576);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedDampValueNode, m_cachedSpeedDampValueNode, 584);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedFollowValueNode, m_cachedSpeedFollowValueNode, 592);
		MAKE_PADDED_VAR(char*, m_bone, m_bone, 600);
		MAKE_PADDED_VAR(char*, m_bone2, m_bone2, 612);
	};
};

class CBehaviorGraphConstraintNodeCameraLookAt {
public:
	union {
	CBehaviorGraphConstraintNode cbehaviorgraphconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_dampType, m_dampType, 496);
		MAKE_PADDED_VAR(bool, m_useDampCurve, m_useDampCurve, 500);
		MAKE_PADDED_VAR(intptr_t, m_dampCurve, m_dampCurve, 504);
		MAKE_PADDED_VAR(float, m_dampTimeAxisScale, m_dampTimeAxisScale, 512);
		MAKE_PADDED_VAR(float, m_dampTimeSpeed, m_dampTimeSpeed, 516);
		MAKE_PADDED_VAR(bool, m_useFollowCurve, m_useFollowCurve, 520);
		MAKE_PADDED_VAR(intptr_t, m_followCurve, m_followCurve, 528);
		MAKE_PADDED_VAR(float, m_followTimeAxisScale, m_followTimeAxisScale, 536);
		MAKE_PADDED_VAR(float, m_followTimeSpeed, m_followTimeSpeed, 540);
		MAKE_PADDED_VAR(intptr_t, m_targetObject, m_targetObject, 544);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 560);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationValueNode, m_cachedDurationValueNode, 568);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationFollowValueNode, m_cachedDurationFollowValueNode, 576);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedDampValueNode, m_cachedSpeedDampValueNode, 584);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedFollowValueNode, m_cachedSpeedFollowValueNode, 592);
		MAKE_PADDED_VAR(char*, m_bone, m_bone, 600);
	};
};

class CBehaviorGraphConstraintNodeChain {
public:
	union {
	CBehaviorGraphConstraintNode cbehaviorgraphconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_dampType, m_dampType, 496);
		MAKE_PADDED_VAR(bool, m_useDampCurve, m_useDampCurve, 500);
		MAKE_PADDED_VAR(intptr_t, m_dampCurve, m_dampCurve, 504);
		MAKE_PADDED_VAR(float, m_dampTimeAxisScale, m_dampTimeAxisScale, 512);
		MAKE_PADDED_VAR(float, m_dampTimeSpeed, m_dampTimeSpeed, 516);
		MAKE_PADDED_VAR(bool, m_useFollowCurve, m_useFollowCurve, 520);
		MAKE_PADDED_VAR(intptr_t, m_followCurve, m_followCurve, 528);
		MAKE_PADDED_VAR(float, m_followTimeAxisScale, m_followTimeAxisScale, 536);
		MAKE_PADDED_VAR(float, m_followTimeSpeed, m_followTimeSpeed, 540);
		MAKE_PADDED_VAR(intptr_t, m_targetObject, m_targetObject, 544);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 560);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationValueNode, m_cachedDurationValueNode, 568);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationFollowValueNode, m_cachedDurationFollowValueNode, 576);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedDampValueNode, m_cachedSpeedDampValueNode, 584);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedFollowValueNode, m_cachedSpeedFollowValueNode, 592);
		MAKE_PADDED_VAR(char*, m_startBone, m_startBone, 600);
		MAKE_PADDED_VAR(char*, m_endBone, m_endBone, 612);
		MAKE_PADDED_VAR(int32_t, m_solverSteps, m_solverSteps, 624);
		MAKE_PADDED_VAR(intptr_t, m_forwardEndBoneDir, m_forwardEndBoneDir, 628);
	};
};

class CBehaviorGraphConstraintNodeLookAt {
public:
	union {
	CBehaviorGraphConstraintNode cbehaviorgraphconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_dampType, m_dampType, 496);
		MAKE_PADDED_VAR(bool, m_useDampCurve, m_useDampCurve, 500);
		MAKE_PADDED_VAR(intptr_t, m_dampCurve, m_dampCurve, 504);
		MAKE_PADDED_VAR(float, m_dampTimeAxisScale, m_dampTimeAxisScale, 512);
		MAKE_PADDED_VAR(float, m_dampTimeSpeed, m_dampTimeSpeed, 516);
		MAKE_PADDED_VAR(bool, m_useFollowCurve, m_useFollowCurve, 520);
		MAKE_PADDED_VAR(intptr_t, m_followCurve, m_followCurve, 528);
		MAKE_PADDED_VAR(float, m_followTimeAxisScale, m_followTimeAxisScale, 536);
		MAKE_PADDED_VAR(float, m_followTimeSpeed, m_followTimeSpeed, 540);
		MAKE_PADDED_VAR(intptr_t, m_targetObject, m_targetObject, 544);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 560);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationValueNode, m_cachedDurationValueNode, 568);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationFollowValueNode, m_cachedDurationFollowValueNode, 576);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedDampValueNode, m_cachedSpeedDampValueNode, 584);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedFollowValueNode, m_cachedSpeedFollowValueNode, 592);
		MAKE_PADDED_VAR(char*, m_bone, m_bone, 604);
		MAKE_PADDED_VAR(char*, m_parentBone, m_parentBone, 616);
		MAKE_PADDED_VAR(intptr_t, m_forwardDir, m_forwardDir, 628);
		MAKE_PADDED_VAR(Vector, m_localOffset, m_localOffset, 640);
		MAKE_PADDED_VAR(float, m_horizontalLimitAngle, m_horizontalLimitAngle, 656);
		MAKE_PADDED_VAR(float, m_upLimitAngle, m_upLimitAngle, 660);
		MAKE_PADDED_VAR(float, m_downLimitAngle, m_downLimitAngle, 664);
		MAKE_PADDED_VAR(intptr_t, m_rangeLimitUpAxis, m_rangeLimitUpAxis, 668);
		MAKE_PADDED_VAR(intptr_t, m_solverType, m_solverType, 672);
		MAKE_PADDED_VAR(float, m_deadZone, m_deadZone, 676);
		MAKE_PADDED_VAR(float, m_deadZoneDist, m_deadZoneDist, 680);
	};
};

class CBehaviorGraphConstraintNodeParentAlign {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_bone, m_bone, 248);
		MAKE_PADDED_VAR(char*, m_parentBone, m_parentBone, 260);
		MAKE_PADDED_VAR(bool, m_localSpace, m_localSpace, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 344);
	};
};

class CBehaviorGraphConstraintNodeRoll {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 288);
	};
};

class CBehaviorGraphConstraintReset {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_bone, m_bone, 248);
		MAKE_PADDED_VAR(bool, m_translation, m_translation, 260);
		MAKE_PADDED_VAR(bool, m_rotation, m_rotation, 261);
		MAKE_PADDED_VAR(bool, m_scale, m_scale, 262);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 296);
	};
};

class CBehaviorGraphControlRigNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_eHandLeftW, m_eHandLeftW, 248);
		MAKE_PADDED_VAR(int32_t, m_eHandLeftP, m_eHandLeftP, 252);
		MAKE_PADDED_VAR(int32_t, m_eHandLeftWeaponOffset, m_eHandLeftWeaponOffset, 256);
		MAKE_PADDED_VAR(bool, m_offsetHandLeft, m_offsetHandLeft, 260);
		MAKE_PADDED_VAR(int32_t, m_eHandRightW, m_eHandRightW, 264);
		MAKE_PADDED_VAR(int32_t, m_eHandRightP, m_eHandRightP, 268);
		MAKE_PADDED_VAR(int32_t, m_eHandRightWeaponOffset, m_eHandRightWeaponOffset, 272);
		MAKE_PADDED_VAR(bool, m_offsetHandRight, m_offsetHandRight, 276);
	};
};

class CBehaviorGraphConvertSyncInfoIntoCyclesNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_numCycles, m_numCycles, 240);
	};
};

class CBehaviorGraphCutsceneControllerNode {
public:
	union {
	CBehaviorGraphAnimationNode cbehaviorgraphanimationnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(bool, m_mimicControl, m_mimicControl, 488);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 576);
	};
};

class CBehaviorGraphDampVectorValueNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(Vector, m_increaseSpeed, m_increaseSpeed, 240);
		MAKE_PADDED_VAR(Vector, m_decreaseSpeed, m_decreaseSpeed, 256);
		MAKE_PADDED_VAR(bool, m_absolute, m_absolute, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 328);
		MAKE_PADDED_VAR(intptr_t, m_cachedIncSpeedNode, m_cachedIncSpeedNode, 336);
		MAKE_PADDED_VAR(intptr_t, m_cachedDecSpeedNode, m_cachedDecSpeedNode, 344);
	};
};

class CBehaviorGraphDirectionalMovementNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_groupCount, m_groupCount, 240);
		MAKE_PADDED_VAR(int32_t, m_animsPerGroup, m_animsPerGroup, 244);
		MAKE_PADDED_VAR(float, m_groupDir, m_groupDir, 248);
		MAKE_PADDED_VAR(float, m_firstGroupDirOffset, m_firstGroupDirOffset, 252);
		MAKE_PADDED_VAR(float, m_keepInCurrentGroupAngle, m_keepInCurrentGroupAngle, 256);
		MAKE_PADDED_VAR(float, m_findGroupDirOffset, m_findGroupDirOffset, 260);
		MAKE_PADDED_VAR(float, m_extraOverlapAngle, m_extraOverlapAngle, 264);
		MAKE_PADDED_VAR(float, m_sideAngleRange, m_sideAngleRange, 268);
		MAKE_PADDED_VAR(bool, m_singleAnimOnly, m_singleAnimOnly, 272);
		MAKE_PADDED_VAR(bool, m_doNotSwitchAnim, m_doNotSwitchAnim, 273);
		MAKE_PADDED_VAR(float, m_movementDirBlendTime, m_movementDirBlendTime, 276);
		MAKE_PADDED_VAR(float, m_movementDirMaxSpeedChange, m_movementDirMaxSpeedChange, 280);
		MAKE_PADDED_VAR(float, m_groupsBlendTime, m_groupsBlendTime, 284);
		MAKE_PADDED_VAR(float, m_quickTurnBlendTime, m_quickTurnBlendTime, 288);
		MAKE_PADDED_VAR(float, m_fasterQuickTurnBlendTime, m_fasterQuickTurnBlendTime, 292);
		MAKE_PADDED_VAR(float, m_angleThresholdForQuickTurn, m_angleThresholdForQuickTurn, 296);
		MAKE_PADDED_VAR(bool, m_reverseSyncOnQuickTurnFwdBwd, m_reverseSyncOnQuickTurnFwdBwd, 300);
		MAKE_PADDED_VAR(bool, m_reverseSyncOnQuickTurnLeftRight, m_reverseSyncOnQuickTurnLeftRight, 301);
		MAKE_PADDED_VAR(float, m_syncBlendingOffsetPTLOnQuickTurn, m_syncBlendingOffsetPTLOnQuickTurn, 304);
		MAKE_PADDED_VAR(float, m_startPTLRightFootInFront, m_startPTLRightFootInFront, 308);
		MAKE_PADDED_VAR(float, m_startPTLLeftFootInFront, m_startPTLLeftFootInFront, 312);
		MAKE_PADDED_VAR(bool, m_alwaysStartAtZero, m_alwaysStartAtZero, 316);
		MAKE_PADDED_VAR(int32_t, m_loopCount, m_loopCount, 320);
		MAKE_PADDED_VAR(float, m_syncGroupOffsetPTL, m_syncGroupOffsetPTL, 324);
		MAKE_PADDED_VAR(bool, m_useSimpleBlendForMovementDelta, m_useSimpleBlendForMovementDelta, 336);
		MAKE_PADDED_VAR(bool, m_useDefinedVariablesAsRequestedInput, m_useDefinedVariablesAsRequestedInput, 337);
		MAKE_PADDED_VAR(int32_t, m_requestedMovementDirectionVariableName, m_requestedMovementDirectionVariableName, 340);
		MAKE_PADDED_VAR(int32_t, m_requestedFacingDirectionVariableName, m_requestedFacingDirectionVariableName, 344);
		MAKE_PADDED_VAR(bool, m_useDefinedInternalVariablesAsInitialInput, m_useDefinedInternalVariablesAsInitialInput, 348);
		MAKE_PADDED_VAR(int32_t, m_movementDirectionInternalVariableName, m_movementDirectionInternalVariableName, 352);
		MAKE_PADDED_VAR(int32_t, m_groupDirInternalVariableName, m_groupDirInternalVariableName, 356);
		MAKE_PADDED_VAR(int32_t, m_Right_foot_bone_name, m_Right_foot_bone_name, 360);
		MAKE_PADDED_VAR(int32_t, m_Left_foot_bone_name, m_Left_foot_bone_name, 364);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 368);
		MAKE_PADDED_VAR(bool, m_allInputsValid, m_allInputsValid, 808);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 812);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedMovementDirectionWSValueNode, m_cachedRequestedMovementDirectionWSValueNode, 824);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedFacingDirectionWSValueNode, m_cachedRequestedFacingDirectionWSValueNode, 832);
		MAKE_PADDED_VAR(intptr_t, m_cachedInitialMovementDirectionWSValueNode, m_cachedInitialMovementDirectionWSValueNode, 840);
		MAKE_PADDED_VAR(intptr_t, m_cachedInitialGroupDirMSValueNode, m_cachedInitialGroupDirMSValueNode, 848);
	};
};

class CBehaviorGraphDirectionalMovementStartNode {
public:
	union {
	CBehaviorGraphDirectionalMovementNode cbehaviorgraphdirectionalmovementnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_groupCount, m_groupCount, 240);
		MAKE_PADDED_VAR(int32_t, m_animsPerGroup, m_animsPerGroup, 244);
		MAKE_PADDED_VAR(float, m_groupDir, m_groupDir, 248);
		MAKE_PADDED_VAR(float, m_firstGroupDirOffset, m_firstGroupDirOffset, 252);
		MAKE_PADDED_VAR(float, m_keepInCurrentGroupAngle, m_keepInCurrentGroupAngle, 256);
		MAKE_PADDED_VAR(float, m_findGroupDirOffset, m_findGroupDirOffset, 260);
		MAKE_PADDED_VAR(float, m_extraOverlapAngle, m_extraOverlapAngle, 264);
		MAKE_PADDED_VAR(float, m_sideAngleRange, m_sideAngleRange, 268);
		MAKE_PADDED_VAR(bool, m_singleAnimOnly, m_singleAnimOnly, 272);
		MAKE_PADDED_VAR(bool, m_doNotSwitchAnim, m_doNotSwitchAnim, 273);
		MAKE_PADDED_VAR(float, m_movementDirBlendTime, m_movementDirBlendTime, 276);
		MAKE_PADDED_VAR(float, m_movementDirMaxSpeedChange, m_movementDirMaxSpeedChange, 280);
		MAKE_PADDED_VAR(float, m_groupsBlendTime, m_groupsBlendTime, 284);
		MAKE_PADDED_VAR(float, m_quickTurnBlendTime, m_quickTurnBlendTime, 288);
		MAKE_PADDED_VAR(float, m_fasterQuickTurnBlendTime, m_fasterQuickTurnBlendTime, 292);
		MAKE_PADDED_VAR(float, m_angleThresholdForQuickTurn, m_angleThresholdForQuickTurn, 296);
		MAKE_PADDED_VAR(bool, m_reverseSyncOnQuickTurnFwdBwd, m_reverseSyncOnQuickTurnFwdBwd, 300);
		MAKE_PADDED_VAR(bool, m_reverseSyncOnQuickTurnLeftRight, m_reverseSyncOnQuickTurnLeftRight, 301);
		MAKE_PADDED_VAR(float, m_syncBlendingOffsetPTLOnQuickTurn, m_syncBlendingOffsetPTLOnQuickTurn, 304);
		MAKE_PADDED_VAR(float, m_startPTLRightFootInFront, m_startPTLRightFootInFront, 308);
		MAKE_PADDED_VAR(float, m_startPTLLeftFootInFront, m_startPTLLeftFootInFront, 312);
		MAKE_PADDED_VAR(bool, m_alwaysStartAtZero, m_alwaysStartAtZero, 316);
		MAKE_PADDED_VAR(int32_t, m_loopCount, m_loopCount, 320);
		MAKE_PADDED_VAR(float, m_syncGroupOffsetPTL, m_syncGroupOffsetPTL, 324);
		MAKE_PADDED_VAR(bool, m_useSimpleBlendForMovementDelta, m_useSimpleBlendForMovementDelta, 336);
		MAKE_PADDED_VAR(bool, m_useDefinedVariablesAsRequestedInput, m_useDefinedVariablesAsRequestedInput, 337);
		MAKE_PADDED_VAR(int32_t, m_requestedMovementDirectionVariableName, m_requestedMovementDirectionVariableName, 340);
		MAKE_PADDED_VAR(int32_t, m_requestedFacingDirectionVariableName, m_requestedFacingDirectionVariableName, 344);
		MAKE_PADDED_VAR(bool, m_useDefinedInternalVariablesAsInitialInput, m_useDefinedInternalVariablesAsInitialInput, 348);
		MAKE_PADDED_VAR(int32_t, m_movementDirectionInternalVariableName, m_movementDirectionInternalVariableName, 352);
		MAKE_PADDED_VAR(int32_t, m_groupDirInternalVariableName, m_groupDirInternalVariableName, 356);
		MAKE_PADDED_VAR(int32_t, m_Right_foot_bone_name, m_Right_foot_bone_name, 360);
		MAKE_PADDED_VAR(int32_t, m_Left_foot_bone_name, m_Left_foot_bone_name, 364);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 368);
		MAKE_PADDED_VAR(bool, m_allInputsValid, m_allInputsValid, 808);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 812);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedMovementDirectionWSValueNode, m_cachedRequestedMovementDirectionWSValueNode, 824);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedFacingDirectionWSValueNode, m_cachedRequestedFacingDirectionWSValueNode, 832);
		MAKE_PADDED_VAR(intptr_t, m_cachedInitialMovementDirectionWSValueNode, m_cachedInitialMovementDirectionWSValueNode, 840);
		MAKE_PADDED_VAR(intptr_t, m_cachedInitialGroupDirMSValueNode, m_cachedInitialGroupDirMSValueNode, 848);
	};
};

class CBehaviorGraphDirectionalMovementStopNode {
public:
	union {
	CBehaviorGraphDirectionalMovementStartNode cbehaviorgraphdirectionalmovementstartnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_groupCount, m_groupCount, 240);
		MAKE_PADDED_VAR(int32_t, m_animsPerGroup, m_animsPerGroup, 244);
		MAKE_PADDED_VAR(float, m_groupDir, m_groupDir, 248);
		MAKE_PADDED_VAR(float, m_firstGroupDirOffset, m_firstGroupDirOffset, 252);
		MAKE_PADDED_VAR(float, m_keepInCurrentGroupAngle, m_keepInCurrentGroupAngle, 256);
		MAKE_PADDED_VAR(float, m_findGroupDirOffset, m_findGroupDirOffset, 260);
		MAKE_PADDED_VAR(float, m_extraOverlapAngle, m_extraOverlapAngle, 264);
		MAKE_PADDED_VAR(float, m_sideAngleRange, m_sideAngleRange, 268);
		MAKE_PADDED_VAR(bool, m_singleAnimOnly, m_singleAnimOnly, 272);
		MAKE_PADDED_VAR(bool, m_doNotSwitchAnim, m_doNotSwitchAnim, 273);
		MAKE_PADDED_VAR(float, m_movementDirBlendTime, m_movementDirBlendTime, 276);
		MAKE_PADDED_VAR(float, m_movementDirMaxSpeedChange, m_movementDirMaxSpeedChange, 280);
		MAKE_PADDED_VAR(float, m_groupsBlendTime, m_groupsBlendTime, 284);
		MAKE_PADDED_VAR(float, m_quickTurnBlendTime, m_quickTurnBlendTime, 288);
		MAKE_PADDED_VAR(float, m_fasterQuickTurnBlendTime, m_fasterQuickTurnBlendTime, 292);
		MAKE_PADDED_VAR(float, m_angleThresholdForQuickTurn, m_angleThresholdForQuickTurn, 296);
		MAKE_PADDED_VAR(bool, m_reverseSyncOnQuickTurnFwdBwd, m_reverseSyncOnQuickTurnFwdBwd, 300);
		MAKE_PADDED_VAR(bool, m_reverseSyncOnQuickTurnLeftRight, m_reverseSyncOnQuickTurnLeftRight, 301);
		MAKE_PADDED_VAR(float, m_syncBlendingOffsetPTLOnQuickTurn, m_syncBlendingOffsetPTLOnQuickTurn, 304);
		MAKE_PADDED_VAR(float, m_startPTLRightFootInFront, m_startPTLRightFootInFront, 308);
		MAKE_PADDED_VAR(float, m_startPTLLeftFootInFront, m_startPTLLeftFootInFront, 312);
		MAKE_PADDED_VAR(bool, m_alwaysStartAtZero, m_alwaysStartAtZero, 316);
		MAKE_PADDED_VAR(int32_t, m_loopCount, m_loopCount, 320);
		MAKE_PADDED_VAR(float, m_syncGroupOffsetPTL, m_syncGroupOffsetPTL, 324);
		MAKE_PADDED_VAR(bool, m_useSimpleBlendForMovementDelta, m_useSimpleBlendForMovementDelta, 336);
		MAKE_PADDED_VAR(bool, m_useDefinedVariablesAsRequestedInput, m_useDefinedVariablesAsRequestedInput, 337);
		MAKE_PADDED_VAR(int32_t, m_requestedMovementDirectionVariableName, m_requestedMovementDirectionVariableName, 340);
		MAKE_PADDED_VAR(int32_t, m_requestedFacingDirectionVariableName, m_requestedFacingDirectionVariableName, 344);
		MAKE_PADDED_VAR(bool, m_useDefinedInternalVariablesAsInitialInput, m_useDefinedInternalVariablesAsInitialInput, 348);
		MAKE_PADDED_VAR(int32_t, m_movementDirectionInternalVariableName, m_movementDirectionInternalVariableName, 352);
		MAKE_PADDED_VAR(int32_t, m_groupDirInternalVariableName, m_groupDirInternalVariableName, 356);
		MAKE_PADDED_VAR(int32_t, m_Right_foot_bone_name, m_Right_foot_bone_name, 360);
		MAKE_PADDED_VAR(int32_t, m_Left_foot_bone_name, m_Left_foot_bone_name, 364);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 368);
		MAKE_PADDED_VAR(bool, m_allInputsValid, m_allInputsValid, 808);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 812);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedMovementDirectionWSValueNode, m_cachedRequestedMovementDirectionWSValueNode, 824);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedFacingDirectionWSValueNode, m_cachedRequestedFacingDirectionWSValueNode, 832);
		MAKE_PADDED_VAR(intptr_t, m_cachedInitialMovementDirectionWSValueNode, m_cachedInitialMovementDirectionWSValueNode, 840);
		MAKE_PADDED_VAR(intptr_t, m_cachedInitialGroupDirMSValueNode, m_cachedInitialGroupDirMSValueNode, 848);
	};
};

class CBehaviorGraphEngineValueNode {
public:
	union {
	CBehaviorGraphVariableNode cbehaviorgraphvariablenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 232);
		MAKE_PADDED_VAR(bool, m_manualControl, m_manualControl, 240);
		MAKE_PADDED_VAR(intptr_t, m_engineValueType, m_engineValueType, 244);
	};
};

class CBehaviorGraphEngineVectorValueNode {
public:
	union {
	CBehaviorGraphVectorVariableNode cbehaviorgraphvectorvariablenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 232);
		MAKE_PADDED_VAR(bool, m_manualControl, m_manualControl, 240);
		MAKE_PADDED_VAR(intptr_t, m_engineValueType, m_engineValueType, 244);
		MAKE_PADDED_VAR(intptr_t, m_cachedVectorVariable, m_cachedVectorVariable, 256);
	};
};

class CBehaviorGraphEnumComparatorNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_enumValue, m_enumValue, 232);
		MAKE_PADDED_VAR(intptr_t, m_operation, m_operation, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 288);
	};
};

class CBehaviorGraphEventWatchdogNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 240);
		MAKE_PADDED_VAR(float, m_trueValue, m_trueValue, 244);
		MAKE_PADDED_VAR(float, m_falseValue, m_falseValue, 248);
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 252);
		MAKE_PADDED_VAR(float, m_timeOut, m_timeOut, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 344);
	};
};

class CBehaviorGraphFillMovementVariablesUsingSteeringNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(bool, m_fillRequestedMovementDirectionWSVariable, m_fillRequestedMovementDirectionWSVariable, 240);
		MAKE_PADDED_VAR(int32_t, m_requestedMovementDirectionWSVariableName, m_requestedMovementDirectionWSVariableName, 244);
		MAKE_PADDED_VAR(bool, m_fillRequestedFacingDirectionWSVariable, m_fillRequestedFacingDirectionWSVariable, 248);
		MAKE_PADDED_VAR(int32_t, m_requestedFacingDirectionWSVariableName, m_requestedFacingDirectionWSVariableName, 252);
	};
};

class CBehaviorGraphFilterNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(SBehaviorGraphBoneInfo*, m_Bones_with_weights[2], m_Bones_with_weights, 248);
		MAKE_PADDED_VAR(bool, m_filterTransform, m_filterTransform, 260);
		MAKE_PADDED_VAR(bool, m_filterRotation, m_filterRotation, 261);
		MAKE_PADDED_VAR(bool, m_filterScale, m_filterScale, 262);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlNode, m_cachedControlNode, 280);
	};
};

class CBehaviorGraphFootStepDetectorNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
	};
};

class CBehaviorGraphGameplayAdditiveNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(SGameplayAdditiveLevel, m_level_0, m_level_0, 232);
		MAKE_PADDED_VAR(SGameplayAdditiveLevel, m_level_1, m_level_1, 248);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 416);
	};
};

class CBehaviorGraphGameplaySoundEventsNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
	};
};

class CBehaviorGraphGetBoneTransformNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 240);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 252);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 288);
	};
};

class CBehaviorGraphHeadingNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_heading, m_heading, 240);
	};
};

class CBehaviorGraphHorseNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_slopeFBVar, m_slopeFBVar, 240);
		MAKE_PADDED_VAR(int32_t, m_slopeLRVar, m_slopeLRVar, 244);
		MAKE_PADDED_VAR(char*, m_firstBoneF, m_firstBoneF, 248);
		MAKE_PADDED_VAR(char*, m_secondBoneF, m_secondBoneF, 260);
		MAKE_PADDED_VAR(char*, m_thirdBoneF, m_thirdBoneF, 272);
		MAKE_PADDED_VAR(char*, m_endBoneF, m_endBoneF, 284);
		MAKE_PADDED_VAR(intptr_t, m_hingeAxisF, m_hingeAxisF, 296);
		MAKE_PADDED_VAR(char*, m_firstBoneB, m_firstBoneB, 300);
		MAKE_PADDED_VAR(char*, m_secondBoneB, m_secondBoneB, 312);
		MAKE_PADDED_VAR(char*, m_thirdBoneB, m_thirdBoneB, 324);
		MAKE_PADDED_VAR(char*, m_endBoneB, m_endBoneB, 336);
		MAKE_PADDED_VAR(intptr_t, m_hingeAxisB, m_hingeAxisB, 348);
		MAKE_PADDED_VAR(char*, m_pelvis, m_pelvis, 352);
		MAKE_PADDED_VAR(char*, m_root, m_root, 364);
		MAKE_PADDED_VAR(intptr_t, m_axisRootFB, m_axisRootFB, 376);
		MAKE_PADDED_VAR(intptr_t, m_axisRootLR, m_axisRootLR, 380);
		MAKE_PADDED_VAR(char*, m_headFirst, m_headFirst, 384);
		MAKE_PADDED_VAR(char*, m_headSecond, m_headSecond, 396);
		MAKE_PADDED_VAR(char*, m_headThird, m_headThird, 408);
		MAKE_PADDED_VAR(intptr_t, m_hingeAxisHead, m_hingeAxisHead, 420);
		MAKE_PADDED_VAR(float, m_speedStep, m_speedStep, 424);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_walkFBP, m_walkFBP, 428);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_trotFBP, m_trotFBP, 472);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_gallopFBP, m_gallopFBP, 516);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_canterFBP, m_canterFBP, 560);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_walkFBN, m_walkFBN, 604);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_trotFBN, m_trotFBN, 648);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_gallopFBN, m_gallopFBN, 692);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_canterFBN, m_canterFBN, 736);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_walkLR, m_walkLR, 780);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_trotLR, m_trotLR, 824);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_gallopLR, m_gallopLR, 868);
		MAKE_PADDED_VAR(SHorseStateOffsets, m_canterLR, m_canterLR, 912);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedValueNode, m_cachedSpeedValueNode, 1120);
	};
};

class CBehaviorGraphIk2BakerNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_endBoneName, m_endBoneName, 248);
		MAKE_PADDED_VAR(float, m_blendInDuration, m_blendInDuration, 260);
		MAKE_PADDED_VAR(float, m_blendOutDuration, m_blendOutDuration, 264);
		MAKE_PADDED_VAR(int32_t, m_animEventName, m_animEventName, 268);
		MAKE_PADDED_VAR(float, m_defaultEventStartTime, m_defaultEventStartTime, 272);
		MAKE_PADDED_VAR(float, m_defaultEventEndTime, m_defaultEventEndTime, 276);
		MAKE_PADDED_VAR(intptr_t, m_hingeAxis, m_hingeAxis, 280);
		MAKE_PADDED_VAR(bool, m_enforceEndPosition, m_enforceEndPosition, 284);
		MAKE_PADDED_VAR(bool, m_bonePositionInWorldSpace, m_bonePositionInWorldSpace, 285);
		MAKE_PADDED_VAR(bool, m_enforceEndRotation, m_enforceEndRotation, 286);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 544);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetPosNode, m_cachedTargetPosNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetRotNode, m_cachedTargetRotNode, 560);
	};
};

class CBehaviorGraphIk2Node {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_firstBone, m_firstBone, 248);
		MAKE_PADDED_VAR(char*, m_secondBone, m_secondBone, 260);
		MAKE_PADDED_VAR(char*, m_endBone, m_endBone, 272);
		MAKE_PADDED_VAR(intptr_t, m_hingeAxis, m_hingeAxis, 284);
		MAKE_PADDED_VAR(float, m_angleMax, m_angleMax, 288);
		MAKE_PADDED_VAR(float, m_angleMin, m_angleMin, 292);
		MAKE_PADDED_VAR(float, m_firstJointGain, m_firstJointGain, 296);
		MAKE_PADDED_VAR(float, m_secondJointGain, m_secondJointGain, 300);
		MAKE_PADDED_VAR(float, m_endJointGain, m_endJointGain, 304);
		MAKE_PADDED_VAR(bool, m_enforceEndPosition, m_enforceEndPosition, 308);
		MAKE_PADDED_VAR(bool, m_enforceEndRotation, m_enforceEndRotation, 309);
		MAKE_PADDED_VAR(Vector, m_positionOffset, m_positionOffset, 320);
		MAKE_PADDED_VAR(EulerAngles, m_rotationOffset, m_rotationOffset, 336);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 448);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetPosNode, m_cachedTargetPosNode, 456);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetRotNode, m_cachedTargetRotNode, 464);
	};
};

class CBehaviorGraphIk3Node {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_firstBone, m_firstBone, 248);
		MAKE_PADDED_VAR(char*, m_secondBone, m_secondBone, 260);
		MAKE_PADDED_VAR(char*, m_thirdBone, m_thirdBone, 272);
		MAKE_PADDED_VAR(char*, m_endBone, m_endBone, 284);
		MAKE_PADDED_VAR(intptr_t, m_hingeAxis, m_hingeAxis, 296);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 400);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetPosNode, m_cachedTargetPosNode, 408);
	};
};

class CBehaviorGraphInjectorNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedInjectorNode, m_cachedInjectorNode, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlNode, m_cachedControlNode, 264);
	};
};

class CBehaviorGraphInternalVariableCounterNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 240);
		MAKE_PADDED_VAR(bool, m_countOnActivation, m_countOnActivation, 244);
		MAKE_PADDED_VAR(bool, m_countOnDeactivation, m_countOnDeactivation, 245);
		MAKE_PADDED_VAR(float, m_stepValue, m_stepValue, 248);
	};
};

class CBehaviorGraphJoinNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 264);
	};
};

class CBehaviorGraphLookAtNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(Vector, m_axis, m_axis, 272);
		MAKE_PADDED_VAR(bool, m_useLimits, m_useLimits, 288);
		MAKE_PADDED_VAR(float, m_limitAngle, m_limitAngle, 292);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 408);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetNode, m_cachedTargetNode, 416);
	};
};

class CBehaviorGraphLookAtSystemNode {
public:
	union {
	CBehaviorGraphConstraintNode cbehaviorgraphconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_dampType, m_dampType, 496);
		MAKE_PADDED_VAR(bool, m_useDampCurve, m_useDampCurve, 500);
		MAKE_PADDED_VAR(intptr_t, m_dampCurve, m_dampCurve, 504);
		MAKE_PADDED_VAR(float, m_dampTimeAxisScale, m_dampTimeAxisScale, 512);
		MAKE_PADDED_VAR(float, m_dampTimeSpeed, m_dampTimeSpeed, 516);
		MAKE_PADDED_VAR(bool, m_useFollowCurve, m_useFollowCurve, 520);
		MAKE_PADDED_VAR(intptr_t, m_followCurve, m_followCurve, 528);
		MAKE_PADDED_VAR(float, m_followTimeAxisScale, m_followTimeAxisScale, 536);
		MAKE_PADDED_VAR(float, m_followTimeSpeed, m_followTimeSpeed, 540);
		MAKE_PADDED_VAR(intptr_t, m_targetObject, m_targetObject, 544);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 560);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationValueNode, m_cachedDurationValueNode, 568);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationFollowValueNode, m_cachedDurationFollowValueNode, 576);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedDampValueNode, m_cachedSpeedDampValueNode, 584);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedFollowValueNode, m_cachedSpeedFollowValueNode, 592);
		MAKE_PADDED_VAR(char*, m_firstBone, m_firstBone, 604);
		MAKE_PADDED_VAR(char*, m_secondBone, m_secondBone, 616);
		MAKE_PADDED_VAR(char*, m_thirdBone, m_thirdBone, 628);
		MAKE_PADDED_VAR(Vector, m_localOffset, m_localOffset, 640);
		MAKE_PADDED_VAR(float, m_deadZone, m_deadZone, 656);
		MAKE_PADDED_VAR(float, m_deadZoneDist, m_deadZoneDist, 660);
		MAKE_PADDED_VAR(float, m_limitDampTime, m_limitDampTime, 664);
		MAKE_PADDED_VAR(float, m_range, m_range, 668);
		MAKE_PADDED_VAR(float, m_levelDampTime, m_levelDampTime, 672);
		MAKE_PADDED_VAR(intptr_t, m_internalDampCurve, m_internalDampCurve, 680);
		MAKE_PADDED_VAR(float, m_dampForFirstTarget, m_dampForFirstTarget, 688);
		MAKE_PADDED_VAR(float, m_firstWeight, m_firstWeight, 692);
		MAKE_PADDED_VAR(float, m_secondWeight, m_secondWeight, 696);
		MAKE_PADDED_VAR(float, m_thirdWeight, m_thirdWeight, 700);
		MAKE_PADDED_VAR(intptr_t, m_cachedLevelVariableNode, m_cachedLevelVariableNode, 976);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightsVariableNode, m_cachedWeightsVariableNode, 984);
		MAKE_PADDED_VAR(intptr_t, m_cachedLimitVariableNode, m_cachedLimitVariableNode, 992);
		MAKE_PADDED_VAR(intptr_t, m_cachedCompressedDataVariableNode, m_cachedCompressedDataVariableNode, 1000);
	};
};

class CBehaviorGraphLookAtUsingAnimationsProcessingNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(Vector2, m_Angle_limit, m_Angle_limit, 232);
		MAKE_PADDED_VAR(Vector2, m_Animation_angle_range, m_Animation_angle_range, 240);
		MAKE_PADDED_VAR(float, m_Angle_to_stop_looking, m_Angle_to_stop_looking, 248);
		MAKE_PADDED_VAR(float, m_Max__Look_at__speed, m_Max__Look_at__speed, 252);
		MAKE_PADDED_VAR(float, m_Look_at__blend_time, m_Look_at__blend_time, 256);
		MAKE_PADDED_VAR(float, m_On__Off_blend_time, m_On__Off_blend_time, 260);
		MAKE_PADDED_VAR(int32_t, m_Bone_name, m_Bone_name, 268);
		MAKE_PADDED_VAR(bool, m_Use_char__rotation, m_Use_char__rotation, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 424);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtVariableNode, m_cachedLookAtVariableNode, 432);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 440);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtBlendTimeNode, m_cachedLookAtBlendTimeNode, 448);
	};
};

class CBehaviorGraphMaintainVelocityNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_stop, m_stop, 244);
	};
};

class CBehaviorGraphMatchFromPoseNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_minDuration, m_minDuration, 240);
	};
};

class CBehaviorGraphMathNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_operation, m_operation, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 240);
		MAKE_PADDED_VAR(intptr_t, m_cachedSecondInputNode, m_cachedSecondInputNode, 248);
	};
};

class CBehaviorGraphMimicBlinkControllerNode_Blend {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(char*, m_trackEyeLeft_Down, m_trackEyeLeft_Down, 232);
		MAKE_PADDED_VAR(char*, m_trackEyeRight_Down, m_trackEyeRight_Down, 244);
		MAKE_PADDED_VAR(float, m_blinkValueThr, m_blinkValueThr, 256);
		MAKE_PADDED_VAR(float, m_blinkCooldown, m_blinkCooldown, 260);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputIdle, m_cachedInputIdle, 504);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputRest, m_cachedInputRest, 512);
	};
};

class CBehaviorGraphMimicsAnimationNode {
public:
	union {
	CBehaviorGraphAnimationNode cbehaviorgraphanimationnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
	};
};

class CBehaviorGraphMimicsBlendNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedSecondInputNode, m_cachedSecondInputNode, 288);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 296);
	};
};

class CBehaviorGraphMimicsBoneAnimationNode {
public:
	union {
	CBehaviorGraphAnimationNode cbehaviorgraphanimationnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
	};
};

class CBehaviorGraphMimicsBoneConverterNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
	};
};

class CBehaviorGraphMimicsConverterNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(char*, m_placerPrefix, m_placerPrefix, 240);
		MAKE_PADDED_VAR(intptr_t*, m_mimicsConstraints[2], m_mimicsConstraints, 252);
		MAKE_PADDED_VAR(int32_t, m_mimicLipsyncOffset, m_mimicLipsyncOffset, 264);
		MAKE_PADDED_VAR(int32_t, m_normalBlendTracksBegin, m_normalBlendTracksBegin, 268);
		MAKE_PADDED_VAR(intptr_t, m_cachedAnimInputNode, m_cachedAnimInputNode, 304);
		MAKE_PADDED_VAR(intptr_t, m_cachedMimicBaseInputNode, m_cachedMimicBaseInputNode, 312);
	};
};

class CBehaviorGraphMimicsEventAnimationNode {
public:
	union {
	CBehaviorGraphMimicsAnimationNode cbehaviorgraphmimicsanimationnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 496);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 552);
	};
};

class CBehaviorGraphMimicsGeneratorNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(char*, m_trackName, m_trackName, 240);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 252);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightVariableNode, m_cachedWeightVariableNode, 288);
		MAKE_PADDED_VAR(intptr_t, m_cachedPoseNumVariableNode, m_cachedPoseNumVariableNode, 296);
	};
};

class CBehaviorGraphMorphTrackNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(uint32_t, m_trackIndex, m_trackIndex, 240);
	};
};

class CBehaviorGraphMotionExBlendNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_threshold, m_threshold, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 288);
		MAKE_PADDED_VAR(intptr_t, m_cachedSecondInputNode, m_cachedSecondInputNode, 296);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 304);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedVariableNode, m_cachedSpeedVariableNode, 312);
	};
};

class CBehaviorGraphMotionExFilterNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 256);
	};
};

class CBehaviorGraphMotionRotChangeValueNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(bool, m_analizeMotionEx, m_analizeMotionEx, 232);
		MAKE_PADDED_VAR(bool, m_radOrDeg, m_radOrDeg, 233);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 288);
	};
};

class CBehaviorGraphOutputNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t*, m_cachedCustomInputNodes[2], m_cachedCustomInputNodes, 240);
		MAKE_PADDED_VAR(intptr_t*, m_cachedFloatInputNodes[2], m_cachedFloatInputNodes, 252);
	};
};

class CBehaviorGraphOverrideFloatTracksNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t*, m_cachedFloatInputNodes[2], m_cachedFloatInputNodes, 240);
		MAKE_PADDED_VAR(bool, m_overrideZeros, m_overrideZeros, 252);
	};
};

class CBehaviorGraphParentInputNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_parentSocket, m_parentSocket, 240);
	};
};

class CBehaviorGraphParentValueInputNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_parentSocket, m_parentSocket, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedParentValueNode, m_cachedParentValueNode, 240);
	};
};

class CBehaviorGraphParentVectorValueInputNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_parentSocket, m_parentSocket, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedParentVectorValueNode, m_cachedParentVectorValueNode, 240);
	};
};

class CBehaviorGraphPivotRotationNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(char*, m_pivotBoneName, m_pivotBoneName, 260);
		MAKE_PADDED_VAR(intptr_t, m_axis, m_axis, 272);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 276);
		MAKE_PADDED_VAR(float, m_biasAngle, m_biasAngle, 280);
		MAKE_PADDED_VAR(float, m_minAngle, m_minAngle, 284);
		MAKE_PADDED_VAR(float, m_maxAngle, m_maxAngle, 288);
		MAKE_PADDED_VAR(bool, m_clampRotation, m_clampRotation, 292);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 344);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleMinNode, m_cachedAngleMinNode, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleMaxNode, m_cachedAngleMaxNode, 360);
	};
};

class CBehaviorGraphPointCloudLookAtNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_lookAtName, m_lookAtName, 248);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 252);
		MAKE_PADDED_VAR(int32_t, m_animationA, m_animationA, 264);
		MAKE_PADDED_VAR(int32_t, m_animationB, m_animationB, 268);
		MAKE_PADDED_VAR(bool, m_additiveMode, m_additiveMode, 272);
		MAKE_PADDED_VAR(intptr_t, m_additiveType, m_additiveType, 276);
		MAKE_PADDED_VAR(bool, m_writeToPoseLikeAdditiveNode, m_writeToPoseLikeAdditiveNode, 280);
		MAKE_PADDED_VAR(bool, m_convertAnimationToAdditiveFlagA, m_convertAnimationToAdditiveFlagA, 281);
		MAKE_PADDED_VAR(int32_t, m_convertAnimationToAdditiveRefFrameNumA, m_convertAnimationToAdditiveRefFrameNumA, 284);
		MAKE_PADDED_VAR(bool, m_convertAnimationToAdditiveFlagB, m_convertAnimationToAdditiveFlagB, 288);
		MAKE_PADDED_VAR(int32_t, m_convertAnimationToAdditiveRefFrameNumB, m_convertAnimationToAdditiveRefFrameNumB, 292);
		MAKE_PADDED_VAR(SBehaviorGraphBoneInfo*, m_Lower_body_part_bones[2], m_Lower_body_part_bones, 296);
		MAKE_PADDED_VAR(intptr_t, m_targetWeightCurve, m_targetWeightCurve, 312);
		MAKE_PADDED_VAR(intptr_t, m_targetWeightCurve2, m_targetWeightCurve2, 320);
		MAKE_PADDED_VAR(intptr_t, m_headDownCurve, m_headDownCurve, 328);
		MAKE_PADDED_VAR(intptr_t, m_headProgressCurve, m_headProgressCurve, 336);
		MAKE_PADDED_VAR(intptr_t, m_handDragCurve, m_handDragCurve, 344);
		MAKE_PADDED_VAR(char*, m_handL, m_handL, 352);
		MAKE_PADDED_VAR(char*, m_handR, m_handR, 364);
		MAKE_PADDED_VAR(bool, m_useBlendInsteadOfTargetTransition, m_useBlendInsteadOfTargetTransition, 376);
		MAKE_PADDED_VAR(intptr_t, m_transition, m_transition, 384);
		MAKE_PADDED_VAR(bool, m_useTransitionWeightPred, m_useTransitionWeightPred, 392);
		MAKE_PADDED_VAR(int32_t*, m_transitionBonesPred[2], m_transitionBonesPred, 396);
		MAKE_PADDED_VAR(intptr_t, m_transitionPredCurve, m_transitionPredCurve, 408);
		MAKE_PADDED_VAR(intptr_t, m_secondaryMotion, m_secondaryMotion, 416);
		MAKE_PADDED_VAR(intptr_t, m_cachedProgressNode, m_cachedProgressNode, 856);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightANode, m_cachedWeightANode, 864);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightBNode, m_cachedWeightBNode, 872);
		MAKE_PADDED_VAR(intptr_t, m_cachedUseSecBlendANode, m_cachedUseSecBlendANode, 880);
		MAKE_PADDED_VAR(intptr_t, m_cachedUseSecBlendBNode, m_cachedUseSecBlendBNode, 888);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationNode, m_cachedDurationNode, 896);
		MAKE_PADDED_VAR(intptr_t, m_cachedFallbackNode, m_cachedFallbackNode, 904);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetNodeA, m_cachedTargetNodeA, 912);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetNodeB, m_cachedTargetNodeB, 920);
	};
};

class CBehaviorGraphPointCloudLookAtSecMotion {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 88);
		MAKE_PADDED_VAR(int32_t*, m_masterBones[2], m_masterBones, 92);
		MAKE_PADDED_VAR(intptr_t, m_masterBoneAxis, m_masterBoneAxis, 104);
		MAKE_PADDED_VAR(float, m_maxMasterMotionAngleDeg, m_maxMasterMotionAngleDeg, 108);
		MAKE_PADDED_VAR(int32_t, m_defaultAnimation, m_defaultAnimation, 112);
	};
};

class CBehaviorGraphPointCloudLookAtTransition_Vertical {
public:
	union {
	IBehaviorGraphPointCloudLookAtTransition_Vector ibehaviorgraphpointcloudlookattransition_vector;
		MAKE_PADDED_VAR(float, m_maxAngleDiffDeg, m_maxAngleDiffDeg, 104);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 108);
		MAKE_PADDED_VAR(float, m_minAngle, m_minAngle, 112);
		MAKE_PADDED_VAR(float, m_maxAngle, m_maxAngle, 116);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 120);
	};
};

class CBehaviorGraphPoseConstraintNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
	};
};

class CBehaviorGraphPoseConstraintWithTargetNode {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetPosValueNode, m_cachedTargetPosValueNode, 312);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetRotValueNode, m_cachedTargetRotValueNode, 320);
	};
};

class CBehaviorGraphPoseMemoryNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_blendOutEvent, m_blendOutEvent, 248);
		MAKE_PADDED_VAR(float, m_blendOutDuration, m_blendOutDuration, 252);
	};
};

class CBehaviorGraphPoseMemoryNode_Mimic {
public:
	union {
	CBehaviorGraphPoseMemoryNode cbehaviorgraphposememorynode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_blendOutEvent, m_blendOutEvent, 248);
		MAKE_PADDED_VAR(float, m_blendOutDuration, m_blendOutDuration, 252);
	};
};

class CBehaviorGraphPoseSlotNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 248);
		MAKE_PADDED_VAR(char*, m_firstBone, m_firstBone, 252);
		MAKE_PADDED_VAR(bool, m_worldSpace, m_worldSpace, 264);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 268);
		MAKE_PADDED_VAR(bool, m_blendFloatTracks, m_blendFloatTracks, 272);
		MAKE_PADDED_VAR(bool, m_ignoreZeroFloatTracks, m_ignoreZeroFloatTracks, 273);
	};
};

class CBehaviorGraphPositionControllerBaseNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(bool, m_useHeading, m_useHeading, 240);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightVariableNode, m_cachedWeightVariableNode, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedShiftVariableNode, m_cachedShiftVariableNode, 288);
	};
};

class CBehaviorGraphPositionControllerNode {
public:
	union {
	CBehaviorGraphPositionControllerBaseNode cbehaviorgraphpositioncontrollerbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(bool, m_useHeading, m_useHeading, 240);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightVariableNode, m_cachedWeightVariableNode, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedShiftVariableNode, m_cachedShiftVariableNode, 288);
		MAKE_PADDED_VAR(bool, m_continueUpdate, m_continueUpdate, 296);
		MAKE_PADDED_VAR(bool, m_useAnimEvent, m_useAnimEvent, 297);
		MAKE_PADDED_VAR(int32_t, m_eventAllowTrans, m_eventAllowTrans, 300);
	};
};

class CBehaviorGraphPositionControllerWithDampNode {
public:
	union {
	CBehaviorGraphPositionControllerBaseNode cbehaviorgraphpositioncontrollerbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(bool, m_useHeading, m_useHeading, 240);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightVariableNode, m_cachedWeightVariableNode, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedShiftVariableNode, m_cachedShiftVariableNode, 288);
	};
};

class CBehaviorGraphRagdollNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(bool, m_allowToProvidePreRagdollPose, m_allowToProvidePreRagdollPose, 240);
		MAKE_PADDED_VAR(bool, m_updateAndSampleInputIfPreRagdollWeightIsNonZero, m_updateAndSampleInputIfPreRagdollWeightIsNonZero, 241);
		MAKE_PADDED_VAR(bool, m_keepInFrozenRagdollPose, m_keepInFrozenRagdollPose, 242);
		MAKE_PADDED_VAR(bool, m_switchToSwimming, m_switchToSwimming, 243);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 360);
		MAKE_PADDED_VAR(intptr_t, m_cachedRootBoneImpulseVariable, m_cachedRootBoneImpulseVariable, 368);
	};
};

class CBehaviorGraphRandomAnimTimeNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_animSpeedMin, m_animSpeedMin, 240);
		MAKE_PADDED_VAR(float, m_animSpeedMax, m_animSpeedMax, 244);
		MAKE_PADDED_VAR(float, m_animStartTimeOffset, m_animStartTimeOffset, 248);
		MAKE_PADDED_VAR(float, m_animStartTimePrecent, m_animStartTimePrecent, 252);
	};
};

class CBehaviorGraphRestoreAnimEventNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_animEventName, m_animEventName, 240);
	};
};

class CBehaviorGraphRestoreSyncInfoNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_storeName, m_storeName, 240);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 248);
		MAKE_PADDED_VAR(bool, m_restoreOnActivation, m_restoreOnActivation, 256);
		MAKE_PADDED_VAR(bool, m_restoreEveryFrame, m_restoreEveryFrame, 257);
		MAKE_PADDED_VAR(int32_t, m_restoreOnEvent, m_restoreOnEvent, 260);
	};
};

class CBehaviorGraphRetargetCharacterNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_method, m_method, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 272);
	};
};

class CBehaviorGraphRetargetCharacterNodeMethod_Skeleton {
public:
	union {
	IBehaviorGraphRetargetCharacterNodeMethod ibehaviorgraphretargetcharacternodemethod;
		MAKE_PADDED_VAR(intptr_t, m_skeleton, m_skeleton, 96);
		MAKE_PADDED_VAR(SBehaviorGraphBoneInfo*, m_Bones_with_only_scale[2], m_Bones_with_only_scale, 108);
	};
};

class CBehaviorGraphRetargetCharacterNodeMethod_SkeletonMapper {
public:
	union {
	IBehaviorGraphRetargetCharacterNodeMethod ibehaviorgraphretargetcharacternodemethod;
		MAKE_PADDED_VAR(intptr_t, m_skeleton, m_skeleton, 96);
	};
};

class CBehaviorGraphRotateBoneNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(intptr_t, m_axis, m_axis, 260);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 264);
		MAKE_PADDED_VAR(float, m_biasAngle, m_biasAngle, 268);
		MAKE_PADDED_VAR(float, m_minAngle, m_minAngle, 272);
		MAKE_PADDED_VAR(float, m_maxAngle, m_maxAngle, 276);
		MAKE_PADDED_VAR(bool, m_clampRotation, m_clampRotation, 280);
		MAKE_PADDED_VAR(bool, m_localSpace, m_localSpace, 281);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 320);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleMinNode, m_cachedAngleMinNode, 328);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleMaxNode, m_cachedAngleMaxNode, 336);
	};
};

class CBehaviorGraphRotateLimitNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(intptr_t, m_axis, m_axis, 260);
		MAKE_PADDED_VAR(float, m_minAngle, m_minAngle, 264);
		MAKE_PADDED_VAR(float, m_maxAngle, m_maxAngle, 268);
	};
};

class CBehaviorGraphRotationControllerNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_eventAllowRot, m_eventAllowRot, 240);
		MAKE_PADDED_VAR(bool, m_continueUpdate, m_continueUpdate, 244);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleVariableNode, m_cachedAngleVariableNode, 360);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightVariableNode, m_cachedWeightVariableNode, 368);
	};
};

class CBehaviorGraphScaleBoneNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(Vector, m_scale, m_scale, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 320);
	};
};

class CBehaviorGraphScriptNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_script, m_script, 240);
		MAKE_PADDED_VAR(intptr_t*, m_cachedFloatNodes[2], m_cachedFloatNodes, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedVectorNodes[2], m_cachedVectorNodes, 260);
	};
};

class CBehaviorGraphSelectionValueNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(float, m_threshold, m_threshold, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedSelNode, m_cachedSelNode, 240);
		MAKE_PADDED_VAR(intptr_t, m_cachedOneNode, m_cachedOneNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedTwoNode, m_cachedTwoNode, 256);
	};
};

class CBehaviorGraphSelfActivatingStateMachineNode {
public:
	union {
	CBehaviorGraphStateMachineNode cbehaviorgraphstatemachinenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t*, m_globalTransitions[2], m_globalTransitions, 320);
		MAKE_PADDED_VAR(bool, m_resetStateOnExit, m_resetStateOnExit, 344);
		MAKE_PADDED_VAR(bool, m_applySyncTags, m_applySyncTags, 345);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 432);
	};
};

class CBehaviorGraphSetInternalVariableNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 240);
		MAKE_PADDED_VAR(bool, m_setValueOnActivationAsWell, m_setValueOnActivationAsWell, 244);
		MAKE_PADDED_VAR(bool, m_setValueBeforeInputIsUpdated, m_setValueBeforeInputIsUpdated, 245);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 248);
	};
};

class CBehaviorGraphStageNode {
public:
	union {
	CBehaviorGraphContainerNode cbehaviorgraphcontainernode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 296);
		MAKE_PADDED_VAR(bool, m_activeByDefault, m_activeByDefault, 304);
	};
};

class CBehaviorGraphStateNode {
public:
	union {
	CBehaviorGraphContainerNode cbehaviorgraphcontainernode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
	};
};

class CBehaviorGraphStateTransitionNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
	};
};

class CBehaviorGraphStaticConditionNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_condition, m_condition, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputANode, m_cachedInputANode, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputBNode, m_cachedInputBNode, 264);
	};
};

class CBehaviorGraphStoreAnimEventNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_animEventName, m_animEventName, 240);
	};
};

class CBehaviorGraphStoreBoneNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(int32_t, m_storeName, m_storeName, 260);
	};
};

class CBehaviorGraphStoreSyncInfoNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_storeName, m_storeName, 240);
	};
};

class CBehaviorGraphSynchronizeAnimationsToParentNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(SSynchronizeAnimationToParentDefinition, m_Default, m_Default, 232);
		MAKE_PADDED_VAR(SSynchronizeAnimationToParentDefinition*, m_Anims[2], m_Anims, 240);
		MAKE_PADDED_VAR(bool, m_Synchronize_to_input, m_Synchronize_to_input, 252);
		MAKE_PADDED_VAR(bool, m_Auto_use_anims_with_same_name, m_Auto_use_anims_with_same_name, 253);
		MAKE_PADDED_VAR(float, m_Animation_stay_multiplier, m_Animation_stay_multiplier, 256);
		MAKE_PADDED_VAR(bool, m_Sync_to_normal_full_body_anims, m_Sync_to_normal_full_body_anims, 260);
		MAKE_PADDED_VAR(bool, m_Sync_to_overlay_body_anims, m_Sync_to_overlay_body_anims, 261);
		MAKE_PADDED_VAR(bool, m_Skip_normal_full_body_anims_when_syncing_overlay_anims, m_Skip_normal_full_body_anims_when_syncing_overlay_anims, 262);
		MAKE_PADDED_VAR(bool, m_Sync_default_to_any_looped_anim_found, m_Sync_default_to_any_looped_anim_found, 263);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 392);
	};
};

class CBehaviorGraphSyncOverrideNode {
public:
	union {
	CBehaviorGraphNode cbehaviorgraphnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(char*, m_rootBoneName, m_rootBoneName, 240);
		MAKE_PADDED_VAR(bool, m_blendRootParent, m_blendRootParent, 252);
		MAKE_PADDED_VAR(float, m_defaultWeight, m_defaultWeight, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 328);
		MAKE_PADDED_VAR(intptr_t, m_cachedOverrideInputNode, m_cachedOverrideInputNode, 336);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 344);
	};
};

class CBehaviorGraphSyncOverrideStateMachineNode {
public:
	union {
	CBehaviorGraphSelfActivatingStateMachineNode cbehaviorgraphselfactivatingstatemachinenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t*, m_globalTransitions[2], m_globalTransitions, 320);
		MAKE_PADDED_VAR(bool, m_resetStateOnExit, m_resetStateOnExit, 344);
		MAKE_PADDED_VAR(bool, m_applySyncTags, m_applySyncTags, 345);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 432);
		MAKE_PADDED_VAR(char*, m_rootBoneName, m_rootBoneName, 448);
		MAKE_PADDED_VAR(bool, m_blendRootParent, m_blendRootParent, 460);
		MAKE_PADDED_VAR(float, m_defaultWeight, m_defaultWeight, 464);
		MAKE_PADDED_VAR(bool, m_mergeEvents, m_mergeEvents, 468);
	};
};

class CBehaviorGraphTranslateBoneNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(Vector, m_axis, m_axis, 272);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 288);
		MAKE_PADDED_VAR(float, m_biasValue, m_biasValue, 292);
		MAKE_PADDED_VAR(float, m_minValue, m_minValue, 296);
		MAKE_PADDED_VAR(float, m_maxValue, m_maxValue, 300);
		MAKE_PADDED_VAR(bool, m_clampValue, m_clampValue, 304);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 344);
	};
};

class CBehaviorGraphValueBaseNode {
public:
	union {
	CBehaviorGraphValueNode cbehaviorgraphvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
	};
};

class CBehaviorGraphValueClampNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_min, m_min, 256);
		MAKE_PADDED_VAR(float, m_max, m_max, 260);
	};
};

class CBehaviorGraphValueInterpolationNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_x1, m_x1, 256);
		MAKE_PADDED_VAR(float, m_y1, m_y1, 260);
		MAKE_PADDED_VAR(float, m_x2, m_x2, 264);
		MAKE_PADDED_VAR(float, m_y2, m_y2, 268);
	};
};

class CBehaviorGraphValueModifierNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 256);
	};
};

class CBehaviorGraphVectorMathNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_operation, m_operation, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 240);
		MAKE_PADDED_VAR(intptr_t, m_cachedSecondInputNode, m_cachedSecondInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedScalarInputNode, m_cachedScalarInputNode, 256);
	};
};

class CBehaviorGraphVectorValueBaseNode {
public:
	union {
	CBehaviorGraphVectorValueNode cbehaviorgraphvectorvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
	};
};

class CBehaviorGraphWaveValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 256);
		MAKE_PADDED_VAR(float, m_freq, m_freq, 260);
		MAKE_PADDED_VAR(float, m_amp, m_amp, 264);
	};
};

class CBehaviorMimicHeadConstraint {
public:
	union {
	IBehaviorMimicConstraint ibehaviormimicconstraint;
		MAKE_PADDED_VAR(char*, m_headTrack, m_headTrack, 88);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 136);
	};
};

class CBehaviorMimicLookAtConstraint {
public:
	union {
	IBehaviorMimicConstraint ibehaviormimicconstraint;
		MAKE_PADDED_VAR(char*, m_eyeHorLLeftTrack, m_eyeHorLLeftTrack, 88);
		MAKE_PADDED_VAR(char*, m_eyeHorRLeftTrack, m_eyeHorRLeftTrack, 100);
		MAKE_PADDED_VAR(char*, m_eyeHorLRightTrack, m_eyeHorLRightTrack, 112);
		MAKE_PADDED_VAR(char*, m_eyeHorRRightTrack, m_eyeHorRRightTrack, 124);
		MAKE_PADDED_VAR(char*, m_eyeVerULeftTrack, m_eyeVerULeftTrack, 136);
		MAKE_PADDED_VAR(char*, m_eyeVerDLeftTrack, m_eyeVerDLeftTrack, 148);
		MAKE_PADDED_VAR(char*, m_eyeVerURightTrack, m_eyeVerURightTrack, 160);
		MAKE_PADDED_VAR(char*, m_eyeVerDRightTrack, m_eyeVerDRightTrack, 172);
		MAKE_PADDED_VAR(char*, m_eyeLeftPlacerBone, m_eyeLeftPlacerBone, 184);
		MAKE_PADDED_VAR(char*, m_eyeRightPlacerBone, m_eyeRightPlacerBone, 196);
		MAKE_PADDED_VAR(float, m_eyeHorMax, m_eyeHorMax, 208);
		MAKE_PADDED_VAR(float, m_eyeVerMin, m_eyeVerMin, 212);
		MAKE_PADDED_VAR(float, m_eyeVerMax, m_eyeVerMax, 216);
		MAKE_PADDED_VAR(float, m_eyeVerOffset, m_eyeVerOffset, 220);
		MAKE_PADDED_VAR(float, m_eyesTrackClamp, m_eyesTrackClamp, 224);
		MAKE_PADDED_VAR(int32_t, m_blinkAnimName, m_blinkAnimName, 228);
		MAKE_PADDED_VAR(float, m_blinkTimeOffset, m_blinkTimeOffset, 232);
		MAKE_PADDED_VAR(float, m_blinkSpeed, m_blinkSpeed, 236);
		MAKE_PADDED_VAR(float, m_dampTime, m_dampTime, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetNode, m_cachedTargetNode, 816);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 824);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlEyesDataNode, m_cachedControlEyesDataNode, 832);
	};
};

class CBehaviorNodeParentChild {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_parentBoneName, m_parentBoneName, 248);
		MAKE_PADDED_VAR(char*, m_childBoneName, m_childBoneName, 260);
		MAKE_PADDED_VAR(Vector, m_offset, m_offset, 272);
		MAKE_PADDED_VAR(bool, m_changeOnlyTranslation, m_changeOnlyTranslation, 288);
	};
};

class CBehaviorVectorVariable {
public:
	union {
	CBaseBehaviorVariable cbasebehaviorvariable;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(uint32_t, m_varIndex, m_varIndex, 92);
		MAKE_PADDED_VAR(Vector, m_value, m_value, 96);
		MAKE_PADDED_VAR(Vector, m_defaultValue, m_defaultValue, 112);
		MAKE_PADDED_VAR(Vector, m_minValue, m_minValue, 128);
		MAKE_PADDED_VAR(Vector, m_maxValue, m_maxValue, 144);
		MAKE_PADDED_VAR(intptr_t, m_space, m_space, 160);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 164);
		MAKE_PADDED_VAR(bool, m_shouldBeSyncedBetweenGraphs, m_shouldBeSyncedBetweenGraphs, 168);
	};
};

class CBehTreeAtomicNOTCondition {
public:
	union {
	IBehTreeAtomicCondition ibehtreeatomiccondition;
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 88);
	};
};

class CBehTreeCarryingItemData {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_carriedItem, m_carriedItem, 16);
	};
};

class CBehTreeCommentDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeDecoratorRidingManagerDefinition {
public:
	union {
	IBehTreeNodeSpecialDefinition ibehtreenodespecialdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(intptr_t, m_mountHorseChild, m_mountHorseChild, 112);
		MAKE_PADDED_VAR(intptr_t, m_dismountHorseChild, m_dismountHorseChild, 120);
		MAKE_PADDED_VAR(intptr_t, m_mountBoatChild, m_mountBoatChild, 128);
		MAKE_PADDED_VAR(intptr_t, m_dismountBoatChild, m_dismountBoatChild, 136);
	};
};

class CBehTreeMachine {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_instance, m_instance, 88);
		MAKE_PADDED_VAR(CBehTree, m_aiRes, m_aiRes, 96);
		MAKE_PADDED_VAR(IAIParameters*, m_aiParameters[2], m_aiParameters, 104);
	};
};

class CBehTreeNodeAtomicMoveToDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
	};
};

class CBehTreeNodeAtomicMoveToPredefinedPathDefinition {
public:
	union {
	CBehTreeNodeAtomicMoveToDefinition cbehtreenodeatomicmovetodefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pathName, m_pathName, 184);
		MAKE_PADDED_VAR(CBehTreeValBool, m_upThePath, m_upThePath, 192);
		MAKE_PADDED_VAR(CBehTreeValBool, m_startFromBeginning, m_startFromBeginning, 200);
	};
};

class CBehTreeNodeBaseAtomicPursueTargetDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerance, m_tolerance, 120);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 128);
		MAKE_PADDED_VAR(CBehTreeValBool, m_moveOutsideNavdata, m_moveOutsideNavdata, 136);
	};
};

class CBehTreeNodeBaseConditionalTreeDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_invert, m_invert, 112);
	};
};

class CBehTreeNodeCombatTargetSelectionDefinition {
public:
	union {
	IBehTreeNodeCombatTargetSelectionBaseDefinition ibehtreenodecombattargetselectionbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValBool, m_targetOnlyPlayer, m_targetOnlyPlayer, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_hostileActorWeight, m_hostileActorWeight, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_currentTargetWeight, m_currentTargetWeight, 120);
		MAKE_PADDED_VAR(CBehTreeValInt, m_rememberedHits, m_rememberedHits, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_hitterWeight, m_hitterWeight, 136);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxWeightedDistance, m_maxWeightedDistance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceWeight, m_distanceWeight, 152);
		MAKE_PADDED_VAR(CBehTreeValInt, m_playerWeightProbability, m_playerWeightProbability, 160);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_playerWeight, m_playerWeight, 168);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_monsterWeight, m_monsterWeight, 176);
		MAKE_PADDED_VAR(intptr_t, m_skipVehicle, m_skipVehicle, 184);
		MAKE_PADDED_VAR(CBehTreeValInt, m_skipVehicleProbability, m_skipVehicleProbability, 192);
		MAKE_PADDED_VAR(intptr_t, m_skipUnreachable, m_skipUnreachable, 200);
		MAKE_PADDED_VAR(CBehTreeValInt, m_skipUnreachableProbability, m_skipUnreachableProbability, 208);
		MAKE_PADDED_VAR(intptr_t, m_skipNotThreatening, m_skipNotThreatening, 216);
		MAKE_PADDED_VAR(CBehTreeValInt, m_skipNotThreateningProbability, m_skipNotThreateningProbability, 224);
	};
};

class CBehTreeNodeConditionalChooseBranchDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child1, m_child1, 104);
		MAKE_PADDED_VAR(intptr_t, m_child2, m_child2, 112);
		MAKE_PADDED_VAR(CBehTreeValBool, m_val, m_val, 120);
	};
};

class CBehTreeNodeConditionalFlagTreeDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValInt, m_val, m_val, 112);
		MAKE_PADDED_VAR(int32_t, m_flag, m_flag, 120);
	};
};

class CBehTreeNodeConditionalTreeDefinition {
public:
	union {
	CBehTreeNodeBaseConditionalTreeDefinition cbehtreenodebaseconditionaltreedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_invert, m_invert, 112);
		MAKE_PADDED_VAR(CBehTreeValBool, m_val, m_val, 120);
	};
};

class CBehTreeNodeConditionalTreeNPCTypeDefinition {
public:
	union {
	CBehTreeNodeBaseConditionalTreeDefinition cbehtreenodebaseconditionaltreedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_invert, m_invert, 112);
		MAKE_PADDED_VAR(intptr_t, m_npcType, m_npcType, 120);
	};
};

class CBehTreeNodeCustomSteeringDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
	};
};

class CBehTreeNodeFleeReactionDefinition {
public:
	union {
	CBehTreeNodeAtomicMoveToDefinition cbehtreenodeatomicmovetodefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_fleeDistance, m_fleeDistance, 184);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_surrenderDistance, m_surrenderDistance, 192);
		MAKE_PADDED_VAR(float, m_queryRadiusRatio, m_queryRadiusRatio, 200);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 204);
	};
};

class CBehTreeNodeKeepDistanceDefinition {
public:
	union {
	CBehTreeNodeCustomSteeringDefinition cbehtreenodecustomsteeringdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distance, m_distance, 136);
		MAKE_PADDED_VAR(CBehTreeValBool, m_notFacingTarget, m_notFacingTarget, 144);
	};
};

class CBehTreeNodeParallelDefinition {
public:
	union {
	IBehTreeNodeSpecialDefinition ibehtreenodespecialdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child1, m_child1, 104);
		MAKE_PADDED_VAR(intptr_t, m_child2, m_child2, 112);
	};
};

class CBehTreeNodePredefinedPathDefinition {
public:
	union {
	CBehTreeNodeCustomSteeringDefinition cbehtreenodecustomsteeringdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pathName, m_pathName, 136);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathMargin, m_pathMargin, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerance, m_tolerance, 152);
		MAKE_PADDED_VAR(CBehTreeValBool, m_upThePath, m_upThePath, 160);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_arrivalDistance, m_arrivalDistance, 168);
		MAKE_PADDED_VAR(CBehTreeValBool, m_useExplorations, m_useExplorations, 176);
	};
};

class CBehTreeNodePredefinedPathRuberBandDefinition {
public:
	union {
	CBehTreeNodePredefinedPathDefinition cbehtreenodepredefinedpathdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pathName, m_pathName, 136);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathMargin, m_pathMargin, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerance, m_tolerance, 152);
		MAKE_PADDED_VAR(CBehTreeValBool, m_upThePath, m_upThePath, 160);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_arrivalDistance, m_arrivalDistance, 168);
		MAKE_PADDED_VAR(CBehTreeValBool, m_useExplorations, m_useExplorations, 176);
	};
};

class CBehTreeNodePredefinedPathWithCompanionDefinition {
public:
	union {
	CBehTreeNodePredefinedPathDefinition cbehtreenodepredefinedpathdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pathName, m_pathName, 136);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathMargin, m_pathMargin, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerance, m_tolerance, 152);
		MAKE_PADDED_VAR(CBehTreeValBool, m_upThePath, m_upThePath, 160);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_arrivalDistance, m_arrivalDistance, 168);
		MAKE_PADDED_VAR(CBehTreeValBool, m_useExplorations, m_useExplorations, 176);
		MAKE_PADDED_VAR(CBehTreeValCName, m_companionTag, m_companionTag, 184);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 192);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 200);
		MAKE_PADDED_VAR(CBehTreeValBool, m_progressWhenCompanionIsAhead, m_progressWhenCompanionIsAhead, 208);
		MAKE_PADDED_VAR(CBehTreeValBool, m_progressOnlyWhenCompanionIsAhead, m_progressOnlyWhenCompanionIsAhead, 216);
		MAKE_PADDED_VAR(CBehTreeValBool, m_matchCompanionSpeed, m_matchCompanionSpeed, 224);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepMovingWhenMaxDistanceReached, m_keepMovingWhenMaxDistanceReached, 232);
		MAKE_PADDED_VAR(intptr_t, m_moveTypeAfterMaxDistanceReached, m_moveTypeAfterMaxDistanceReached, 240);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_companionOffset, m_companionOffset, 256);
	};
};

class CBehTreeNodeRiderPursueHorseDefinition {
public:
	union {
	CBehTreeNodeBaseAtomicPursueTargetDefinition cbehtreenodebaseatomicpursuetargetdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerance, m_tolerance, 120);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 128);
		MAKE_PADDED_VAR(CBehTreeValBool, m_moveOutsideNavdata, m_moveOutsideNavdata, 136);
	};
};

class CBehTreeNodeStrafingDefinition {
public:
	union {
	CBehTreeNodeCustomSteeringDefinition cbehtreenodecustomsteeringdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(intptr_t, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_updateFrequency, m_updateFrequency, 136);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_steeringSpeed, m_steeringSpeed, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_steeringImportance, m_steeringImportance, 152);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_accelerationRate, m_accelerationRate, 160);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_strafingWeight, m_strafingWeight, 168);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_keepDistanceWeight, m_keepDistanceWeight, 176);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_randomStrafeWeight, m_randomStrafeWeight, 184);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_randomizationFrequency, m_randomizationFrequency, 192);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minRange, m_minRange, 200);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxRange, m_maxRange, 208);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_desiredSeparationAngle, m_desiredSeparationAngle, 216);
		MAKE_PADDED_VAR(CBehTreeValBool, m_gravityToSeparationAngle, m_gravityToSeparationAngle, 224);
		MAKE_PADDED_VAR(CBehTreeValBool, m_lockOrientation, m_lockOrientation, 232);
		MAKE_PADDED_VAR(CBehTreeValInt, m_strafingRing, m_strafingRing, 240);
		MAKE_PADDED_VAR(intptr_t, m_customAlgorithm, m_customAlgorithm, 248);
	};
};

class CBehTreeNodeUseExplorationActionDefinition {
public:
	union {
	CBehTreeNodeAtomicActionDefinition cbehtreenodeatomicactiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_explorationType, m_explorationType, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_entityTag, m_entityTag, 112);
	};
};

class CBehTreeStrafingAlgorithmFastSurroundDefinition {
public:
	union {
	CBehTreeStrafingAlgorithmDefinition cbehtreestrafingalgorithmdefinition;
		MAKE_PADDED_VAR(CBehTreeValFloat, m_usageDelay, m_usageDelay, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceToActivate, m_distanceToActivate, 96);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_speedMinToActivate, m_speedMinToActivate, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distanceToBreak, m_distanceToBreak, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_verticalHeadingLimitToBreak, m_verticalHeadingLimitToBreak, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_speedMinLimitToBreak, m_speedMinLimitToBreak, 128);
		MAKE_PADDED_VAR(intptr_t, m_surroundMoveType, m_surroundMoveType, 136);
	};
};

class CBehTreeValAreaSelectionMode {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 4);
	};
};

class CBehTreeValECombatTargetSelectionSkipTarget {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 4);
	};
};

class CBehTreeValEExplorationType {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 4);
	};
};

class CBehTreeValEHorseMoveType {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 4);
	};
};

class CBehTreeValEMoveType {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 4);
	};
};

class CBehTreeValEntityHandle {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 8);
	};
};

class CBehTreeValFormation {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 8);
	};
};

class CBehTreeValSteeringGraph {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 8);
	};
};

class CBehTreeValTemplate {
public:
	union {
	int32_t m_varName;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 8);
	};
};

class CBgNpcTriggerActionLookAt {
public:
	union {
	IBgNpcTriggerAction ibgnpctriggeraction;
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 88);
		MAKE_PADDED_VAR(bool, m_onlyPlayer, m_onlyPlayer, 92);
		MAKE_PADDED_VAR(float, m_maxDelay, m_maxDelay, 96);
	};
};

class CBitmapTexture {
public:
	union {
	ITexture itexture;
		MAKE_PADDED_VAR(uint32_t, m_width, m_width, 104);
		MAKE_PADDED_VAR(uint32_t, m_height, m_height, 108);
		MAKE_PADDED_VAR(intptr_t, m_format, m_format, 112);
		MAKE_PADDED_VAR(intptr_t, m_compression, m_compression, 116);
		MAKE_PADDED_VAR(int32_t, m_textureGroup, m_textureGroup, 120);
		MAKE_PADDED_VAR(intptr_t, m_sourceData, m_sourceData, 128);
		MAKE_PADDED_VAR(int32_t, m_pcDownscaleBias, m_pcDownscaleBias, 184);
		MAKE_PADDED_VAR(int32_t, m_xboneDownscaleBias, m_xboneDownscaleBias, 188);
		MAKE_PADDED_VAR(int32_t, m_ps4DownscaleBias, m_ps4DownscaleBias, 192);
		MAKE_PADDED_VAR(uint32_t, m_textureCacheKey, m_textureCacheKey, 200);
		MAKE_PADDED_VAR(char, m_residentMipIndex, m_residentMipIndex, 224);
	};
};

class CBPCPoseLookAtCurveTrajModifier {
public:
	union {
	IBehaviorPoseConstraintPoseLookAtModifier ibehaviorposeconstraintposelookatmodifier;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
		MAKE_PADDED_VAR(intptr_t, m_axis, m_axis, 96);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 104);
		MAKE_PADDED_VAR(float, m_maxAngle, m_maxAngle, 112);
		MAKE_PADDED_VAR(float, m_maxValue, m_maxValue, 116);
	};
};

class CBrushFace {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(IMaterial, m_material, m_material, 112);
		MAKE_PADDED_VAR(intptr_t, m_mapping, m_mapping, 120);
		MAKE_PADDED_VAR(float, m_scaleU, m_scaleU, 124);
		MAKE_PADDED_VAR(float, m_scaleV, m_scaleV, 128);
		MAKE_PADDED_VAR(float, m_offsetU, m_offsetU, 132);
		MAKE_PADDED_VAR(float, m_offsetV, m_offsetV, 136);
		MAKE_PADDED_VAR(float, m_rotation, m_rotation, 140);
		MAKE_PADDED_VAR(int32_t, m_renderFaceID, m_renderFaceID, 148);
	};
};

class CBuffImmunityParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(int32_t*, m_immunityTo[2], m_immunityTo, 112);
		MAKE_PADDED_VAR(intptr_t, m_flags, m_flags, 124);
	};
};

class CCCOpCustomizeInventory {
public:
	union {
	ICharacterCustomizationOperation icharactercustomizationoperation;
		MAKE_PADDED_VAR(intptr_t, m_template, m_template, 88);
		MAKE_PADDED_VAR(bool, m_applyMounts, m_applyMounts, 96);
	};
};

class CCCOpItemsRemoveMatchingTemplate {
public:
	union {
	ICharacterCustomizationOperation icharactercustomizationoperation;
		MAKE_PADDED_VAR(intptr_t, m_template, m_template, 88);
	};
};

class CChangeFacingDirectionTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(intptr_t, m_side, m_side, 88);
		MAKE_PADDED_VAR(float, m_angleDiffMin, m_angleDiffMin, 92);
		MAKE_PADDED_VAR(float, m_angleDiffMax, m_angleDiffMax, 96);
		MAKE_PADDED_VAR(float, m_startCheckingAfterTime, m_startCheckingAfterTime, 100);
		MAKE_PADDED_VAR(int32_t, m_requestedFacingDirectionWSVariableName, m_requestedFacingDirectionWSVariableName, 104);
		MAKE_PADDED_VAR(bool, m_dontChange, m_dontChange, 108);
	};
};

class CCharacter {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 104);
		MAKE_PADDED_VAR(intptr_t, m_parentCharacter, m_parentCharacter, 112);
		MAKE_PADDED_VAR(int32_t, m_i_voiceTag, m_i_voiceTag, 120);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 124);
		MAKE_PADDED_VAR(intptr_t, m_entityTemplate, m_entityTemplate, 136);
	};
};

class CCharacterControllerParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(float, m_height, m_height, 112);
		MAKE_PADDED_VAR(float, m_physicalRadius, m_physicalRadius, 116);
		MAKE_PADDED_VAR(float, m_baseVirtualCharacterRadius, m_baseVirtualCharacterRadius, 120);
		MAKE_PADDED_VAR(float, m_customAvoidanceRadius, m_customAvoidanceRadius, 124);
		MAKE_PADDED_VAR(float, m_stepOffset, m_stepOffset, 128);
		MAKE_PADDED_VAR(bool, m_collisionPrediction, m_collisionPrediction, 132);
		MAKE_PADDED_VAR(float, m_collisionPredictionMovementAdd, m_collisionPredictionMovementAdd, 136);
		MAKE_PADDED_VAR(float, m_collisionPredictionMovementMul, m_collisionPredictionMovementMul, 140);
		MAKE_PADDED_VAR(int32_t, m_collisionPredictionEventName, m_collisionPredictionEventName, 144);
		MAKE_PADDED_VAR(intptr_t, m_collisionType, m_collisionType, 152);
		MAKE_PADDED_VAR(float, m_interactionPriority, m_interactionPriority, 192);
		MAKE_PADDED_VAR(intptr_t, m_interactionPriorityEnum, m_interactionPriorityEnum, 196);
		MAKE_PADDED_VAR(SVirtualControllerParams*, m_virtualControllers[2], m_virtualControllers, 200);
		MAKE_PADDED_VAR(intptr_t, m_customMovableRep, m_customMovableRep, 216);
		MAKE_PADDED_VAR(SControllerRadiusParams*, m_radiuses[2], m_radiuses, 224);
		MAKE_PADDED_VAR(float, m_significance, m_significance, 236);
	};
};

class CClipMap {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(uint32_t, m_clipSize, m_clipSize, 88);
		MAKE_PADDED_VAR(uint32_t, m_clipmapSize, m_clipmapSize, 92);
		MAKE_PADDED_VAR(uint32_t, m_numClipmapStackLevels, m_numClipmapStackLevels, 96);
		MAKE_PADDED_VAR(uint32_t, m_tileRes, m_tileRes, 100);
		MAKE_PADDED_VAR(int32_t, m_colormapStartingMip, m_colormapStartingMip, 104);
		MAKE_PADDED_VAR(float, m_terrainSize, m_terrainSize, 108);
		MAKE_PADDED_VAR(float, m_lowestElevation, m_lowestElevation, 112);
		MAKE_PADDED_VAR(float, m_highestElevation, m_highestElevation, 116);
		MAKE_PADDED_VAR(Vector, m_terrainCorner, m_terrainCorner, 128);
		MAKE_PADDED_VAR(Vector2*, m_tileHeightRanges[2], m_tileHeightRanges, 204);
		MAKE_PADDED_VAR(float*, m_minWaterHeight[2], m_minWaterHeight, 216);
		MAKE_PADDED_VAR(uint32_t, m_numTilesPerEdge, m_numTilesPerEdge, 248);
		MAKE_PADDED_VAR(IMaterial, m_material, m_material, 256);
		MAKE_PADDED_VAR(STerrainTextureParameters*, m_textureParams[2], m_textureParams, 272);
		MAKE_PADDED_VAR(CVegetationBrush*, m_grassBrushes[2], m_grassBrushes, 284);
		MAKE_PADDED_VAR(intptr_t, m_cookedMipStackHeight, m_cookedMipStackHeight, 296);
		MAKE_PADDED_VAR(intptr_t, m_cookedMipStackControl, m_cookedMipStackControl, 320);
		MAKE_PADDED_VAR(intptr_t, m_cookedMipStackColor, m_cookedMipStackColor, 344);
		MAKE_PADDED_VAR(intptr_t, m_cookedData, m_cookedData, 440);
	};
};

class CCombatCameraPositionController {
public:
	union {
	ICustomCameraPositionController icustomcamerapositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(bool, m_enableAutoCollisionAvoidance, m_enableAutoCollisionAvoidance, 96);
		MAKE_PADDED_VAR(bool, m_enableScreenSpaceCorrections, m_enableScreenSpaceCorrections, 97);
		MAKE_PADDED_VAR(float, m_offsetSmoothTime, m_offsetSmoothTime, 184);
		MAKE_PADDED_VAR(float, m_defaultCameraAngle, m_defaultCameraAngle, 256);
		MAKE_PADDED_VAR(float, m_defaultCameraZOffset, m_defaultCameraZOffset, 260);
		MAKE_PADDED_VAR(float, m_flipCameraAngle, m_flipCameraAngle, 264);
		MAKE_PADDED_VAR(intptr_t, m_followRotation, m_followRotation, 272);
		MAKE_PADDED_VAR(intptr_t, m_followRotationSprint, m_followRotationSprint, 280);
		MAKE_PADDED_VAR(intptr_t, m_followRotationFlip, m_followRotationFlip, 288);
		MAKE_PADDED_VAR(intptr_t, m_slopeCameraAngleChange, m_slopeCameraAngleChange, 296);
		MAKE_PADDED_VAR(intptr_t, m_slopeAngleCameraSpaceMultiplier, m_slopeAngleCameraSpaceMultiplier, 304);
		MAKE_PADDED_VAR(intptr_t, m_slopeResetTimeout, m_slopeResetTimeout, 312);
		MAKE_PADDED_VAR(intptr_t, m_cameraPivotDampMult, m_cameraPivotDampMult, 320);
		MAKE_PADDED_VAR(float, m_combatPivotDampMult, m_combatPivotDampMult, 480);
		MAKE_PADDED_VAR(float, m_bigMonsterHeightThreshold, m_bigMonsterHeightThreshold, 484);
		MAKE_PADDED_VAR(float, m_180FlipThreshold, m_180FlipThreshold, 488);
		MAKE_PADDED_VAR(int32_t, m_explorationRotationCtrlName, m_explorationRotationCtrlName, 496);
		MAKE_PADDED_VAR(int32_t, m_combatRotationCtrlName, m_combatRotationCtrlName, 500);
		MAKE_PADDED_VAR(float, m_combatPitch, m_combatPitch, 504);
		MAKE_PADDED_VAR(SCameraDistanceInfo*, m_combatEnemiesToDistanceMap[2], m_combatEnemiesToDistanceMap, 508);
		MAKE_PADDED_VAR(uint32_t, m_bigMonsterCountMultiplier, m_bigMonsterCountMultiplier, 520);
		MAKE_PADDED_VAR(intptr_t, m_monsterSizeAdditiveOffset, m_monsterSizeAdditiveOffset, 528);
		MAKE_PADDED_VAR(intptr_t, m_monsterSizeAdditivePitch, m_monsterSizeAdditivePitch, 536);
		MAKE_PADDED_VAR(intptr_t, m_1v1Pitch, m_1v1Pitch, 544);
		MAKE_PADDED_VAR(intptr_t, m_1v1AdditivePitch, m_1v1AdditivePitch, 552);
		MAKE_PADDED_VAR(intptr_t, m_1v1BigMonsterPitch, m_1v1BigMonsterPitch, 560);
		MAKE_PADDED_VAR(intptr_t, m_1v1BMAdditivePitch, m_1v1BMAdditivePitch, 568);
		MAKE_PADDED_VAR(intptr_t, m_1v1Distance, m_1v1Distance, 576);
		MAKE_PADDED_VAR(intptr_t, m_1v1SignificanceAddDistance, m_1v1SignificanceAddDistance, 584);
		MAKE_PADDED_VAR(intptr_t, m_1v1ZOffset, m_1v1ZOffset, 592);
		MAKE_PADDED_VAR(intptr_t, m_1v1BigMonsterZOffset, m_1v1BigMonsterZOffset, 600);
		MAKE_PADDED_VAR(float, m_1v1PivotMultiplier, m_1v1PivotMultiplier, 608);
		MAKE_PADDED_VAR(float, m_1v1KeepAngle, m_1v1KeepAngle, 612);
		MAKE_PADDED_VAR(float, m_1v1OffScreenMult, m_1v1OffScreenMult, 616);
		MAKE_PADDED_VAR(int32_t, m_oneOnOneCtrlName, m_oneOnOneCtrlName, 620);
		MAKE_PADDED_VAR(float, m_screenSpaceXRatio, m_screenSpaceXRatio, 624);
		MAKE_PADDED_VAR(float, m_screenSpaceYRatio, m_screenSpaceYRatio, 628);
		MAKE_PADDED_VAR(float, m_ssCorrectionXTreshold, m_ssCorrectionXTreshold, 632);
		MAKE_PADDED_VAR(float, m_ssCorrectionYTreshold, m_ssCorrectionYTreshold, 636);
		MAKE_PADDED_VAR(float, m_ssPivotCorrSmooth, m_ssPivotCorrSmooth, 640);
		MAKE_PADDED_VAR(float, m_ssDistCorrSmooth, m_ssDistCorrSmooth, 736);
		MAKE_PADDED_VAR(bool, m_useExplorationCamInSprint, m_useExplorationCamInSprint, 776);
		MAKE_PADDED_VAR(intptr_t, m_collisionController, m_collisionController, 784);
		MAKE_PADDED_VAR(intptr_t, m_collisionController2, m_collisionController2, 792);
		MAKE_PADDED_VAR(Vector, m_defaultCollisionOriginOffset, m_defaultCollisionOriginOffset, 800);
	};
};

class CCommunity {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_communityTable[2], m_communityTable, 104);
		MAKE_PADDED_VAR(CSStoryPhaseTimetableEntry*, m_storyPhaseTimetable[2], m_storyPhaseTimetable, 116);
		MAKE_PADDED_VAR(intptr_t, m_spawnsetType, m_spawnsetType, 152);
	};
};

class CCommunitySpawnStrategy {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_strategy, m_strategy, 88);
	};
};

class CCreatureEntry {
public:
	union {
	CBaseCreatureEntry cbasecreatureentry;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(ISpawnTreeInitializer*, m_initializers[2], m_initializers, 144);
		MAKE_PADDED_VAR(int32_t, m_quantityMin, m_quantityMin, 156);
		MAKE_PADDED_VAR(int32_t, m_quantityMax, m_quantityMax, 160);
		MAKE_PADDED_VAR(float, m_spawnInterval, m_spawnInterval, 164);
		MAKE_PADDED_VAR(float, m_waveDelay, m_waveDelay, 168);
		MAKE_PADDED_VAR(float, m_waveCounterHitAtDeathRatio, m_waveCounterHitAtDeathRatio, 172);
		MAKE_PADDED_VAR(bool, m_randomizeRotation, m_randomizeRotation, 176);
		MAKE_PADDED_VAR(int32_t, m_group, m_group, 180);
		MAKE_PADDED_VAR(intptr_t, m_baseSpawner, m_baseSpawner, 184);
		MAKE_PADDED_VAR(GameTime, m_recalculateDelay, m_recalculateDelay, 248);
		MAKE_PADDED_VAR(int32_t, m_creatureDefinition, m_creatureDefinition, 592);
	};
};

class CCreaturePartyEntry {
public:
	union {
	CBaseCreatureEntry cbasecreatureentry;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(ISpawnTreeInitializer*, m_initializers[2], m_initializers, 144);
		MAKE_PADDED_VAR(int32_t, m_quantityMin, m_quantityMin, 156);
		MAKE_PADDED_VAR(int32_t, m_quantityMax, m_quantityMax, 160);
		MAKE_PADDED_VAR(float, m_spawnInterval, m_spawnInterval, 164);
		MAKE_PADDED_VAR(float, m_waveDelay, m_waveDelay, 168);
		MAKE_PADDED_VAR(float, m_waveCounterHitAtDeathRatio, m_waveCounterHitAtDeathRatio, 172);
		MAKE_PADDED_VAR(bool, m_randomizeRotation, m_randomizeRotation, 176);
		MAKE_PADDED_VAR(int32_t, m_group, m_group, 180);
		MAKE_PADDED_VAR(intptr_t, m_baseSpawner, m_baseSpawner, 184);
		MAKE_PADDED_VAR(GameTime, m_recalculateDelay, m_recalculateDelay, 248);
		MAKE_PADDED_VAR(intptr_t*, m_subDefinitions[2], m_subDefinitions, 592);
		MAKE_PADDED_VAR(CPartySpawnOrganizer, m_partySpawnOrganizer, m_partySpawnOrganizer, 608);
		MAKE_PADDED_VAR(bool, m_blockChats, m_blockChats, 616);
		MAKE_PADDED_VAR(bool, m_synchronizeWork, m_synchronizeWork, 617);
	};
};

class CCurve {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_dataBaseType, m_dataBaseType, 112);
		MAKE_PADDED_VAR(bool, m_data_m_loop, m_data_m_loop, 116);
		MAKE_PADDED_VAR(Color, m_color, m_color, 136);
	};
};

class CCustomBehTreeActorLatentAction {
public:
	union {
	IActorLatentAction iactorlatentaction;
		MAKE_PADDED_VAR(intptr_t, m_behTree, m_behTree, 72);
	};
};

class CCustomCameraAutoAvoidanceCollisionController {
public:
	union {
	ICustomCameraCollisionController icustomcameracollisioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(intptr_t, m_catchUpCurve, m_catchUpCurve, 168);
	};
};

class CCustomCameraBlendPPC {
public:
	union {
	ICustomCameraPivotPositionController icustomcamerapivotpositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_offsetZ, m_offsetZ, 96);
		MAKE_PADDED_VAR(float, m_pivotZSmoothTime, m_pivotZSmoothTime, 100);
		MAKE_PADDED_VAR(intptr_t, m_from, m_from, 128);
		MAKE_PADDED_VAR(intptr_t, m_to, m_to, 136);
	};
};

class CCustomCameraSimplePositionController {
public:
	union {
	ICustomCameraPositionController icustomcamerapositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(bool, m_enableAutoCollisionAvoidance, m_enableAutoCollisionAvoidance, 96);
		MAKE_PADDED_VAR(bool, m_enableScreenSpaceCorrections, m_enableScreenSpaceCorrections, 97);
		MAKE_PADDED_VAR(intptr_t, m_collisionController, m_collisionController, 176);
		MAKE_PADDED_VAR(intptr_t, m_collisionController2, m_collisionController2, 184);
	};
};

class CDamageData {
public:
	union {
	CBaseDamage cbasedamage;
		MAKE_PADDED_VAR(Vector, m_hitLocation, m_hitLocation, 96);
		MAKE_PADDED_VAR(Vector, m_momentum, m_momentum, 112);
		MAKE_PADDED_VAR(IScriptable, m_causer, m_causer, 128);
		MAKE_PADDED_VAR(intptr_t, m_attacker, m_attacker, 136);
		MAKE_PADDED_VAR(intptr_t, m_victim, m_victim, 144);
		MAKE_PADDED_VAR(bool, m_hitReactionAnimRequested, m_hitReactionAnimRequested, 152);
		MAKE_PADDED_VAR(SProcessedDamage, m_processedDmg, m_processedDmg, 160);
		MAKE_PADDED_VAR(bool, m_additiveHitReactionAnimRequested, m_additiveHitReactionAnimRequested, 176);
		MAKE_PADDED_VAR(bool, m_customHitReactionRequested, m_customHitReactionRequested, 177);
		MAKE_PADDED_VAR(bool, m_isDoTDamage, m_isDoTDamage, 178);
	};
};

class CDeactivateSpawnset {
public:
	union {
	IQuestSpawnsetAction iquestspawnsetaction;
		MAKE_PADDED_VAR(CCommunity, m_spawnset, m_spawnset, 88);
	};
};

class CDecalSpawner {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_material, m_material, 88);
		MAKE_PADDED_VAR(float, m_farZ, m_farZ, 136);
		MAKE_PADDED_VAR(float, m_nearZ, m_nearZ, 140);
		MAKE_PADDED_VAR(intptr_t, m_size, m_size, 144);
		MAKE_PADDED_VAR(float, m_depthFadePower, m_depthFadePower, 152);
		MAKE_PADDED_VAR(float, m_normalFadeBias, m_normalFadeBias, 156);
		MAKE_PADDED_VAR(float, m_normalFadeScale, m_normalFadeScale, 160);
		MAKE_PADDED_VAR(bool, m_doubleSided, m_doubleSided, 164);
		MAKE_PADDED_VAR(intptr_t, m_projectionMode, m_projectionMode, 168);
		MAKE_PADDED_VAR(intptr_t, m_decalLifetime, m_decalLifetime, 176);
		MAKE_PADDED_VAR(float, m_decalFadeTime, m_decalFadeTime, 184);
		MAKE_PADDED_VAR(float, m_decalFadeInTime, m_decalFadeInTime, 188);
		MAKE_PADDED_VAR(bool, m_projectOnlyOnStatic, m_projectOnlyOnStatic, 192);
		MAKE_PADDED_VAR(float, m_startScale, m_startScale, 196);
		MAKE_PADDED_VAR(float, m_scaleTime, m_scaleTime, 200);
		MAKE_PADDED_VAR(bool, m_useVerticalProjection, m_useVerticalProjection, 204);
		MAKE_PADDED_VAR(intptr_t, m_spawnPriority, m_spawnPriority, 208);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 212);
		MAKE_PADDED_VAR(float, m_chance, m_chance, 216);
		MAKE_PADDED_VAR(float, m_spawnFrequency, m_spawnFrequency, 220);
	};
};

class CDismembermentWound {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 16);
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 24);
		MAKE_PADDED_VAR(int32_t, m_excludeTag, m_excludeTag, 32);
		MAKE_PADDED_VAR(int32_t*, m_disabledOnAppearances[2], m_disabledOnAppearances, 36);
		MAKE_PADDED_VAR(intptr_t, m_fillMesh, m_fillMesh, 48);
		MAKE_PADDED_VAR(intptr_t*, m_singleSpawnArray[2], m_singleSpawnArray, 56);
		MAKE_PADDED_VAR(intptr_t, m_particles, m_particles, 72);
		MAKE_PADDED_VAR(intptr_t, m_attachedParticles, m_attachedParticles, 104);
		MAKE_PADDED_VAR(bool, m_isExplosionWound, m_isExplosionWound, 136);
		MAKE_PADDED_VAR(bool, m_isFrostWound, m_isFrostWound, 137);
		MAKE_PADDED_VAR(int32_t, m_mainEntityCurveName, m_mainEntityCurveName, 140);
		MAKE_PADDED_VAR(intptr_t, m_decal, m_decal, 144);
	};
};

class CDropPhysicsSetup {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(intptr_t, m_particles, m_particles, 96);
		MAKE_PADDED_VAR(intptr_t*, m_curves[2], m_curves, 128);
	};
};

class CDyngResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(intptr_t, m_dyngSkeleton, m_dyngSkeleton, 120);
		MAKE_PADDED_VAR(char**, m_nodeNames[2], m_nodeNames, 128);
		MAKE_PADDED_VAR(char**, m_nodeParents[2], m_nodeParents, 140);
		MAKE_PADDED_VAR(float*, m_nodeMasses[2], m_nodeMasses, 152);
		MAKE_PADDED_VAR(float*, m_nodeStifnesses[2], m_nodeStifnesses, 164);
		MAKE_PADDED_VAR(float*, m_nodeDistances[2], m_nodeDistances, 176);
		MAKE_PADDED_VAR(Matrix*, m_nodeTransforms[2], m_nodeTransforms, 188);
		MAKE_PADDED_VAR(int32_t*, m_linkTypes[2], m_linkTypes, 200);
		MAKE_PADDED_VAR(float*, m_linkLengths[2], m_linkLengths, 212);
		MAKE_PADDED_VAR(int32_t*, m_linkAs[2], m_linkAs, 224);
		MAKE_PADDED_VAR(int32_t*, m_linkBs[2], m_linkBs, 236);
		MAKE_PADDED_VAR(int32_t*, m_triangleAs[2], m_triangleAs, 248);
		MAKE_PADDED_VAR(int32_t*, m_triangleBs[2], m_triangleBs, 260);
		MAKE_PADDED_VAR(int32_t*, m_triangleCs[2], m_triangleCs, 272);
		MAKE_PADDED_VAR(char**, m_collisionParents[2], m_collisionParents, 284);
		MAKE_PADDED_VAR(float*, m_collisionRadiuses[2], m_collisionRadiuses, 296);
		MAKE_PADDED_VAR(float*, m_collisionHeights[2], m_collisionHeights, 308);
		MAKE_PADDED_VAR(Matrix*, m_collisionTransforms[2], m_collisionTransforms, 320);
	};
};

class CEdSpawnEntitySetupEffector {
public:
	union {
	IEdEntitySetupEffector iedentitysetupeffector;
		MAKE_PADDED_VAR(intptr_t, m_template, m_template, 48);
		MAKE_PADDED_VAR(Vector, m_localPosition, m_localPosition, 80);
		MAKE_PADDED_VAR(EulerAngles, m_localOrientation, m_localOrientation, 96);
		MAKE_PADDED_VAR(bool, m_detachTemplate, m_detachTemplate, 108);
		MAKE_PADDED_VAR(intptr_t, m_extraTags, m_extraTags, 112);
	};
};

class CEncounterCreatureDefinition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_definitionName, m_definitionName, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityTemplate, m_entityTemplate, 96);
		MAKE_PADDED_VAR(uint16_t, m_totalSpawnLimit, m_totalSpawnLimit, 128);
		MAKE_PADDED_VAR(uint16_t, m_maxSpawnedAtOnce, m_maxSpawnedAtOnce, 130);
		MAKE_PADDED_VAR(bool, m_override, m_override, 136);
		MAKE_PADDED_VAR(int32_t, m_forcedAppearance, m_forcedAppearance, 140);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 160);
	};
};

class CEncounterGlobalSettings {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_defaultSpawnStrategy, m_defaultSpawnStrategy, 88);
		MAKE_PADDED_VAR(SEncounterGroupLimit*, m_groupLimits[2], m_groupLimits, 96);
	};
};

class CEncounterParameters {
public:
	union {
	IAISpawnTreeParameters iaispawntreeparameters;
		MAKE_PADDED_VAR(intptr_t, m_encounter, m_encounter, 72);
		MAKE_PADDED_VAR(IAISpawnTreeSubParameters*, m_globalDefaults[2], m_globalDefaults, 80);
	};
};

class CEntityOnLayerReference {
public:
	union {
	intptr_t m_layerGuid;
		MAKE_PADDED_VAR(intptr_t, m_entityGuid, m_entityGuid, 16);
	};
};

class CEntityTemplate {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_entityObject, m_entityObject, 104);
		MAKE_PADDED_VAR(int32_t, m_entityClass, m_entityClass, 112);
		MAKE_PADDED_VAR(CEntityBodyPart*, m_bodyParts[2], m_bodyParts, 116);
		MAKE_PADDED_VAR(CEntityAppearance*, m_appearances[2], m_appearances, 128);
		MAKE_PADDED_VAR(int32_t*, m_usedAppearances[2], m_usedAppearances, 140);
		MAKE_PADDED_VAR(VoicetagAppearancePair*, m_voicetagAppearances[2], m_voicetagAppearances, 152);
		MAKE_PADDED_VAR(intptr_t*, m_effects[2], m_effects, 164);
		MAKE_PADDED_VAR(intptr_t*, m_templateParams[2], m_templateParams, 176);
		MAKE_PADDED_VAR(intptr_t*, m_slots[2], m_slots, 188);
		MAKE_PADDED_VAR(SEntityTemplateColoringEntry*, m_coloringEntries[2], m_coloringEntries, 200);
		MAKE_PADDED_VAR(SComponentInstancePropertyEntry*, m_instancePropEntries[2], m_instancePropEntries, 212);
		MAKE_PADDED_VAR(intptr_t*, m_cookedEffects[2], m_cookedEffects, 224);
		MAKE_PADDED_VAR(uint32_t, m_cookedEffectsVersion, m_cookedEffectsVersion, 248);
		MAKE_PADDED_VAR(intptr_t*, m_includes[2], m_includes, 252);
		MAKE_PADDED_VAR(Vector, m_backgroundOffset, m_backgroundOffset, 288);
		MAKE_PADDED_VAR(bool, m_properOverrides, m_properOverrides, 304);
		MAKE_PADDED_VAR(intptr_t, m_dataCompilationTime, m_dataCompilationTime, 308);
		MAKE_PADDED_VAR(SEntityTemplateOverride*, m_overrides[2], m_overrides, 316);
		MAKE_PADDED_VAR(char*, m_flatCompiledData[2], m_flatCompiledData, 328);
		MAKE_PADDED_VAR(SStreamedAttachment*, m_streamedAttachments[2], m_streamedAttachments, 340);
	};
};

class CEntityTemplateCookedEffect {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(int32_t, m_animName, m_animName, 4);
		MAKE_PADDED_VAR(intptr_t, m_buffer, m_buffer, 8);
	};
};

class CEnvAmbientProbesGenParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_colorAmbient, m_colorAmbient, 8);
		MAKE_PADDED_VAR(intptr_t, m_colorSceneAdd, m_colorSceneAdd, 56);
		MAKE_PADDED_VAR(intptr_t, m_colorSkyTop, m_colorSkyTop, 104);
		MAKE_PADDED_VAR(intptr_t, m_colorSkyHorizon, m_colorSkyHorizon, 152);
		MAKE_PADDED_VAR(intptr_t, m_skyShape, m_skyShape, 200);
	};
};

class CEnvBloomNewParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_brightPassWeights, m_brightPassWeights, 8);
		MAKE_PADDED_VAR(intptr_t, m_color, m_color, 56);
		MAKE_PADDED_VAR(intptr_t, m_dirtColor, m_dirtColor, 104);
		MAKE_PADDED_VAR(intptr_t, m_threshold, m_threshold, 152);
		MAKE_PADDED_VAR(intptr_t, m_thresholdRange, m_thresholdRange, 200);
		MAKE_PADDED_VAR(intptr_t, m_brightnessMax, m_brightnessMax, 248);
		MAKE_PADDED_VAR(intptr_t, m_shaftsColor, m_shaftsColor, 296);
		MAKE_PADDED_VAR(intptr_t, m_shaftsRadius, m_shaftsRadius, 344);
		MAKE_PADDED_VAR(intptr_t, m_shaftsShapeExp, m_shaftsShapeExp, 392);
		MAKE_PADDED_VAR(intptr_t, m_shaftsShapeInvSquare, m_shaftsShapeInvSquare, 440);
		MAKE_PADDED_VAR(intptr_t, m_shaftsThreshold, m_shaftsThreshold, 488);
		MAKE_PADDED_VAR(intptr_t, m_shaftsThresholdRange, m_shaftsThresholdRange, 536);
	};
};

class CEnvCameraLightParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_color, m_color, 8);
		MAKE_PADDED_VAR(intptr_t, m_attenuation, m_attenuation, 56);
		MAKE_PADDED_VAR(intptr_t, m_radius, m_radius, 104);
		MAKE_PADDED_VAR(intptr_t, m_offsetFront, m_offsetFront, 152);
		MAKE_PADDED_VAR(intptr_t, m_offsetRight, m_offsetRight, 200);
		MAKE_PADDED_VAR(intptr_t, m_offsetUp, m_offsetUp, 248);
	};
};

class CEnvCameraLightsSetupParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_gameplayLight0, m_gameplayLight0, 8);
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_gameplayLight1, m_gameplayLight1, 304);
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_sceneLight0, m_sceneLight0, 600);
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_sceneLight1, m_sceneLight1, 896);
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_dialogLight0, m_dialogLight0, 1192);
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_dialogLight1, m_dialogLight1, 1488);
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_interiorLight0, m_interiorLight0, 1784);
		MAKE_PADDED_VAR(CEnvCameraLightParameters, m_interiorLight1, m_interiorLight1, 2080);
		MAKE_PADDED_VAR(intptr_t, m_playerInInteriorLightsScale, m_playerInInteriorLightsScale, 2376);
		MAKE_PADDED_VAR(intptr_t, m_sceneLightColorInterior0, m_sceneLightColorInterior0, 2424);
		MAKE_PADDED_VAR(intptr_t, m_sceneLightColorInterior1, m_sceneLightColorInterior1, 2472);
		MAKE_PADDED_VAR(intptr_t, m_cameraLightsNonCharacterScale, m_cameraLightsNonCharacterScale, 2520);
	};
};

class CEnvColorGroupsParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_defaultGroup, m_defaultGroup, 8);
		MAKE_PADDED_VAR(intptr_t, m_lightsDefault, m_lightsDefault, 56);
		MAKE_PADDED_VAR(intptr_t, m_lightsDawn, m_lightsDawn, 104);
		MAKE_PADDED_VAR(intptr_t, m_lightsNoon, m_lightsNoon, 152);
		MAKE_PADDED_VAR(intptr_t, m_lightsEvening, m_lightsEvening, 200);
		MAKE_PADDED_VAR(intptr_t, m_lightsNight, m_lightsNight, 248);
		MAKE_PADDED_VAR(intptr_t, m_fxDefault, m_fxDefault, 296);
		MAKE_PADDED_VAR(intptr_t, m_fxFire, m_fxFire, 344);
		MAKE_PADDED_VAR(intptr_t, m_fxFireFlares, m_fxFireFlares, 392);
		MAKE_PADDED_VAR(intptr_t, m_fxFireLight, m_fxFireLight, 440);
		MAKE_PADDED_VAR(intptr_t, m_fxSmoke, m_fxSmoke, 488);
		MAKE_PADDED_VAR(intptr_t, m_fxSmokeExplosion, m_fxSmokeExplosion, 536);
		MAKE_PADDED_VAR(intptr_t, m_fxSky, m_fxSky, 584);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyAlpha, m_fxSkyAlpha, 632);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyNight, m_fxSkyNight, 680);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyNightAlpha, m_fxSkyNightAlpha, 728);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyDawn, m_fxSkyDawn, 776);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyDawnAlpha, m_fxSkyDawnAlpha, 824);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyNoon, m_fxSkyNoon, 872);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyNoonAlpha, m_fxSkyNoonAlpha, 920);
		MAKE_PADDED_VAR(intptr_t, m_fxSkySunset, m_fxSkySunset, 968);
		MAKE_PADDED_VAR(intptr_t, m_fxSkySunsetAlpha, m_fxSkySunsetAlpha, 1016);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyRain, m_fxSkyRain, 1064);
		MAKE_PADDED_VAR(intptr_t, m_fxSkyRainAlpha, m_fxSkyRainAlpha, 1112);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsMiddle, m_mainCloudsMiddle, 1160);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsMiddleAlpha, m_mainCloudsMiddleAlpha, 1208);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsFront, m_mainCloudsFront, 1256);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsFrontAlpha, m_mainCloudsFrontAlpha, 1304);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsBack, m_mainCloudsBack, 1352);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsBackAlpha, m_mainCloudsBackAlpha, 1400);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsRim, m_mainCloudsRim, 1448);
		MAKE_PADDED_VAR(intptr_t, m_mainCloudsRimAlpha, m_mainCloudsRimAlpha, 1496);
		MAKE_PADDED_VAR(intptr_t, m_backgroundCloudsFront, m_backgroundCloudsFront, 1544);
		MAKE_PADDED_VAR(intptr_t, m_backgroundCloudsFrontAlpha, m_backgroundCloudsFrontAlpha, 1592);
		MAKE_PADDED_VAR(intptr_t, m_backgroundCloudsBack, m_backgroundCloudsBack, 1640);
		MAKE_PADDED_VAR(intptr_t, m_backgroundCloudsBackAlpha, m_backgroundCloudsBackAlpha, 1688);
		MAKE_PADDED_VAR(intptr_t, m_backgroundHazeFront, m_backgroundHazeFront, 1736);
		MAKE_PADDED_VAR(intptr_t, m_backgroundHazeFrontAlpha, m_backgroundHazeFrontAlpha, 1784);
		MAKE_PADDED_VAR(intptr_t, m_backgroundHazeBack, m_backgroundHazeBack, 1832);
		MAKE_PADDED_VAR(intptr_t, m_backgroundHazeBackAlpha, m_backgroundHazeBackAlpha, 1880);
		MAKE_PADDED_VAR(intptr_t, m_fxBlood, m_fxBlood, 1928);
		MAKE_PADDED_VAR(intptr_t, m_fxWater, m_fxWater, 1976);
		MAKE_PADDED_VAR(intptr_t, m_fxFog, m_fxFog, 2024);
		MAKE_PADDED_VAR(intptr_t, m_fxTrails, m_fxTrails, 2072);
		MAKE_PADDED_VAR(intptr_t, m_fxScreenParticles, m_fxScreenParticles, 2120);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaft, m_fxLightShaft, 2168);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftSun, m_fxLightShaftSun, 2216);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftInteriorDawn, m_fxLightShaftInteriorDawn, 2264);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftSpotlightDawn, m_fxLightShaftSpotlightDawn, 2312);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftReflectionLightDawn, m_fxLightShaftReflectionLightDawn, 2360);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftInteriorNoon, m_fxLightShaftInteriorNoon, 2408);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftSpotlightNoon, m_fxLightShaftSpotlightNoon, 2456);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftReflectionLightNoon, m_fxLightShaftReflectionLightNoon, 2504);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftInteriorEvening, m_fxLightShaftInteriorEvening, 2552);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftSpotlightEvening, m_fxLightShaftSpotlightEvening, 2600);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftReflectionLightEvening, m_fxLightShaftReflectionLightEvening, 2648);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftInteriorNight, m_fxLightShaftInteriorNight, 2696);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftSpotlightNight, m_fxLightShaftSpotlightNight, 2744);
		MAKE_PADDED_VAR(intptr_t, m_fxLightShaftReflectionLightNight, m_fxLightShaftReflectionLightNight, 2792);
		MAKE_PADDED_VAR(bool, m_activatedCustom0, m_activatedCustom0, 2840);
		MAKE_PADDED_VAR(intptr_t, m_customGroup0, m_customGroup0, 2848);
		MAKE_PADDED_VAR(bool, m_activatedCustom1, m_activatedCustom1, 2896);
		MAKE_PADDED_VAR(intptr_t, m_customGroup1, m_customGroup1, 2904);
		MAKE_PADDED_VAR(bool, m_activatedCustom2, m_activatedCustom2, 2952);
		MAKE_PADDED_VAR(intptr_t, m_customGroup2, m_customGroup2, 2960);
	};
};

class CEnvColorModTransparencyParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_commonFarDist, m_commonFarDist, 8);
		MAKE_PADDED_VAR(intptr_t, m_filterNearColor, m_filterNearColor, 56);
		MAKE_PADDED_VAR(intptr_t, m_filterFarColor, m_filterFarColor, 104);
		MAKE_PADDED_VAR(intptr_t, m_contrastNearStrength, m_contrastNearStrength, 152);
		MAKE_PADDED_VAR(intptr_t, m_contrastFarStrength, m_contrastFarStrength, 200);
		MAKE_PADDED_VAR(intptr_t, m_autoHideCustom0, m_autoHideCustom0, 248);
		MAKE_PADDED_VAR(intptr_t, m_autoHideCustom1, m_autoHideCustom1, 352);
		MAKE_PADDED_VAR(intptr_t, m_autoHideCustom2, m_autoHideCustom2, 456);
		MAKE_PADDED_VAR(intptr_t, m_autoHideCustom3, m_autoHideCustom3, 560);
	};
};

class CEnvDepthOfFieldParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_nearBlurDist, m_nearBlurDist, 8);
		MAKE_PADDED_VAR(intptr_t, m_nearFocusDist, m_nearFocusDist, 56);
		MAKE_PADDED_VAR(intptr_t, m_farFocusDist, m_farFocusDist, 104);
		MAKE_PADDED_VAR(intptr_t, m_farBlurDist, m_farBlurDist, 152);
		MAKE_PADDED_VAR(intptr_t, m_intensity, m_intensity, 200);
		MAKE_PADDED_VAR(bool, m_activatedSkyThreshold, m_activatedSkyThreshold, 248);
		MAKE_PADDED_VAR(float, m_skyThreshold, m_skyThreshold, 252);
		MAKE_PADDED_VAR(bool, m_activatedSkyRange, m_activatedSkyRange, 256);
		MAKE_PADDED_VAR(float, m_skyRange, m_skyRange, 260);
	};
};

class CEnvDialogLightParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_lightColor, m_lightColor, 8);
		MAKE_PADDED_VAR(intptr_t, m_lightColor2, m_lightColor2, 56);
		MAKE_PADDED_VAR(intptr_t, m_lightColor3, m_lightColor3, 104);
	};
};

class CEnvDistanceRangeParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_distance, m_distance, 8);
		MAKE_PADDED_VAR(intptr_t, m_range, m_range, 56);
	};
};

class CEnvFinalColorBalanceParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(bool, m_activatedBalanceMap, m_activatedBalanceMap, 1);
		MAKE_PADDED_VAR(bool, m_activatedParametricBalance, m_activatedParametricBalance, 2);
		MAKE_PADDED_VAR(intptr_t, m_vignetteWeights, m_vignetteWeights, 8);
		MAKE_PADDED_VAR(intptr_t, m_vignetteColor, m_vignetteColor, 56);
		MAKE_PADDED_VAR(intptr_t, m_vignetteOpacity, m_vignetteOpacity, 104);
		MAKE_PADDED_VAR(intptr_t, m_chromaticAberrationSize, m_chromaticAberrationSize, 152);
		MAKE_PADDED_VAR(intptr_t, m_balanceMapLerp, m_balanceMapLerp, 200);
		MAKE_PADDED_VAR(intptr_t, m_balanceMapAmount, m_balanceMapAmount, 248);
		MAKE_PADDED_VAR(CBitmapTexture, m_balanceMap0, m_balanceMap0, 296);
		MAKE_PADDED_VAR(CBitmapTexture, m_balanceMap1, m_balanceMap1, 328);
		MAKE_PADDED_VAR(intptr_t, m_balancePostBrightness, m_balancePostBrightness, 360);
		MAKE_PADDED_VAR(intptr_t, m_levelsShadows, m_levelsShadows, 408);
		MAKE_PADDED_VAR(intptr_t, m_levelsMidtones, m_levelsMidtones, 456);
		MAKE_PADDED_VAR(intptr_t, m_levelsHighlights, m_levelsHighlights, 504);
		MAKE_PADDED_VAR(intptr_t, m_midtoneRangeMin, m_midtoneRangeMin, 552);
		MAKE_PADDED_VAR(intptr_t, m_midtoneRangeMax, m_midtoneRangeMax, 600);
		MAKE_PADDED_VAR(intptr_t, m_midtoneMarginMin, m_midtoneMarginMin, 648);
		MAKE_PADDED_VAR(intptr_t, m_midtoneMarginMax, m_midtoneMarginMax, 696);
		MAKE_PADDED_VAR(intptr_t, m_parametricBalanceLow, m_parametricBalanceLow, 744);
		MAKE_PADDED_VAR(intptr_t, m_parametricBalanceMid, m_parametricBalanceMid, 840);
		MAKE_PADDED_VAR(intptr_t, m_parametricBalanceHigh, m_parametricBalanceHigh, 936);
	};
};

class CEnvFlareColorGroupsParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_default, m_default, 8);
		MAKE_PADDED_VAR(intptr_t, m_custom0, m_custom0, 400);
		MAKE_PADDED_VAR(intptr_t, m_custom1, m_custom1, 792);
		MAKE_PADDED_VAR(intptr_t, m_custom2, m_custom2, 1184);
	};
};

class CEnvFlareColorParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_color0, m_color0, 8);
		MAKE_PADDED_VAR(intptr_t, m_opacity0, m_opacity0, 56);
		MAKE_PADDED_VAR(intptr_t, m_color1, m_color1, 104);
		MAKE_PADDED_VAR(intptr_t, m_opacity1, m_opacity1, 152);
		MAKE_PADDED_VAR(intptr_t, m_color2, m_color2, 200);
		MAKE_PADDED_VAR(intptr_t, m_opacity2, m_opacity2, 248);
		MAKE_PADDED_VAR(intptr_t, m_color3, m_color3, 296);
		MAKE_PADDED_VAR(intptr_t, m_opacity3, m_opacity3, 344);
	};
};

class CEnvGameplayEffectsParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_catEffectBrightnessMultiply, m_catEffectBrightnessMultiply, 8);
		MAKE_PADDED_VAR(intptr_t, m_behaviorAnimationMultiplier, m_behaviorAnimationMultiplier, 56);
		MAKE_PADDED_VAR(intptr_t, m_specularityMultiplier, m_specularityMultiplier, 104);
		MAKE_PADDED_VAR(intptr_t, m_glossinessMultiplier, m_glossinessMultiplier, 152);
	};
};

class CEnvGlobalFogParameters {
public:
	union {
	bool m_fogActivated;
		MAKE_PADDED_VAR(intptr_t, m_fogAppearDistance, m_fogAppearDistance, 8);
		MAKE_PADDED_VAR(intptr_t, m_fogAppearRange, m_fogAppearRange, 56);
		MAKE_PADDED_VAR(intptr_t, m_fogColorFront, m_fogColorFront, 104);
		MAKE_PADDED_VAR(intptr_t, m_fogColorMiddle, m_fogColorMiddle, 152);
		MAKE_PADDED_VAR(intptr_t, m_fogColorBack, m_fogColorBack, 200);
		MAKE_PADDED_VAR(intptr_t, m_fogDensity, m_fogDensity, 248);
		MAKE_PADDED_VAR(intptr_t, m_fogVertOffset, m_fogVertOffset, 296);
		MAKE_PADDED_VAR(intptr_t, m_fogVertDensity, m_fogVertDensity, 344);
		MAKE_PADDED_VAR(intptr_t, m_fogVertDensityLightFront, m_fogVertDensityLightFront, 392);
		MAKE_PADDED_VAR(intptr_t, m_fogVertDensityLightBack, m_fogVertDensityLightBack, 440);
		MAKE_PADDED_VAR(intptr_t, m_fogSkyDensityScale, m_fogSkyDensityScale, 488);
		MAKE_PADDED_VAR(intptr_t, m_fogSkyVertDensityLightFrontScale, m_fogSkyVertDensityLightFrontScale, 536);
		MAKE_PADDED_VAR(intptr_t, m_fogSkyVertDensityLightBackScale, m_fogSkyVertDensityLightBackScale, 584);
		MAKE_PADDED_VAR(intptr_t, m_fogCloudsDensityScale, m_fogCloudsDensityScale, 632);
		MAKE_PADDED_VAR(intptr_t, m_fogVertDensityRimRange, m_fogVertDensityRimRange, 680);
		MAKE_PADDED_VAR(intptr_t, m_fogDistClamp, m_fogDistClamp, 728);
		MAKE_PADDED_VAR(intptr_t, m_fogFinalExp, m_fogFinalExp, 776);
		MAKE_PADDED_VAR(intptr_t, m_fogCustomColor, m_fogCustomColor, 824);
		MAKE_PADDED_VAR(intptr_t, m_fogCustomColorStart, m_fogCustomColorStart, 872);
		MAKE_PADDED_VAR(intptr_t, m_fogCustomColorRange, m_fogCustomColorRange, 920);
		MAKE_PADDED_VAR(intptr_t, m_fogCustomAmountScale, m_fogCustomAmountScale, 968);
		MAKE_PADDED_VAR(intptr_t, m_fogCustomAmountScaleStart, m_fogCustomAmountScaleStart, 1016);
		MAKE_PADDED_VAR(intptr_t, m_fogCustomAmountScaleRange, m_fogCustomAmountScaleRange, 1064);
		MAKE_PADDED_VAR(intptr_t, m_aerialColorFront, m_aerialColorFront, 1112);
		MAKE_PADDED_VAR(intptr_t, m_aerialColorMiddle, m_aerialColorMiddle, 1160);
		MAKE_PADDED_VAR(intptr_t, m_aerialColorBack, m_aerialColorBack, 1208);
		MAKE_PADDED_VAR(intptr_t, m_aerialFinalExp, m_aerialFinalExp, 1256);
		MAKE_PADDED_VAR(intptr_t, m_ssaoImpactClamp, m_ssaoImpactClamp, 1304);
		MAKE_PADDED_VAR(intptr_t, m_ssaoImpactNearValue, m_ssaoImpactNearValue, 1352);
		MAKE_PADDED_VAR(intptr_t, m_ssaoImpactFarValue, m_ssaoImpactFarValue, 1400);
		MAKE_PADDED_VAR(intptr_t, m_ssaoImpactNearDistance, m_ssaoImpactNearDistance, 1448);
		MAKE_PADDED_VAR(intptr_t, m_ssaoImpactFarDistance, m_ssaoImpactFarDistance, 1496);
		MAKE_PADDED_VAR(intptr_t, m_distantLightsIntensityScale, m_distantLightsIntensityScale, 1544);
	};
};

class CEnvGlobalLightParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(bool, m_activatedGlobalLightActivated, m_activatedGlobalLightActivated, 1);
		MAKE_PADDED_VAR(float, m_globalLightActivated, m_globalLightActivated, 4);
		MAKE_PADDED_VAR(bool, m_activatedActivatedFactorLightDir, m_activatedActivatedFactorLightDir, 8);
		MAKE_PADDED_VAR(float, m_activatedFactorLightDir, m_activatedFactorLightDir, 12);
		MAKE_PADDED_VAR(intptr_t, m_sunColor, m_sunColor, 16);
		MAKE_PADDED_VAR(intptr_t, m_sunColorLightSide, m_sunColorLightSide, 64);
		MAKE_PADDED_VAR(intptr_t, m_sunColorLightOppositeSide, m_sunColorLightOppositeSide, 112);
		MAKE_PADDED_VAR(intptr_t, m_sunColorCenterArea, m_sunColorCenterArea, 160);
		MAKE_PADDED_VAR(intptr_t, m_sunColorSidesMargin, m_sunColorSidesMargin, 208);
		MAKE_PADDED_VAR(intptr_t, m_sunColorBottomHeight, m_sunColorBottomHeight, 256);
		MAKE_PADDED_VAR(intptr_t, m_sunColorTopHeight, m_sunColorTopHeight, 304);
		MAKE_PADDED_VAR(intptr_t, m_forcedLightDirAnglesYaw, m_forcedLightDirAnglesYaw, 352);
		MAKE_PADDED_VAR(intptr_t, m_forcedLightDirAnglesPitch, m_forcedLightDirAnglesPitch, 400);
		MAKE_PADDED_VAR(intptr_t, m_forcedLightDirAnglesRoll, m_forcedLightDirAnglesRoll, 448);
		MAKE_PADDED_VAR(intptr_t, m_forcedSunDirAnglesYaw, m_forcedSunDirAnglesYaw, 496);
		MAKE_PADDED_VAR(intptr_t, m_forcedSunDirAnglesPitch, m_forcedSunDirAnglesPitch, 544);
		MAKE_PADDED_VAR(intptr_t, m_forcedSunDirAnglesRoll, m_forcedSunDirAnglesRoll, 592);
		MAKE_PADDED_VAR(intptr_t, m_forcedMoonDirAnglesYaw, m_forcedMoonDirAnglesYaw, 640);
		MAKE_PADDED_VAR(intptr_t, m_forcedMoonDirAnglesPitch, m_forcedMoonDirAnglesPitch, 688);
		MAKE_PADDED_VAR(intptr_t, m_forcedMoonDirAnglesRoll, m_forcedMoonDirAnglesRoll, 736);
		MAKE_PADDED_VAR(intptr_t, m_translucencyViewDependency, m_translucencyViewDependency, 784);
		MAKE_PADDED_VAR(intptr_t, m_translucencyBaseFlatness, m_translucencyBaseFlatness, 832);
		MAKE_PADDED_VAR(intptr_t, m_translucencyFlatBrightness, m_translucencyFlatBrightness, 880);
		MAKE_PADDED_VAR(intptr_t, m_translucencyGainBrightness, m_translucencyGainBrightness, 928);
		MAKE_PADDED_VAR(intptr_t, m_translucencyFresnelScaleLight, m_translucencyFresnelScaleLight, 976);
		MAKE_PADDED_VAR(intptr_t, m_translucencyFresnelScaleReflection, m_translucencyFresnelScaleReflection, 1024);
		MAKE_PADDED_VAR(CEnvAmbientProbesGenParameters, m_envProbeBaseLightingAmbient, m_envProbeBaseLightingAmbient, 1072);
		MAKE_PADDED_VAR(intptr_t, m_envProbeBaseLightingReflection, m_envProbeBaseLightingReflection, 1320);
		MAKE_PADDED_VAR(intptr_t, m_charactersLightingBoostAmbientLight, m_charactersLightingBoostAmbientLight, 1712);
		MAKE_PADDED_VAR(intptr_t, m_charactersLightingBoostAmbientShadow, m_charactersLightingBoostAmbientShadow, 1760);
		MAKE_PADDED_VAR(intptr_t, m_charactersLightingBoostReflectionLight, m_charactersLightingBoostReflectionLight, 1808);
		MAKE_PADDED_VAR(intptr_t, m_charactersLightingBoostReflectionShadow, m_charactersLightingBoostReflectionShadow, 1856);
		MAKE_PADDED_VAR(intptr_t, m_charactersEyeBlicksColor, m_charactersEyeBlicksColor, 1904);
		MAKE_PADDED_VAR(intptr_t, m_charactersEyeBlicksShadowedScale, m_charactersEyeBlicksShadowedScale, 1952);
		MAKE_PADDED_VAR(intptr_t, m_envProbeAmbientScaleLight, m_envProbeAmbientScaleLight, 2000);
		MAKE_PADDED_VAR(intptr_t, m_envProbeAmbientScaleShadow, m_envProbeAmbientScaleShadow, 2048);
		MAKE_PADDED_VAR(intptr_t, m_envProbeReflectionScaleLight, m_envProbeReflectionScaleLight, 2096);
		MAKE_PADDED_VAR(intptr_t, m_envProbeReflectionScaleShadow, m_envProbeReflectionScaleShadow, 2144);
		MAKE_PADDED_VAR(intptr_t, m_envProbeDistantScaleFactor, m_envProbeDistantScaleFactor, 2192);
	};
};

class CEnvGlobalSkyParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(bool, m_activatedActivateFactor, m_activatedActivateFactor, 1);
		MAKE_PADDED_VAR(float, m_activateFactor, m_activateFactor, 4);
		MAKE_PADDED_VAR(intptr_t, m_skyColor, m_skyColor, 8);
		MAKE_PADDED_VAR(intptr_t, m_skyColorHorizon, m_skyColorHorizon, 56);
		MAKE_PADDED_VAR(intptr_t, m_horizonVerticalAttenuation, m_horizonVerticalAttenuation, 104);
		MAKE_PADDED_VAR(intptr_t, m_sunColorSky, m_sunColorSky, 152);
		MAKE_PADDED_VAR(intptr_t, m_sunColorSkyBrightness, m_sunColorSkyBrightness, 200);
		MAKE_PADDED_VAR(intptr_t, m_sunAreaSkySize, m_sunAreaSkySize, 248);
		MAKE_PADDED_VAR(intptr_t, m_sunColorHorizon, m_sunColorHorizon, 296);
		MAKE_PADDED_VAR(intptr_t, m_sunColorHorizonHorizontalScale, m_sunColorHorizonHorizontalScale, 344);
		MAKE_PADDED_VAR(intptr_t, m_sunBackHorizonColor, m_sunBackHorizonColor, 392);
		MAKE_PADDED_VAR(intptr_t, m_sunInfluence, m_sunInfluence, 440);
		MAKE_PADDED_VAR(intptr_t, m_moonColorSky, m_moonColorSky, 488);
		MAKE_PADDED_VAR(intptr_t, m_moonColorSkyBrightness, m_moonColorSkyBrightness, 536);
		MAKE_PADDED_VAR(intptr_t, m_moonAreaSkySize, m_moonAreaSkySize, 584);
		MAKE_PADDED_VAR(intptr_t, m_moonColorHorizon, m_moonColorHorizon, 632);
		MAKE_PADDED_VAR(intptr_t, m_moonColorHorizonHorizontalScale, m_moonColorHorizonHorizontalScale, 680);
		MAKE_PADDED_VAR(intptr_t, m_moonBackHorizonColor, m_moonBackHorizonColor, 728);
		MAKE_PADDED_VAR(intptr_t, m_moonInfluence, m_moonInfluence, 776);
		MAKE_PADDED_VAR(intptr_t, m_globalSkyBrightness, m_globalSkyBrightness, 824);
	};
};

class CEnvInteriorFallbackParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_colorAmbientMul, m_colorAmbientMul, 8);
		MAKE_PADDED_VAR(intptr_t, m_colorReflectionLow, m_colorReflectionLow, 56);
		MAKE_PADDED_VAR(intptr_t, m_colorReflectionMiddle, m_colorReflectionMiddle, 104);
		MAKE_PADDED_VAR(intptr_t, m_colorReflectionHigh, m_colorReflectionHigh, 152);
	};
};

class CEnvironmentDefinition {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(CAreaEnvironmentParams, m_envParams, m_envParams, 104);
	};
};

class CEnvMotionBlurParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_strength, m_strength, 8);
	};
};

class CEnvMSSSAOParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_noiseFilterTolerance, m_noiseFilterTolerance, 8);
		MAKE_PADDED_VAR(intptr_t, m_blurTolerance, m_blurTolerance, 56);
		MAKE_PADDED_VAR(intptr_t, m_upsampleTolerance, m_upsampleTolerance, 104);
		MAKE_PADDED_VAR(intptr_t, m_rejectionFalloff, m_rejectionFalloff, 152);
		MAKE_PADDED_VAR(bool, m_combineResolutionsBeforeBlur, m_combineResolutionsBeforeBlur, 200);
		MAKE_PADDED_VAR(bool, m_combineResolutionsWithMul, m_combineResolutionsWithMul, 201);
		MAKE_PADDED_VAR(intptr_t, m_hierarchyDepth, m_hierarchyDepth, 208);
		MAKE_PADDED_VAR(intptr_t, m_normalAOMultiply, m_normalAOMultiply, 256);
		MAKE_PADDED_VAR(intptr_t, m_normalToDepthBrightnessEqualiser, m_normalToDepthBrightnessEqualiser, 304);
		MAKE_PADDED_VAR(intptr_t, m_normalBackProjectionTolerance, m_normalBackProjectionTolerance, 352);
	};
};

class CEnvNVSSAOParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_radius, m_radius, 8);
		MAKE_PADDED_VAR(intptr_t, m_bias, m_bias, 56);
		MAKE_PADDED_VAR(intptr_t, m_detailStrength, m_detailStrength, 104);
		MAKE_PADDED_VAR(intptr_t, m_coarseStrength, m_coarseStrength, 152);
		MAKE_PADDED_VAR(intptr_t, m_powerExponent, m_powerExponent, 200);
		MAKE_PADDED_VAR(intptr_t, m_blurSharpness, m_blurSharpness, 248);
		MAKE_PADDED_VAR(intptr_t, m_valueClamp, m_valueClamp, 296);
		MAKE_PADDED_VAR(intptr_t, m_ssaoColor, m_ssaoColor, 344);
		MAKE_PADDED_VAR(intptr_t, m_nonAmbientInfluence, m_nonAmbientInfluence, 392);
		MAKE_PADDED_VAR(intptr_t, m_translucencyInfluence, m_translucencyInfluence, 440);
	};
};

class CEnvPaintEffectParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_amount, m_amount, 8);
	};
};

class CEnvParametricBalanceParameters {
public:
	union {
	intptr_t m_saturation;
		MAKE_PADDED_VAR(intptr_t, m_color, m_color, 48);
	};
};

class CEnvReflectionProbesGenParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_colorAmbient, m_colorAmbient, 8);
		MAKE_PADDED_VAR(intptr_t, m_colorSceneMul, m_colorSceneMul, 56);
		MAKE_PADDED_VAR(intptr_t, m_colorSceneAdd, m_colorSceneAdd, 104);
		MAKE_PADDED_VAR(intptr_t, m_colorSkyMul, m_colorSkyMul, 152);
		MAKE_PADDED_VAR(intptr_t, m_colorSkyAdd, m_colorSkyAdd, 200);
		MAKE_PADDED_VAR(intptr_t, m_remapOffset, m_remapOffset, 248);
		MAKE_PADDED_VAR(intptr_t, m_remapStrength, m_remapStrength, 296);
		MAKE_PADDED_VAR(intptr_t, m_remapClamp, m_remapClamp, 344);
	};
};

class CEnvShadowsParameters {
public:
	union {
	bool m_activatedAutoHide;
		MAKE_PADDED_VAR(intptr_t, m_autoHideBoxSizeMin, m_autoHideBoxSizeMin, 8);
		MAKE_PADDED_VAR(intptr_t, m_autoHideBoxSizeMax, m_autoHideBoxSizeMax, 56);
		MAKE_PADDED_VAR(intptr_t, m_autoHideBoxCompMaxX, m_autoHideBoxCompMaxX, 104);
		MAKE_PADDED_VAR(intptr_t, m_autoHideBoxCompMaxY, m_autoHideBoxCompMaxY, 152);
		MAKE_PADDED_VAR(intptr_t, m_autoHideBoxCompMaxZ, m_autoHideBoxCompMaxZ, 200);
		MAKE_PADDED_VAR(intptr_t, m_autoHideDistScale, m_autoHideDistScale, 248);
	};
};

class CEnvSharpenParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_sharpenNear, m_sharpenNear, 8);
		MAKE_PADDED_VAR(intptr_t, m_sharpenFar, m_sharpenFar, 56);
		MAKE_PADDED_VAR(intptr_t, m_distanceNear, m_distanceNear, 104);
		MAKE_PADDED_VAR(intptr_t, m_distanceFar, m_distanceFar, 152);
		MAKE_PADDED_VAR(intptr_t, m_lumFilterOffset, m_lumFilterOffset, 200);
		MAKE_PADDED_VAR(intptr_t, m_lumFilterRange, m_lumFilterRange, 248);
	};
};

class CEnvSpeedTreeParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_diffuse, m_diffuse, 8);
		MAKE_PADDED_VAR(intptr_t, m_specularScale, m_specularScale, 56);
		MAKE_PADDED_VAR(intptr_t, m_translucencyScale, m_translucencyScale, 104);
		MAKE_PADDED_VAR(intptr_t, m_ambientOcclusionScale, m_ambientOcclusionScale, 152);
		MAKE_PADDED_VAR(intptr_t, m_billboardsColor, m_billboardsColor, 200);
		MAKE_PADDED_VAR(intptr_t, m_billboardsTranslucency, m_billboardsTranslucency, 248);
		MAKE_PADDED_VAR(intptr_t, m_randomColorsTrees, m_randomColorsTrees, 296);
		MAKE_PADDED_VAR(intptr_t, m_randomColorsBranches, m_randomColorsBranches, 632);
		MAKE_PADDED_VAR(intptr_t, m_randomColorsGrass, m_randomColorsGrass, 968);
		MAKE_PADDED_VAR(intptr_t, m_randomColorsFallback, m_randomColorsFallback, 1304);
		MAKE_PADDED_VAR(intptr_t, m_pigmentBrightness, m_pigmentBrightness, 1352);
		MAKE_PADDED_VAR(intptr_t, m_pigmentFloodStartDist, m_pigmentFloodStartDist, 1400);
		MAKE_PADDED_VAR(intptr_t, m_pigmentFloodRange, m_pigmentFloodRange, 1448);
		MAKE_PADDED_VAR(intptr_t, m_billboardsLightBleed, m_billboardsLightBleed, 1496);
	};
};

class CEnvSpeedTreeRandomColorParameters {
public:
	union {
	intptr_t m_luminanceWeights;
		MAKE_PADDED_VAR(intptr_t, m_randomColor0, m_randomColor0, 48);
		MAKE_PADDED_VAR(intptr_t, m_saturation0, m_saturation0, 96);
		MAKE_PADDED_VAR(intptr_t, m_randomColor1, m_randomColor1, 144);
		MAKE_PADDED_VAR(intptr_t, m_saturation1, m_saturation1, 192);
		MAKE_PADDED_VAR(intptr_t, m_randomColor2, m_randomColor2, 240);
		MAKE_PADDED_VAR(intptr_t, m_saturation2, m_saturation2, 288);
	};
};

class CEnvSunAndMoonParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_sunSize, m_sunSize, 8);
		MAKE_PADDED_VAR(intptr_t, m_sunColor, m_sunColor, 56);
		MAKE_PADDED_VAR(intptr_t, m_sunFlareSize, m_sunFlareSize, 104);
		MAKE_PADDED_VAR(CEnvFlareColorParameters, m_sunFlareColor, m_sunFlareColor, 152);
		MAKE_PADDED_VAR(intptr_t, m_moonSize, m_moonSize, 544);
		MAKE_PADDED_VAR(intptr_t, m_moonColor, m_moonColor, 592);
		MAKE_PADDED_VAR(intptr_t, m_moonFlareSize, m_moonFlareSize, 640);
		MAKE_PADDED_VAR(CEnvFlareColorParameters, m_moonFlareColor, m_moonFlareColor, 688);
	};
};

class CEnvToneMappingCurveParameters {
public:
	union {
	intptr_t m_shoulderStrength;
		MAKE_PADDED_VAR(intptr_t, m_linearStrength, m_linearStrength, 48);
		MAKE_PADDED_VAR(intptr_t, m_linearAngle, m_linearAngle, 96);
		MAKE_PADDED_VAR(intptr_t, m_toeStrength, m_toeStrength, 144);
		MAKE_PADDED_VAR(intptr_t, m_toeNumerator, m_toeNumerator, 192);
		MAKE_PADDED_VAR(intptr_t, m_toeDenominator, m_toeDenominator, 240);
	};
};

class CEnvToneMappingParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_skyLuminanceCustomValue, m_skyLuminanceCustomValue, 8);
		MAKE_PADDED_VAR(intptr_t, m_skyLuminanceCustomAmount, m_skyLuminanceCustomAmount, 56);
		MAKE_PADDED_VAR(intptr_t, m_luminanceLimitShape, m_luminanceLimitShape, 104);
		MAKE_PADDED_VAR(intptr_t, m_luminanceLimitMin, m_luminanceLimitMin, 152);
		MAKE_PADDED_VAR(intptr_t, m_luminanceLimitMax, m_luminanceLimitMax, 200);
		MAKE_PADDED_VAR(intptr_t, m_rejectThreshold, m_rejectThreshold, 248);
		MAKE_PADDED_VAR(intptr_t, m_rejectSmoothExtent, m_rejectSmoothExtent, 296);
		MAKE_PADDED_VAR(CEnvToneMappingCurveParameters, m_newToneMapCurveParameters, m_newToneMapCurveParameters, 344);
		MAKE_PADDED_VAR(intptr_t, m_newToneMapWhitepoint, m_newToneMapWhitepoint, 632);
		MAKE_PADDED_VAR(intptr_t, m_newToneMapPostScale, m_newToneMapPostScale, 680);
		MAKE_PADDED_VAR(intptr_t, m_exposureScale, m_exposureScale, 728);
		MAKE_PADDED_VAR(intptr_t, m_postScale, m_postScale, 776);
	};
};

class CEnvWaterParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_waterFlowIntensity, m_waterFlowIntensity, 8);
		MAKE_PADDED_VAR(intptr_t, m_underwaterBrightness, m_underwaterBrightness, 56);
		MAKE_PADDED_VAR(intptr_t, m_underWaterFogIntensity, m_underWaterFogIntensity, 104);
		MAKE_PADDED_VAR(intptr_t, m_waterColor, m_waterColor, 152);
		MAKE_PADDED_VAR(intptr_t, m_underWaterColor, m_underWaterColor, 200);
		MAKE_PADDED_VAR(intptr_t, m_waterFresnel, m_waterFresnel, 248);
		MAKE_PADDED_VAR(intptr_t, m_waterCaustics, m_waterCaustics, 296);
		MAKE_PADDED_VAR(intptr_t, m_waterFoamIntensity, m_waterFoamIntensity, 344);
		MAKE_PADDED_VAR(intptr_t, m_waterAmbientScale, m_waterAmbientScale, 392);
		MAKE_PADDED_VAR(intptr_t, m_waterDiffuseScale, m_waterDiffuseScale, 440);
	};
};

class CEnvWindParameters {
public:
	union {
	bool m_activated;
		MAKE_PADDED_VAR(intptr_t, m_windStrengthOverride, m_windStrengthOverride, 8);
		MAKE_PADDED_VAR(intptr_t, m_cloudsVelocityOverride, m_cloudsVelocityOverride, 56);
	};
};

class CEquipmentDefinitionEntry {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_category, m_category, 96);
		MAKE_PADDED_VAR(int32_t, m_defaultItemName, m_defaultItemName, 100);
		MAKE_PADDED_VAR(intptr_t, m_initializer, m_initializer, 104);
	};
};

class CEventGeneratorCameraParams {
public:
	union {
	bool m_usableForGenerator;
		MAKE_PADDED_VAR(intptr_t, m_cameraPlane, m_cameraPlane, 4);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 8);
		MAKE_PADDED_VAR(int32_t, m_targetSlot, m_targetSlot, 20);
		MAKE_PADDED_VAR(int32_t, m_sourceSlot, m_sourceSlot, 24);
	};
};

class CExtAnimCutsceneBokehDofBlendEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(intptr_t, m_bokehDofParamsStart, m_bokehDofParamsStart, 40);
		MAKE_PADDED_VAR(intptr_t, m_bokehDofParamsEnd, m_bokehDofParamsEnd, 60);
	};
};

class CExtAnimCutsceneBokehDofEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_bokehDofParams, m_bokehDofParams, 32);
	};
};

class CExtAnimCutsceneEffectEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_effect, m_effect, 40);
		MAKE_PADDED_VAR(intptr_t, m_tag, m_tag, 44);
		MAKE_PADDED_VAR(Vector, m_spawnPosMS, m_spawnPosMS, 64);
		MAKE_PADDED_VAR(EulerAngles, m_spawnRotMS, m_spawnRotMS, 80);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 96);
	};
};

class CExtAnimCutsceneLightEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_tag, m_tag, 32);
		MAKE_PADDED_VAR(Color, m_color, m_color, 44);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 48);
		MAKE_PADDED_VAR(float, m_brightness, m_brightness, 52);
		MAKE_PADDED_VAR(SLightFlickering, m_lightFlickering, m_lightFlickering, 56);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 68);
	};
};

class CExtAnimCutsceneSetClippingPlanesEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_nearPlaneDistance, m_nearPlaneDistance, 32);
		MAKE_PADDED_VAR(intptr_t, m_farPlaneDistance, m_farPlaneDistance, 36);
		MAKE_PADDED_VAR(SCustomClippingPlanes, m_customPlaneDistance, m_customPlaneDistance, 40);
	};
};

class CExtAnimCutsceneSlowMoEvent {
public:
	union {
	CExtAnimCutsceneDurationEvent cextanimcutscenedurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 48);
		MAKE_PADDED_VAR(float, m_factor, m_factor, 52);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 56);
		MAKE_PADDED_VAR(intptr_t, m_weightCurve, m_weightCurve, 60);
	};
};

class CExtAnimCutsceneSoundEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_soundEventName, m_soundEventName, 32);
		MAKE_PADDED_VAR(int32_t, m_bone, m_bone, 44);
		MAKE_PADDED_VAR(bool, m_useMaterialInfo, m_useMaterialInfo, 48);
	};
};

class CExtAnimCutsceneSurfaceEffect {
public:
	union {
	CExtAnimCutsceneEvent cextanimcutsceneevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 32);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 48);
		MAKE_PADDED_VAR(float, m_fadeInTime, m_fadeInTime, 52);
		MAKE_PADDED_VAR(float, m_fadeOutTime, m_fadeOutTime, 56);
		MAKE_PADDED_VAR(float, m_durationTime, m_durationTime, 60);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 64);
		MAKE_PADDED_VAR(bool, m_worldPos, m_worldPos, 68);
	};
};

class CExtAnimCutsceneWindEvent {
public:
	union {
	CExtAnimCutsceneDurationEvent cextanimcutscenedurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 48);
		MAKE_PADDED_VAR(float, m_factor, m_factor, 52);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 56);
		MAKE_PADDED_VAR(intptr_t, m_weightCurve, m_weightCurve, 60);
	};
};

class CExtAnimDropItemEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 32);
	};
};

class CExtAnimEffectEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 32);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 36);
	};
};

class CExtAnimItemEffectEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_itemSlot, m_itemSlot, 32);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 36);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 40);
	};
};

class CExtAnimItemEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 40);
		MAKE_PADDED_VAR(intptr_t, m_itemGetting, m_itemGetting, 44);
		MAKE_PADDED_VAR(int32_t, m_category, m_category, 48);
		MAKE_PADDED_VAR(int32_t, m_itemName_optional, m_itemName_optional, 52);
		MAKE_PADDED_VAR(int32_t, m_ignoreItemsWithTag, m_ignoreItemsWithTag, 56);
	};
};

class CExtAnimItemSyncDurationEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_equipSlot, m_equipSlot, 40);
		MAKE_PADDED_VAR(int32_t, m_holdSlot, m_holdSlot, 44);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 48);
	};
};

class CExtAnimItemSyncEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(int32_t, m_equipSlot, m_equipSlot, 32);
		MAKE_PADDED_VAR(int32_t, m_holdSlot, m_holdSlot, 36);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 40);
	};
};

class CExtAnimItemSyncWithCorrectionEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_equipSlot, m_equipSlot, 40);
		MAKE_PADDED_VAR(int32_t, m_holdSlot, m_holdSlot, 44);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 48);
		MAKE_PADDED_VAR(int32_t, m_correctionBone, m_correctionBone, 52);
	};
};

class CExtAnimLookAtEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(intptr_t, m_level, m_level, 40);
	};
};

class CExtAnimMorphEvent {
public:
	union {
	CExtAnimDurationEvent cextanimdurationevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 32);
		MAKE_PADDED_VAR(bool, m_alwaysFiresEnd, m_alwaysFiresEnd, 36);
		MAKE_PADDED_VAR(int32_t, m_morphComponentId, m_morphComponentId, 48);
		MAKE_PADDED_VAR(bool, m_invertWeight, m_invertWeight, 52);
		MAKE_PADDED_VAR(bool, m_useCurve, m_useCurve, 53);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 56);
	};
};

class CExtAnimProjectileEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(CEntityTemplate, m_spell, m_spell, 32);
		MAKE_PADDED_VAR(intptr_t, m_castPosition, m_castPosition, 40);
		MAKE_PADDED_VAR(int32_t, m_boneName, m_boneName, 44);
	};
};

class CExtAnimSoundEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_soundEventName, m_soundEventName, 32);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 44);
		MAKE_PADDED_VAR(float, m_filterCooldown, m_filterCooldown, 48);
		MAKE_PADDED_VAR(int32_t, m_bone, m_bone, 52);
		MAKE_PADDED_VAR(intptr_t*, m_switchesToUpdate[2], m_switchesToUpdate, 56);
		MAKE_PADDED_VAR(intptr_t*, m_parametersToUpdate[2], m_parametersToUpdate, 68);
		MAKE_PADDED_VAR(bool, m_filter, m_filter, 80);
		MAKE_PADDED_VAR(bool, m_useDistanceParameter, m_useDistanceParameter, 81);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 84);
		MAKE_PADDED_VAR(float, m_decelDist, m_decelDist, 88);
	};
};

class CExtForcedLogicalFootstepAnimEvent {
public:
	union {
	CExtAnimEvent cextanimevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_side, m_side, 32);
	};
};

class CFoliageScene {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(Vector2, m_worldDimensions, m_worldDimensions, 152);
		MAKE_PADDED_VAR(Vector2, m_cellDimensions, m_cellDimensions, 160);
		MAKE_PADDED_VAR(int32_t, m_visibilityDepth, m_visibilityDepth, 168);
		MAKE_PADDED_VAR(int32_t, m_editorVisibilityDepth, m_editorVisibilityDepth, 172);
		MAKE_PADDED_VAR(CGenericGrassMask, m_grassMask, m_grassMask, 176);
		MAKE_PADDED_VAR(intptr_t, m_grassOccurrenceMap, m_grassOccurrenceMap, 208);
		MAKE_PADDED_VAR(intptr_t, m_lodSetting, m_lodSetting, 216);
	};
};

class CFormation {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(int32_t, m_uniqueFormationName, m_uniqueFormationName, 104);
		MAKE_PADDED_VAR(intptr_t, m_formationLogic, m_formationLogic, 112);
		MAKE_PADDED_VAR(intptr_t, m_steeringGraph, m_steeringGraph, 120);
	};
};

class CFurMeshResource {
public:
	union {
	CMeshTypeResource cmeshtyperesource;
		MAKE_PADDED_VAR(IMaterial*, m_materials[2], m_materials, 104);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 128);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 168);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 172);
		MAKE_PADDED_VAR(Vector*, m_positions[2], m_positions, 224);
		MAKE_PADDED_VAR(Vector2*, m_uvs[2], m_uvs, 236);
		MAKE_PADDED_VAR(uint32_t*, m_endIndices[2], m_endIndices, 248);
		MAKE_PADDED_VAR(uint32_t*, m_faceIndices[2], m_faceIndices, 260);
		MAKE_PADDED_VAR(Vector*, m_boneIndices[2], m_boneIndices, 272);
		MAKE_PADDED_VAR(Vector*, m_boneWeights[2], m_boneWeights, 284);
		MAKE_PADDED_VAR(uint32_t, m_boneCount, m_boneCount, 296);
		MAKE_PADDED_VAR(int32_t*, m_boneNames[2], m_boneNames, 300);
		MAKE_PADDED_VAR(Matrix*, m_boneRigMatrices[2], m_boneRigMatrices, 312);
		MAKE_PADDED_VAR(int32_t*, m_boneParents[2], m_boneParents, 324);
		MAKE_PADDED_VAR(Matrix*, m_bindPoses[2], m_bindPoses, 336);
		MAKE_PADDED_VAR(Vector*, m_boneSphereLocalPosArray[2], m_boneSphereLocalPosArray, 348);
		MAKE_PADDED_VAR(uint32_t*, m_boneSphereIndexArray[2], m_boneSphereIndexArray, 360);
		MAKE_PADDED_VAR(float*, m_boneSphereRadiusArray[2], m_boneSphereRadiusArray, 372);
		MAKE_PADDED_VAR(Vector*, m_pinConstraintsLocalPosArray[2], m_pinConstraintsLocalPosArray, 384);
		MAKE_PADDED_VAR(uint32_t*, m_pinConstraintsIndexArray[2], m_pinConstraintsIndexArray, 396);
		MAKE_PADDED_VAR(float*, m_pinConstraintsRadiusArray[2], m_pinConstraintsRadiusArray, 408);
		MAKE_PADDED_VAR(uint32_t*, m_boneCapsuleIndices[2], m_boneCapsuleIndices, 420);
		MAKE_PADDED_VAR(intptr_t, m_visualizers, m_visualizers, 436);
		MAKE_PADDED_VAR(intptr_t, m_physicalMaterials, m_physicalMaterials, 480);
		MAKE_PADDED_VAR(intptr_t, m_graphicalMaterials, m_graphicalMaterials, 960);
		MAKE_PADDED_VAR(SFurLevelOfDetail, m_levelOfDetail, m_levelOfDetail, 1152);
		MAKE_PADDED_VAR(intptr_t, m_materialSets, m_materialSets, 1216);
		MAKE_PADDED_VAR(float, m_materialWeight, m_materialWeight, 1904);
		MAKE_PADDED_VAR(uint32_t, m_splineMultiplier, m_splineMultiplier, 1908);
		MAKE_PADDED_VAR(float, m_importUnitsScale, m_importUnitsScale, 1912);
		MAKE_PADDED_VAR(float*, m_boneVertexEpsilons[69], m_boneVertexEpsilons, 1916);
	};
};

class CFXTrackItemDynamicLight {
public:
	union {
	CFXTrackItemCurveBase cfxtrackitemcurvebase;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(Color, m_color, m_color, 104);
		MAKE_PADDED_VAR(SLightFlickering, m_lightFlickering, m_lightFlickering, 108);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 120);
		MAKE_PADDED_VAR(float, m_brightness, m_brightness, 124);
		MAKE_PADDED_VAR(float, m_attenuation, m_attenuation, 128);
		MAKE_PADDED_VAR(float, m_specularScale, m_specularScale, 132);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 136);
		MAKE_PADDED_VAR(float, m_autoHideRange, m_autoHideRange, 140);
		MAKE_PADDED_VAR(float, m_spotInnerAngle, m_spotInnerAngle, 144);
		MAKE_PADDED_VAR(float, m_spotOuterAngle, m_spotOuterAngle, 148);
		MAKE_PADDED_VAR(intptr_t, m_spawner, m_spawner, 152);
		MAKE_PADDED_VAR(intptr_t, m_colorGroup, m_colorGroup, 160);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 164);
		MAKE_PADDED_VAR(bool, m_isCastingShadows, m_isCastingShadows, 165);
		MAKE_PADDED_VAR(bool, m_isModulative, m_isModulative, 166);
		MAKE_PADDED_VAR(bool, m_isSpotlight, m_isSpotlight, 167);
	};
};

class CFXTrackItemFlare {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(CMaterialInstance, m_material, m_material, 104);
		MAKE_PADDED_VAR(intptr_t, m_parameters, m_parameters, 112);
		MAKE_PADDED_VAR(intptr_t, m_spawner, m_spawner, 160);
	};
};

class CFXTrackItemGlobalSpacePhysicalForce {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(intptr_t, m_forceObject, m_forceObject, 104);
	};
};

class CFXTrackItemParticles {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(intptr_t, m_particleSystem, m_particleSystem, 104);
		MAKE_PADDED_VAR(intptr_t, m_spawner, m_spawner, 136);
	};
};

class CFXTrackItemSoundEvent {
public:
	union {
	CFXTrackItem cfxtrackitem;
		MAKE_PADDED_VAR(float, m_timeBegin, m_timeBegin, 88);
		MAKE_PADDED_VAR(float, m_timeDuration, m_timeDuration, 92);
		MAKE_PADDED_VAR(intptr_t, m_soundEventName, m_soundEventName, 96);
		MAKE_PADDED_VAR(intptr_t, m_latchEvent, m_latchEvent, 108);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(int32_t, m_boneName, m_boneName, 124);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 128);
		MAKE_PADDED_VAR(bool, m_isAmbient, m_isAmbient, 129);
		MAKE_PADDED_VAR(float, m_stopFadeTime, m_stopFadeTime, 132);
		MAKE_PADDED_VAR(bool, m_useDistanceParameter, m_useDistanceParameter, 136);
		MAKE_PADDED_VAR(float, m_latchDistanceParameterBelow, m_latchDistanceParameterBelow, 140);
		MAKE_PADDED_VAR(bool, m_invertLatchDistance, m_invertLatchDistance, 144);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 148);
		MAKE_PADDED_VAR(float, m_decelDist, m_decelDist, 152);
	};
};

class CGame {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_activeWorld, m_activeWorld, 240);
		MAKE_PADDED_VAR(intptr_t, m_inputManager, m_inputManager, 384);
		MAKE_PADDED_VAR(intptr_t, m_visualDebug, m_visualDebug, 480);
		MAKE_PADDED_VAR(intptr_t, m_timerScriptKeyword, m_timerScriptKeyword, 47504);
		MAKE_PADDED_VAR(intptr_t, m_gameResource, m_gameResource, 47512);
	};
};

class CGameResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_worlds[2], m_worlds, 104);
		MAKE_PADDED_VAR(CEntityTemplate, m_defaultPlayerTemplate, m_defaultPlayerTemplate, 120);
		MAKE_PADDED_VAR(CEntityTemplate, m_defaultCameraTemplate, m_defaultCameraTemplate, 152);
		MAKE_PADDED_VAR(intptr_t, m_startingPoint, m_startingPoint, 184);
		MAKE_PADDED_VAR(char*, m_newGameLoadingVideo, m_newGameLoadingVideo, 192);
		MAKE_PADDED_VAR(int32_t*, m_playGoChunksToActivate[2], m_playGoChunksToActivate, 204);
	};
};

class CGlobalLightingTrajectory {
public:
	union {
	float m_yawDegrees;
		MAKE_PADDED_VAR(float, m_yawDegreesSunOffset, m_yawDegreesSunOffset, 4);
		MAKE_PADDED_VAR(float, m_yawDegreesMoonOffset, m_yawDegreesMoonOffset, 8);
		MAKE_PADDED_VAR(float, m_sunCurveShiftFactor, m_sunCurveShiftFactor, 12);
		MAKE_PADDED_VAR(float, m_moonCurveShiftFactor, m_moonCurveShiftFactor, 16);
		MAKE_PADDED_VAR(float, m_sunSqueeze, m_sunSqueeze, 20);
		MAKE_PADDED_VAR(float, m_moonSqueeze, m_moonSqueeze, 24);
		MAKE_PADDED_VAR(intptr_t, m_sunHeight, m_sunHeight, 32);
		MAKE_PADDED_VAR(intptr_t, m_moonHeight, m_moonHeight, 80);
		MAKE_PADDED_VAR(intptr_t, m_lightHeight, m_lightHeight, 128);
		MAKE_PADDED_VAR(intptr_t, m_lightDirChoice, m_lightDirChoice, 176);
		MAKE_PADDED_VAR(intptr_t, m_skyDayAmount, m_skyDayAmount, 224);
		MAKE_PADDED_VAR(float, m_moonShaftsBeginHour, m_moonShaftsBeginHour, 272);
		MAKE_PADDED_VAR(float, m_moonShaftsEndHour, m_moonShaftsEndHour, 276);
	};
};

class CGraphConnection {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(intptr_t, m_source, m_source, 16);
		MAKE_PADDED_VAR(intptr_t, m_destination, m_destination, 24);
		MAKE_PADDED_VAR(bool, m_inactive, m_inactive, 32);
	};
};

class CGraphSocket {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CGuardAreaParameters {
public:
	union {
	IAISpawnTreeSubParameters iaispawntreesubparameters;
		MAKE_PADDED_VAR(intptr_t, m_guardArea, m_guardArea, 72);
		MAKE_PADDED_VAR(intptr_t, m_guardPursuitArea, m_guardPursuitArea, 80);
		MAKE_PADDED_VAR(float, m_guardPursuitRange, m_guardPursuitRange, 88);
	};
};

class CGuiConfigResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(SHudDescription*, m_huds[2], m_huds, 104);
		MAKE_PADDED_VAR(intptr_t*, m_menus[2], m_menus, 116);
		MAKE_PADDED_VAR(intptr_t*, m_popups[2], m_popups, 128);
		MAKE_PADDED_VAR(intptr_t, m_scene, m_scene, 144);
	};
};

class CGwintMenuInitData {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_deckName, m_deckName, 88);
		MAKE_PADDED_VAR(intptr_t, m_difficulty, m_difficulty, 92);
		MAKE_PADDED_VAR(intptr_t, m_aggression, m_aggression, 96);
		MAKE_PADDED_VAR(bool, m_allowMultipleMatches, m_allowMultipleMatches, 100);
		MAKE_PADDED_VAR(intptr_t, m_forceFaction, m_forceFaction, 104);
	};
};

class CGwintMinigame {
public:
	union {
	CMinigame cminigame;
		MAKE_PADDED_VAR(int32_t, m_deckName, m_deckName, 88);
		MAKE_PADDED_VAR(intptr_t, m_difficulty, m_difficulty, 92);
		MAKE_PADDED_VAR(intptr_t, m_aggression, m_aggression, 96);
		MAKE_PADDED_VAR(bool, m_allowMultipleMatches, m_allowMultipleMatches, 100);
		MAKE_PADDED_VAR(intptr_t, m_forceFaction, m_forceFaction, 104);
	};
};

class CHorseParkingActionPointSelector {
public:
	union {
	CActionPointSelector cactionpointselector;
		MAKE_PADDED_VAR(intptr_t, m_apTags, m_apTags, 48);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 60);
	};
};

class CHorseRiderSharedParams {
public:
	union {
	IScriptable iscriptable;
		MAKE_PADDED_VAR(intptr_t, m_rider, m_rider, 48);
		MAKE_PADDED_VAR(intptr_t, m_horse, m_horse, 56);
		MAKE_PADDED_VAR(intptr_t, m_mountStatus, m_mountStatus, 64);
		MAKE_PADDED_VAR(intptr_t, m_boat, m_boat, 72);
		MAKE_PADDED_VAR(intptr_t, m_vehicleSlot, m_vehicleSlot, 80);
	};
};

class CIdleBehaviorsDefaultParameters {
public:
	union {
	IAISpawnTreeSubParameters iaispawntreesubparameters;
		MAKE_PADDED_VAR(intptr_t, m_actionPointsArea, m_actionPointsArea, 72);
		MAKE_PADDED_VAR(intptr_t, m_wanderArea, m_wanderArea, 80);
		MAKE_PADDED_VAR(int32_t, m_wanderPointsTag, m_wanderPointsTag, 88);
	};
};

class CInputManager {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_gestureSystem, m_gestureSystem, 352);
	};
};

class CInterestPoint {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_fieldName, m_fieldName, 88);
		MAKE_PADDED_VAR(intptr_t, m_potentialField, m_potentialField, 96);
	};
};

class CInterestPointInstance {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_parentNode, m_parentNode, 96);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 112);
	};
};

class CInternalVariableStateTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 88);
		MAKE_PADDED_VAR(float, m_compareValue, m_compareValue, 92);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 96);
	};
};

class CInventoryDefinitionEntry {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_category, m_category, 88);
		MAKE_PADDED_VAR(uint32_t, m_quantityMin, m_quantityMin, 92);
		MAKE_PADDED_VAR(uint32_t, m_quantityMax, m_quantityMax, 96);
		MAKE_PADDED_VAR(float, m_probability, m_probability, 100);
		MAKE_PADDED_VAR(bool, m_isMount, m_isMount, 104);
		MAKE_PADDED_VAR(bool, m_isLootable, m_isLootable, 105);
		MAKE_PADDED_VAR(intptr_t, m_initializer, m_initializer, 112);
	};
};

class CJobActionBase {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(char*, m_categoryName, m_categoryName, 96);
		MAKE_PADDED_VAR(int32_t, m_animName, m_animName, 108);
		MAKE_PADDED_VAR(float, m_animBlendIn, m_animBlendIn, 112);
		MAKE_PADDED_VAR(float, m_animBlendOut, m_animBlendOut, 116);
		MAKE_PADDED_VAR(bool, m_fireBlendedEvents, m_fireBlendedEvents, 120);
		MAKE_PADDED_VAR(bool, m_isSkippable, m_isSkippable, 121);
		MAKE_PADDED_VAR(intptr_t, m_allowedLookAtLevel, m_allowedLookAtLevel, 124);
		MAKE_PADDED_VAR(int32_t, m_ignoreIfItemMounted, m_ignoreIfItemMounted, 128);
	};
};

class CJobForceOutAction {
public:
	union {
	CJobActionBase cjobactionbase;
		MAKE_PADDED_VAR(char*, m_categoryName, m_categoryName, 96);
		MAKE_PADDED_VAR(int32_t, m_animName, m_animName, 108);
		MAKE_PADDED_VAR(float, m_animBlendIn, m_animBlendIn, 112);
		MAKE_PADDED_VAR(float, m_animBlendOut, m_animBlendOut, 116);
		MAKE_PADDED_VAR(bool, m_fireBlendedEvents, m_fireBlendedEvents, 120);
		MAKE_PADDED_VAR(bool, m_isSkippable, m_isSkippable, 121);
		MAKE_PADDED_VAR(intptr_t, m_allowedLookAtLevel, m_allowedLookAtLevel, 124);
		MAKE_PADDED_VAR(int32_t, m_ignoreIfItemMounted, m_ignoreIfItemMounted, 128);
		MAKE_PADDED_VAR(intptr_t, m_itemDropMode, m_itemDropMode, 136);
		MAKE_PADDED_VAR(float, m_speedMul, m_speedMul, 140);
	};
};

class CJobTree {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_jobTreeRootNode, m_jobTreeRootNode, 104);
		MAKE_PADDED_VAR(intptr_t, m_movementMode, m_movementMode, 112);
		MAKE_PADDED_VAR(float, m_customMovementSpeed, m_customMovementSpeed, 116);
		MAKE_PADDED_VAR(intptr_t, m_settings, m_settings, 120);
	};
};

class CJobTreeNode {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_onEnterAction, m_onEnterAction, 88);
		MAKE_PADDED_VAR(intptr_t, m_onLeaveAction, m_onLeaveAction, 96);
		MAKE_PADDED_VAR(intptr_t, m_onFastLeaveAction, m_onFastLeaveAction, 104);
		MAKE_PADDED_VAR(intptr_t*, m_childNodes[2], m_childNodes, 112);
		MAKE_PADDED_VAR(int32_t*, m_validCategories[2], m_validCategories, 124);
		MAKE_PADDED_VAR(intptr_t, m_selectionMode, m_selectionMode, 136);
		MAKE_PADDED_VAR(int32_t, m_leftItem, m_leftItem, 140);
		MAKE_PADDED_VAR(int32_t, m_rightItem, m_rightItem, 144);
		MAKE_PADDED_VAR(bool, m_looped, m_looped, 148);
		MAKE_PADDED_VAR(uint32_t, m_iterations, m_iterations, 152);
	};
};

class CJournalBase {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalCharacterGroup {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalCharacterRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalChildBase {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
	};
};

class CJournalContainerEntry {
public:
	union {
	CJournalChildBase cjournalchildbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
	};
};

class CJournalCreatureDescriptionEntry {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 168);
	};
};

class CJournalCreatureGameplayHint {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 168);
	};
};

class CJournalCreatureGroup {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 128);
		MAKE_PADDED_VAR(char*, m_image, m_image, 132);
	};
};

class CJournalCreatureHuntingClue {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(int32_t, m_category, m_category, 168);
		MAKE_PADDED_VAR(int32_t, m_clue, m_clue, 172);
	};
};

class CJournalCreatureRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalCreatureVitalSpotEntry {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t, m_title, m_title, 168);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 172);
	};
};

class CJournalGlossaryDescription {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 168);
	};
};

class CJournalGlossaryGroup {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalGlossaryRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalItemComponent {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(char*, m_image, m_image, 168);
		MAKE_PADDED_VAR(int32_t, m_item, m_item, 180);
	};
};

class CJournalItemGroup {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 128);
	};
};

class CJournalItemRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalItemSubGroup {
public:
	union {
	CJournalChildBase cjournalchildbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 160);
	};
};

class CJournalLink {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(char*, m_linkedObjectPath, m_linkedObjectPath, 128);
	};
};

class CJournalPath {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 16);
		MAKE_PADDED_VAR(CResource, m_resource, m_resource, 32);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 64);
	};
};

class CJournalPlaceDescription {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 168);
	};
};

class CJournalPlaceGroup {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 128);
		MAKE_PADDED_VAR(char*, m_image, m_image, 132);
	};
};

class CJournalPlaceRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalQuestDescriptionEntry {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 168);
	};
};

class CJournalQuestEnemyTag {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(char*, m_tag, m_tag, 168);
	};
};

class CJournalQuestGroup {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_title, m_title, 128);
	};
};

class CJournalQuestItemTag {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(int32_t, m_item, m_item, 168);
	};
};

class CJournalQuestMapPin {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 168);
		MAKE_PADDED_VAR(int32_t, m_mapPinID, m_mapPinID, 172);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 176);
		MAKE_PADDED_VAR(bool, m_enabledAtStartup, m_enabledAtStartup, 180);
	};
};

class CJournalQuestRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalResource {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_entry, m_entry, 104);
	};
};

class CJournalStoryBookChapter {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_title, m_title, 128);
		MAKE_PADDED_VAR(char*, m_image, m_image, 132);
	};
};

class CJournalStoryBookPageDescription {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(char*, m_videoFilename, m_videoFilename, 168);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 180);
		MAKE_PADDED_VAR(bool, m_isFinal, m_isFinal, 184);
	};
};

class CJournalStoryBookRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CJournalTutorial {
public:
	union {
	CJournalChildBase cjournalchildbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 160);
		MAKE_PADDED_VAR(char*, m_image, m_image, 164);
		MAKE_PADDED_VAR(char*, m_video, m_video, 176);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 188);
		MAKE_PADDED_VAR(int32_t, m_dlcLock, m_dlcLock, 192);
	};
};

class CJournalTutorialGroup {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 128);
		MAKE_PADDED_VAR(char*, m_image, m_image, 132);
	};
};

class CJournalTutorialRoot {
public:
	union {
	CJournalBase cjournalbase;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
	};
};

class CLayerInfo {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(intptr_t, m_layerBuildTag, m_layerBuildTag, 56);
		MAKE_PADDED_VAR(intptr_t, m_layerType, m_layerType, 60);
		MAKE_PADDED_VAR(intptr_t, m_layerMergeContentMode, m_layerMergeContentMode, 64);
		MAKE_PADDED_VAR(bool, m_streamingLayer, m_streamingLayer, 68);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 80);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 92);
		MAKE_PADDED_VAR(char*, m_depotFilePath, m_depotFilePath, 108);
		MAKE_PADDED_VAR(char*, m_shortName, m_shortName, 120);
		MAKE_PADDED_VAR(bool, m_hasEmbeddedLayerInfo, m_hasEmbeddedLayerInfo, 200);
	};
};

class CLookAtStaticParam {
public:
	union {
	CEntityTemplateParam centitytemplateparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(intptr_t, m_maxLookAtLevel, m_maxLookAtLevel, 96);
		MAKE_PADDED_VAR(float, m_maxHorAngle, m_maxHorAngle, 100);
		MAKE_PADDED_VAR(float, m_maxVerAngle, m_maxVerAngle, 104);
		MAKE_PADDED_VAR(float, m_firstWeight, m_firstWeight, 108);
		MAKE_PADDED_VAR(float, m_secWeight, m_secWeight, 112);
		MAKE_PADDED_VAR(float, m_responsiveness, m_responsiveness, 116);
	};
};

class CMaterialGraph {
public:
	union {
	IMaterialDefinition imaterialdefinition;
		MAKE_PADDED_VAR(uint32_t, m_pixelParamBlockSize, m_pixelParamBlockSize, 152);
		MAKE_PADDED_VAR(uint32_t, m_vertexParamBlockSize, m_vertexParamBlockSize, 156);
		MAKE_PADDED_VAR(Vector, m_offset, m_offset, 160);
		MAKE_PADDED_VAR(bool, m_compileAllTechniques, m_compileAllTechniques, 176);
		MAKE_PADDED_VAR(bool, m_canUseOnMeshes, m_canUseOnMeshes, 177);
		MAKE_PADDED_VAR(bool, m_canUseOnDestructionMeshes, m_canUseOnDestructionMeshes, 178);
		MAKE_PADDED_VAR(bool, m_canUseOnApexMeshes, m_canUseOnApexMeshes, 179);
		MAKE_PADDED_VAR(bool, m_canUseOnParticles, m_canUseOnParticles, 180);
		MAKE_PADDED_VAR(bool, m_canUseOnCollapsableObjects, m_canUseOnCollapsableObjects, 181);
		MAKE_PADDED_VAR(bool, m_canUseSkinning, m_canUseSkinning, 182);
		MAKE_PADDED_VAR(bool, m_canUseSkinnedInstancing, m_canUseSkinnedInstancing, 183);
		MAKE_PADDED_VAR(bool, m_canUseOnMorphMeshes, m_canUseOnMorphMeshes, 184);
		MAKE_PADDED_VAR(intptr_t*, m_blocks[2], m_blocks, 200);
		MAKE_PADDED_VAR(intptr_t*, m_pixelParameterBlocks[2], m_pixelParameterBlocks, 212);
		MAKE_PADDED_VAR(intptr_t*, m_vertexParameterBlocks[2], m_vertexParameterBlocks, 224);
		MAKE_PADDED_VAR(intptr_t, m_sortGroup, m_sortGroup, 236);
		MAKE_PADDED_VAR(intptr_t, m_blendMode, m_blendMode, 240);
		MAKE_PADDED_VAR(uint32_t, m_paramMask, m_paramMask, 244);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 248);
		MAKE_PADDED_VAR(bool, m_isEmissive, m_isEmissive, 249);
		MAKE_PADDED_VAR(bool, m_isMasked, m_isMasked, 250);
		MAKE_PADDED_VAR(bool, m_canOverrideMasked, m_canOverrideMasked, 251);
		MAKE_PADDED_VAR(bool, m_isForward, m_isForward, 252);
		MAKE_PADDED_VAR(bool, m_isAccumulativelyRefracted, m_isAccumulativelyRefracted, 253);
		MAKE_PADDED_VAR(bool, m_isReflectiveMasked, m_isReflectiveMasked, 254);
		MAKE_PADDED_VAR(bool, m_isMimicMaterial, m_isMimicMaterial, 255);
		MAKE_PADDED_VAR(bool, m_isEye, m_isEye, 258);
	};
};

class CMaterialParameterEngineValue {
public:
	union {
	CMaterialBlock cmaterialblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_valueType, m_valueType, 104);
	};
};

class CMaterialParameterEnvColorGroup {
public:
	union {
	CMaterialBlock cmaterialblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_colorGroup, m_colorGroup, 104);
	};
};

class CMenuDef {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_timeParam, m_timeParam, 88);
		MAKE_PADDED_VAR(intptr_t, m_backgroundVideoParam, m_backgroundVideoParam, 96);
		MAKE_PADDED_VAR(intptr_t, m_renderParam, m_renderParam, 104);
	};
};

class CMenuPauseParam {
public:
	union {
	IMenuTimeParam imenutimeparam;
		MAKE_PADDED_VAR(intptr_t, m_pauseType, m_pauseType, 88);
	};
};

class CMenuResource {
public:
	union {
	IGuiResource iguiresource;
		MAKE_PADDED_VAR(intptr_t*, m_resourceBlocks[2], m_resourceBlocks, 112);
		MAKE_PADDED_VAR(int32_t, m_menuClass, m_menuClass, 144);
		MAKE_PADDED_VAR(CSwfResource, m_menuFlashSwf, m_menuFlashSwf, 152);
		MAKE_PADDED_VAR(uint32_t, m_layer, m_layer, 184);
		MAKE_PADDED_VAR(intptr_t, m_menuDef, m_menuDef, 192);
	};
};

class CMergedWorldGeometryGridCoordinates {
public:
	union {
	intptr_t m_x;
		MAKE_PADDED_VAR(intptr_t, m_y, m_y, 2);
	};
};

class CMesh {
public:
	union {
	CMeshTypeResource cmeshtyperesource;
		MAKE_PADDED_VAR(IMaterial*, m_materials[2], m_materials, 104);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 128);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 168);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 172);
		MAKE_PADDED_VAR(float, m_generalizedMeshRadius, m_generalizedMeshRadius, 224);
		MAKE_PADDED_VAR(bool, m_mergeInGlobalShadowMesh, m_mergeInGlobalShadowMesh, 228);
		MAKE_PADDED_VAR(intptr_t, m_soundInfo, m_soundInfo, 256);
		MAKE_PADDED_VAR(intptr_t, m_cookedData, m_cookedData, 272);
		MAKE_PADDED_VAR(bool, m_useExtraStreams, m_useExtraStreams, 528);
		MAKE_PADDED_VAR(bool, m_isStatic, m_isStatic, 529);
		MAKE_PADDED_VAR(bool, m_isOccluder, m_isOccluder, 530);
		MAKE_PADDED_VAR(float, m_smallestHoleOverride, m_smallestHoleOverride, 532);
		MAKE_PADDED_VAR(intptr_t*, m_chunks[2], m_chunks, 540);
		MAKE_PADDED_VAR(intptr_t, m_rawVertices, m_rawVertices, 552);
		MAKE_PADDED_VAR(intptr_t, m_rawIndices, m_rawIndices, 688);
		MAKE_PADDED_VAR(bool, m_entityProxy, m_entityProxy, 884);
		MAKE_PADDED_VAR(CCollisionMesh, m_collisionMesh, m_collisionMesh, 888);
		MAKE_PADDED_VAR(char, m_internalVersion, m_internalVersion, 912);
		MAKE_PADDED_VAR(intptr_t, m_chunksBuffer, m_chunksBuffer, 920);
	};
};

class CMimicFace {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(SMimicTrackPose*, m_mimicTrackPoses[2], m_mimicTrackPoses, 104);
		MAKE_PADDED_VAR(SMimicTrackPose*, m_mimicFilterPoses[2], m_mimicFilterPoses, 116);
		MAKE_PADDED_VAR(intptr_t, m_mimicSkeleton, m_mimicSkeleton, 128);
		MAKE_PADDED_VAR(intptr_t, m_floatTrackSkeleton, m_floatTrackSkeleton, 136);
		MAKE_PADDED_VAR(intptr_t**, m_mimicPoses[133][2], m_mimicPoses, 144);
		MAKE_PADDED_VAR(int32_t*, m_mapping[2], m_mapping, 156);
		MAKE_PADDED_VAR(int32_t, m_neckIndex, m_neckIndex, 168);
		MAKE_PADDED_VAR(int32_t, m_headIndex, m_headIndex, 172);
		MAKE_PADDED_VAR(Vector*, m_normalBlendAreas[2], m_normalBlendAreas, 176);
	};
};

class CMimicFaces {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_mimicSkeleton, m_mimicSkeleton, 104);
		MAKE_PADDED_VAR(intptr_t**, m_mimicPoses[133][2], m_mimicPoses, 112);
		MAKE_PADDED_VAR(int32_t*, m_mapping[2], m_mapping, 124);
		MAKE_PADDED_VAR(int32_t, m_neckIndex, m_neckIndex, 136);
		MAKE_PADDED_VAR(int32_t, m_headIndex, m_headIndex, 140);
		MAKE_PADDED_VAR(Vector*, m_normalBlendAreas[2], m_normalBlendAreas, 144);
	};
};

class CMoveSCAnimEvent {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 88);
		MAKE_PADDED_VAR(intptr_t, m_eventType, m_eventType, 92);
	};
};

class CMoveSCCompareBehaviorVariable {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 88);
		MAKE_PADDED_VAR(float, m_referenceVal, m_referenceVal, 92);
		MAKE_PADDED_VAR(intptr_t, m_comparison, m_comparison, 96);
	};
};

class CMoveSCFlags {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(intptr_t, m_movementFlags, m_movementFlags, 88);
	};
};

class CMoveSNCondition {
public:
	union {
	IMoveSNComposite imovesncomposite;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 96);
		MAKE_PADDED_VAR(intptr_t, m_condition, m_condition, 112);
		MAKE_PADDED_VAR(bool, m_invertCondition, m_invertCondition, 120);
	};
};

class CMoveSNTask {
public:
	union {
	IMoveSteeringNode imovesteeringnode;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 88);
		MAKE_PADDED_VAR(intptr_t, m_task, m_task, 96);
	};
};

class CMoveSTAdjustRotationChanges {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(intptr_t, m_scenario, m_scenario, 88);
	};
};

class CMoveSTChangeSpeed {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(intptr_t, m_speedType, m_speedType, 88);
		MAKE_PADDED_VAR(float, m_absSpeed, m_absSpeed, 92);
	};
};

class CMoveSteeringBehavior {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_root, m_root, 104);
	};
};

class CMoveSteeringCompositeCondition {
public:
	union {
	IMoveSteeringCondition imovesteeringcondition;
		MAKE_PADDED_VAR(intptr_t, m_firstCondition, m_firstCondition, 88);
		MAKE_PADDED_VAR(intptr_t, m_secondCondition, m_secondCondition, 96);
		MAKE_PADDED_VAR(bool, m_notFirstCondition, m_notFirstCondition, 104);
		MAKE_PADDED_VAR(bool, m_notSecondCondition, m_notSecondCondition, 105);
		MAKE_PADDED_VAR(intptr_t, m_operator, m_operator, 108);
	};
};

class CMoveSTRuberBand {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(float, m_halfRange, m_halfRange, 88);
		MAKE_PADDED_VAR(intptr_t, m_tensionCurve, m_tensionCurve, 96);
		MAKE_PADDED_VAR(float, m_minAllowedSpeed, m_minAllowedSpeed, 144);
	};
};

class CMoveSTSetBehaviorVariable {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(intptr_t, m_variableContext, m_variableContext, 88);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 92);
		MAKE_PADDED_VAR(float, m_value, m_value, 96);
	};
};

class CMoveSTSetFlags {
public:
	union {
	IMoveSteeringTask imovesteeringtask;
		MAKE_PADDED_VAR(intptr_t, m_movementFlags, m_movementFlags, 88);
		MAKE_PADDED_VAR(intptr_t, m_bitOperation, m_bitOperation, 92);
	};
};

class CMoveTRGScript {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_agent, m_agent, 96);
		MAKE_PADDED_VAR(float, m_timeDelta, m_timeDelta, 104);
	};
};

class CNode {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
	};
};

class CParentInputValueStateTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(int32_t, m_socketName, m_socketName, 88);
		MAKE_PADDED_VAR(int32_t, m_parentValueName, m_parentValueName, 92);
		MAKE_PADDED_VAR(int32_t, m_compareParentInputName, m_compareParentInputName, 96);
		MAKE_PADDED_VAR(float, m_compareValue, m_compareValue, 100);
		MAKE_PADDED_VAR(bool, m_useAbsoluteValue, m_useAbsoluteValue, 104);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 108);
		MAKE_PADDED_VAR(float, m_epsilon, m_epsilon, 112);
		MAKE_PADDED_VAR(intptr_t, m_cachedParentInput, m_cachedParentInput, 120);
		MAKE_PADDED_VAR(intptr_t, m_cachedCompareParentInput, m_cachedCompareParentInput, 128);
		MAKE_PADDED_VAR(intptr_t, m_cachedTestedValue, m_cachedTestedValue, 136);
	};
};

class CParticleDrawerBeam {
public:
	union {
	IParticleDrawer iparticledrawer;
		MAKE_PADDED_VAR(float, m_texturesPerUnit, m_texturesPerUnit, 88);
		MAKE_PADDED_VAR(uint32_t, m_numSegments, m_numSegments, 92);
		MAKE_PADDED_VAR(intptr_t, m_spread, m_spread, 96);
	};
};

class CParticleDrawerMesh {
public:
	union {
	IParticleDrawer iparticledrawer;
		MAKE_PADDED_VAR(CMesh*, m_meshes[2], m_meshes, 88);
		MAKE_PADDED_VAR(intptr_t, m_orientationMode, m_orientationMode, 100);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 104);
	};
};

class CParticleEmitter {
public:
	union {
	IParticleModule iparticlemodule;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(intptr_t*, m_lods[2], m_lods, 120);
		MAKE_PADDED_VAR(IMaterial, m_material, m_material, 136);
		MAKE_PADDED_VAR(uint32_t, m_maxParticles, m_maxParticles, 144);
		MAKE_PADDED_VAR(intptr_t*, m_modules[2], m_modules, 148);
		MAKE_PADDED_VAR(int32_t, m_emitterLoops, m_emitterLoops, 160);
		MAKE_PADDED_VAR(intptr_t, m_particleDrawer, m_particleDrawer, 168);
		MAKE_PADDED_VAR(intptr_t, m_decalSpawner, m_decalSpawner, 176);
		MAKE_PADDED_VAR(intptr_t, m_collisionDecalSpawner, m_collisionDecalSpawner, 184);
		MAKE_PADDED_VAR(intptr_t, m_motionDecalSpawner, m_motionDecalSpawner, 192);
		MAKE_PADDED_VAR(bool, m_useSubFrameEmission, m_useSubFrameEmission, 200);
		MAKE_PADDED_VAR(bool, m_keepSimulationLocal, m_keepSimulationLocal, 201);
		MAKE_PADDED_VAR(float, m_windInfluence, m_windInfluence, 204);
		MAKE_PADDED_VAR(bool, m_useOnlyWindInfluence, m_useOnlyWindInfluence, 208);
		MAKE_PADDED_VAR(intptr_t, m_envColorGroup, m_envColorGroup, 212);
		MAKE_PADDED_VAR(int32_t, m_positionX, m_positionX, 216);
		MAKE_PADDED_VAR(int32_t, m_positionY, m_positionY, 220);
		MAKE_PADDED_VAR(char, m_internalPriority, m_internalPriority, 224);
		MAKE_PADDED_VAR(uint32_t, m_numInitializers, m_numInitializers, 240);
		MAKE_PADDED_VAR(uint32_t, m_initializerSetMask, m_initializerSetMask, 244);
		MAKE_PADDED_VAR(uint32_t, m_numModifiers, m_numModifiers, 248);
		MAKE_PADDED_VAR(uint32_t, m_modifierSetMask, m_modifierSetMask, 252);
		MAKE_PADDED_VAR(SSeedKeyValue*, m_seeds[2], m_seeds, 256);
	};
};

class CParticleInitializerAlpha {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_alpha, m_alpha, 128);
	};
};

class CParticleInitializerColor {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_color, m_color, 128);
	};
};

class CParticleInitializerLifeTime {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_lifeTime, m_lifeTime, 128);
	};
};

class CParticleInitializerPosition {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_position, m_position, 128);
		MAKE_PADDED_VAR(float, m_offset, m_offset, 136);
	};
};

class CParticleInitializerRotation {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotation, m_rotation, 128);
	};
};

class CParticleInitializerRotation3D {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotation, m_rotation, 128);
	};
};

class CParticleInitializerRotationRate {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotationRate, m_rotationRate, 128);
	};
};

class CParticleInitializerRotationRate3D {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotationRate, m_rotationRate, 128);
	};
};

class CParticleInitializerSize {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_size, m_size, 128);
	};
};

class CParticleInitializerSize3D {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_size, m_size, 128);
	};
};

class CParticleInitializerSpawnBox {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_extents, m_extents, 128);
		MAKE_PADDED_VAR(bool, m_worldSpace, m_worldSpace, 136);
	};
};

class CParticleInitializerSpawnCircle {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_outerRadius, m_outerRadius, 128);
		MAKE_PADDED_VAR(intptr_t, m_innerRadius, m_innerRadius, 136);
		MAKE_PADDED_VAR(bool, m_surfaceOnly, m_surfaceOnly, 144);
		MAKE_PADDED_VAR(bool, m_worldSpace, m_worldSpace, 145);
		MAKE_PADDED_VAR(Matrix, m_spawnToLocal, m_spawnToLocal, 160);
	};
};

class CParticleInitializerSpawnSphere {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_outerRadius, m_outerRadius, 128);
		MAKE_PADDED_VAR(intptr_t, m_innerRadius, m_innerRadius, 136);
		MAKE_PADDED_VAR(bool, m_surfaceOnly, m_surfaceOnly, 144);
		MAKE_PADDED_VAR(bool, m_spawnPositiveX, m_spawnPositiveX, 145);
		MAKE_PADDED_VAR(bool, m_spawnNegativeX, m_spawnNegativeX, 146);
		MAKE_PADDED_VAR(bool, m_spawnPositiveY, m_spawnPositiveY, 147);
		MAKE_PADDED_VAR(bool, m_spawnNegativeY, m_spawnNegativeY, 148);
		MAKE_PADDED_VAR(bool, m_spawnPositiveZ, m_spawnPositiveZ, 149);
		MAKE_PADDED_VAR(bool, m_spawnNegativeZ, m_spawnNegativeZ, 150);
		MAKE_PADDED_VAR(bool, m_velocity, m_velocity, 151);
		MAKE_PADDED_VAR(intptr_t, m_forceScale, m_forceScale, 152);
	};
};

class CParticleInitializerVelocity {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_velocity, m_velocity, 128);
		MAKE_PADDED_VAR(bool, m_worldSpace, m_worldSpace, 136);
	};
};

class CParticleInitializerVelocityInherit {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_scale, m_scale, 128);
	};
};

class CParticleInitializerVelocitySpread {
public:
	union {
	IParticleInitializer iparticleinitializer;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_scale, m_scale, 128);
		MAKE_PADDED_VAR(bool, m_conserveMomentum, m_conserveMomentum, 136);
	};
};

class CParticleModificatorAcceleration {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_direction, m_direction, 128);
		MAKE_PADDED_VAR(intptr_t, m_scale, m_scale, 136);
		MAKE_PADDED_VAR(bool, m_worldSpace, m_worldSpace, 144);
	};
};

class CParticleModificatorAlphaOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_alpha, m_alpha, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
	};
};

class CParticleModificatorColorOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_color, m_color, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
	};
};

class CParticleModificatorRotation3DOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotation, m_rotation, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
	};
};

class CParticleModificatorRotationOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotation, m_rotation, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
	};
};

class CParticleModificatorRotationRate3DOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotationRate, m_rotationRate, 128);
	};
};

class CParticleModificatorRotationRateOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_rotationRate, m_rotationRate, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
	};
};

class CParticleModificatorSize3DOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_size, m_size, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
	};
};

class CParticleModificatorSizeOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_size, m_size, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
	};
};

class CParticleModificatorTarget {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_position, m_position, 128);
		MAKE_PADDED_VAR(intptr_t, m_forceScale, m_forceScale, 136);
		MAKE_PADDED_VAR(intptr_t, m_killRadius, m_killRadius, 144);
		MAKE_PADDED_VAR(float, m_maxForce, m_maxForce, 152);
	};
};

class CParticleModificatorTargetNode {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_forceScale, m_forceScale, 128);
		MAKE_PADDED_VAR(intptr_t, m_killRadius, m_killRadius, 136);
		MAKE_PADDED_VAR(float, m_maxForce, m_maxForce, 144);
	};
};

class CParticleModificatorTextureAnimation {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_initialFrame, m_initialFrame, 128);
		MAKE_PADDED_VAR(intptr_t, m_animationSpeed, m_animationSpeed, 136);
		MAKE_PADDED_VAR(intptr_t, m_animationMode, m_animationMode, 144);
	};
};

class CParticleModificatorVelocityOverLife {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_velocity, m_velocity, 128);
		MAKE_PADDED_VAR(bool, m_modulate, m_modulate, 136);
		MAKE_PADDED_VAR(bool, m_absolute, m_absolute, 137);
	};
};

class CParticleModificatorVelocityTurbulize {
public:
	union {
	IParticleModificator iparticlemodificator;
		MAKE_PADDED_VAR(char*, m_editorName, m_editorName, 88);
		MAKE_PADDED_VAR(char*, m_editorGroup, m_editorGroup, 100);
		MAKE_PADDED_VAR(Color, m_editorColor, m_editorColor, 112);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 116);
		MAKE_PADDED_VAR(bool, m_isShowing, m_isShowing, 117);
		MAKE_PADDED_VAR(bool, m_isSelected, m_isSelected, 119);
		MAKE_PADDED_VAR(uint32_t, m_seed, m_seed, 124);
		MAKE_PADDED_VAR(intptr_t, m_scale, m_scale, 128);
		MAKE_PADDED_VAR(float, m_noiseInterval, m_noiseInterval, 136);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 140);
		MAKE_PADDED_VAR(intptr_t, m_timelifeLimit, m_timelifeLimit, 144);
	};
};

class CParticleSystem {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(SParticleSystemLODLevel*, m_lods[2], m_lods, 104);
		MAKE_PADDED_VAR(intptr_t*, m_emitters[2], m_emitters, 116);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 128);
		MAKE_PADDED_VAR(float, m_autoHideRange, m_autoHideRange, 132);
		MAKE_PADDED_VAR(Color, m_previewBackgroundColor, m_previewBackgroundColor, 136);
		MAKE_PADDED_VAR(bool, m_previewShowGrid, m_previewShowGrid, 140);
		MAKE_PADDED_VAR(bool, m_visibleThroughWalls, m_visibleThroughWalls, 141);
		MAKE_PADDED_VAR(float, m_prewarmingTime, m_prewarmingTime, 144);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 148);
	};
};

class CPhysicsDestructionResource {
public:
	union {
	CMesh cmesh;
		MAKE_PADDED_VAR(IMaterial*, m_materials[2], m_materials, 104);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 128);
		MAKE_PADDED_VAR(bool, m_isTwoSided, m_isTwoSided, 168);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 172);
		MAKE_PADDED_VAR(float, m_generalizedMeshRadius, m_generalizedMeshRadius, 224);
		MAKE_PADDED_VAR(bool, m_mergeInGlobalShadowMesh, m_mergeInGlobalShadowMesh, 228);
		MAKE_PADDED_VAR(intptr_t, m_soundInfo, m_soundInfo, 256);
		MAKE_PADDED_VAR(intptr_t, m_cookedData, m_cookedData, 272);
		MAKE_PADDED_VAR(bool, m_useExtraStreams, m_useExtraStreams, 528);
		MAKE_PADDED_VAR(bool, m_isStatic, m_isStatic, 529);
		MAKE_PADDED_VAR(bool, m_isOccluder, m_isOccluder, 530);
		MAKE_PADDED_VAR(float, m_smallestHoleOverride, m_smallestHoleOverride, 532);
		MAKE_PADDED_VAR(intptr_t*, m_chunks[2], m_chunks, 540);
		MAKE_PADDED_VAR(intptr_t, m_rawVertices, m_rawVertices, 552);
		MAKE_PADDED_VAR(intptr_t, m_rawIndices, m_rawIndices, 688);
		MAKE_PADDED_VAR(uint16_t*, m_finalIndices[2], m_finalIndices, 872);
		MAKE_PADDED_VAR(bool, m_entityProxy, m_entityProxy, 884);
		MAKE_PADDED_VAR(CCollisionMesh, m_collisionMesh, m_collisionMesh, 888);
		MAKE_PADDED_VAR(char, m_internalVersion, m_internalVersion, 912);
		MAKE_PADDED_VAR(intptr_t, m_chunksBuffer, m_chunksBuffer, 920);
		MAKE_PADDED_VAR(SBoneIndiceMapping*, m_boneIndicesMapping[2], m_boneIndicesMapping, 1076);
		MAKE_PADDED_VAR(uint32_t, m_chunkNumber, m_chunkNumber, 1088);
	};
};

class CPlayerStateMovable {
public:
	union {
	CPlayerStateBase cplayerstatebase;
		MAKE_PADDED_VAR(intptr_t, m_agent, m_agent, 64);
	};
};

class CPlaySoundOnActorRequest {
public:
	union {
	IEntityStateChangeRequest ientitystatechangerequest;
		MAKE_PADDED_VAR(int32_t, m_boneName, m_boneName, 88);
		MAKE_PADDED_VAR(intptr_t, m_soundName, m_soundName, 92);
		MAKE_PADDED_VAR(float, m_fadeTime, m_fadeTime, 104);
	};
};

class CPopupDef {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_timeParam, m_timeParam, 88);
	};
};

class CPopupPauseParam {
public:
	union {
	IPopupTimeParam ipopuptimeparam;
		MAKE_PADDED_VAR(intptr_t, m_pauseType, m_pauseType, 88);
	};
};

class CPopupResource {
public:
	union {
	IGuiResource iguiresource;
		MAKE_PADDED_VAR(intptr_t*, m_resourceBlocks[2], m_resourceBlocks, 112);
		MAKE_PADDED_VAR(int32_t, m_popupClass, m_popupClass, 144);
		MAKE_PADDED_VAR(CSwfResource, m_popupFlashSwf, m_popupFlashSwf, 152);
		MAKE_PADDED_VAR(uint32_t, m_layer, m_layer, 184);
		MAKE_PADDED_VAR(intptr_t, m_popupDef, m_popupDef, 192);
	};
};

class CPoseCompressionDefault {
public:
	union {
	IPoseCompression iposecompression;
		MAKE_PADDED_VAR(char*, m_firstRotBoneName, m_firstRotBoneName, 88);
		MAKE_PADDED_VAR(char*, m_lastRotBoneName, m_lastRotBoneName, 100);
		MAKE_PADDED_VAR(char*, m_firstTransBoneName, m_firstTransBoneName, 112);
		MAKE_PADDED_VAR(char*, m_lastTransBoneName, m_lastTransBoneName, 124);
		MAKE_PADDED_VAR(int32_t, m_firstRotBone, m_firstRotBone, 136);
		MAKE_PADDED_VAR(int32_t, m_lastRotBone, m_lastRotBone, 140);
		MAKE_PADDED_VAR(int32_t, m_firstTransBone, m_firstTransBone, 144);
		MAKE_PADDED_VAR(int32_t, m_lastTransBone, m_lastTransBone, 148);
		MAKE_PADDED_VAR(intptr_t, m_compressTranslationType, m_compressTranslationType, 152);
	};
};

class CPoseCompressionDefaultWithExtraBones {
public:
	union {
	CPoseCompressionDefault cposecompressiondefault;
		MAKE_PADDED_VAR(char*, m_firstRotBoneName, m_firstRotBoneName, 88);
		MAKE_PADDED_VAR(char*, m_lastRotBoneName, m_lastRotBoneName, 100);
		MAKE_PADDED_VAR(char*, m_firstTransBoneName, m_firstTransBoneName, 112);
		MAKE_PADDED_VAR(char*, m_lastTransBoneName, m_lastTransBoneName, 124);
		MAKE_PADDED_VAR(int32_t, m_firstRotBone, m_firstRotBone, 136);
		MAKE_PADDED_VAR(int32_t, m_lastRotBone, m_lastRotBone, 140);
		MAKE_PADDED_VAR(int32_t, m_firstTransBone, m_firstTransBone, 144);
		MAKE_PADDED_VAR(int32_t, m_lastTransBone, m_lastTransBone, 148);
		MAKE_PADDED_VAR(intptr_t, m_compressTranslationType, m_compressTranslationType, 152);
		MAKE_PADDED_VAR(int32_t*, m_extraRotBones[2], m_extraRotBones, 160);
		MAKE_PADDED_VAR(int32_t*, m_extraTransBones[2], m_extraTransBones, 172);
	};
};

class CQCAttitude {
public:
	union {
	IActorConditionType iactorconditiontype;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
		MAKE_PADDED_VAR(intptr_t, m_attitude, m_attitude, 96);
	};
};

class CQCDistanceTo {
public:
	union {
	IActorConditionType iactorconditiontype;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
		MAKE_PADDED_VAR(int32_t, m_targetNodeTag, m_targetNodeTag, 104);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 108);
		MAKE_PADDED_VAR(float, m_distance, m_distance, 112);
	};
};

class CQCHasItem {
public:
	union {
	CQCActorInventory cqcactorinventory;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
		MAKE_PADDED_VAR(int32_t, m_item, m_item, 112);
		MAKE_PADDED_VAR(int32_t, m_itemCategory, m_itemCategory, 116);
		MAKE_PADDED_VAR(int32_t, m_itemTag, m_itemTag, 120);
		MAKE_PADDED_VAR(uint32_t, m_quantity, m_quantity, 124);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 128);
	};
};

class CQCHasItemGE {
public:
	union {
	IGameplayEntConditionType igameplayentconditiontype;
		MAKE_PADDED_VAR(int32_t, m_item, m_item, 96);
		MAKE_PADDED_VAR(int32_t, m_itemCategory, m_itemCategory, 100);
		MAKE_PADDED_VAR(int32_t, m_itemTag, m_itemTag, 104);
		MAKE_PADDED_VAR(uint32_t, m_quantity, m_quantity, 108);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 112);
	};
};

class CQCIsObjectiveHighlighted {
public:
	union {
	IUIConditionType iuiconditiontype;
		MAKE_PADDED_VAR(CJournalPath, m_objectiveEntry, m_objectiveEntry, 96);
	};
};

class CQCIsOpenedJournalEntry {
public:
	union {
	IUIConditionType iuiconditiontype;
		MAKE_PADDED_VAR(CJournalPath, m_journalEntryToBeOpened, m_journalEntryToBeOpened, 96);
	};
};

class CQCItemQuantity {
public:
	union {
	CQCActorInventory cqcactorinventory;
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 88);
		MAKE_PADDED_VAR(int32_t, m_item, m_item, 112);
		MAKE_PADDED_VAR(int32_t, m_itemCategory, m_itemCategory, 116);
		MAKE_PADDED_VAR(int32_t, m_itemTag, m_itemTag, 120);
		MAKE_PADDED_VAR(uint32_t, m_quantity, m_quantity, 124);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 128);
	};
};

class CQuestActorCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_actorTag, m_actorTag, 96);
		MAKE_PADDED_VAR(intptr_t, m_checkType, m_checkType, 104);
	};
};

class CQuestBehaviorSyncGraphSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CQuestCameraFocusCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_nodeTag, m_nodeTag, 104);
		MAKE_PADDED_VAR(float, m_angleTolerance, m_angleTolerance, 108);
		MAKE_PADDED_VAR(bool, m_isLookingAtNode, m_isLookingAtNode, 112);
		MAKE_PADDED_VAR(bool, m_testLineOfSight, m_testLineOfSight, 113);
		MAKE_PADDED_VAR(intptr_t, m_lineOfSightSource, m_lineOfSightSource, 116);
	};
};

class CQuestCutControlGraphSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CQuestFactsDBConditionBase {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(char*, m_factId, m_factId, 104);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 116);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 120);
		MAKE_PADDED_VAR(intptr_t, m_queryFact, m_queryFact, 124);
	};
};

class CQuestFactsDBExCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(char*, m_factId1, m_factId1, 104);
		MAKE_PADDED_VAR(char*, m_factId2, m_factId2, 116);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 128);
		MAKE_PADDED_VAR(intptr_t, m_queryFact, m_queryFact, 132);
	};
};

class CQuestFactsDBForbiddenCondition {
public:
	union {
	CQuestFactsDBConditionBase cquestfactsdbconditionbase;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(char*, m_factId, m_factId, 104);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 116);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 120);
		MAKE_PADDED_VAR(intptr_t, m_queryFact, m_queryFact, 124);
	};
};

class CQuestFightCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_tag, m_tag, 104);
		MAKE_PADDED_VAR(int32_t, m_attackerTag, m_attackerTag, 108);
		MAKE_PADDED_VAR(int32_t, m_referenceValue, m_referenceValue, 112);
		MAKE_PADDED_VAR(intptr_t, m_damageMode, m_damageMode, 116);
	};
};

class CQuestGameplayEntCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_entityTag, m_entityTag, 96);
		MAKE_PADDED_VAR(intptr_t, m_checkType, m_checkType, 104);
	};
};

class CQuestGraphBlock {
public:
	union {
	CGraphBlock cgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
	};
};

class CQuestGraphMinigameBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_minigame, m_minigame, 288);
	};
};

class CQuestGraphSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CQuestInputCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_gameInput, m_gameInput, 96);
		MAKE_PADDED_VAR(intptr_t, m_valueCompareFunc, m_valueCompareFunc, 100);
		MAKE_PADDED_VAR(float, m_value, m_value, 104);
	};
};

class CQuestInteractionCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(char*, m_interactionName, m_interactionName, 96);
		MAKE_PADDED_VAR(intptr_t, m_ownerTags, m_ownerTags, 108);
	};
};

class CQuestInteractionDialogBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CStoryScene, m_scene, m_scene, 312);
		MAKE_PADDED_VAR(intptr_t, m_actorTags, m_actorTags, 344);
		MAKE_PADDED_VAR(bool, m_interrupt, m_interrupt, 356);
	};
};

class CQuestInterestPointBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_interestPoint, m_interestPoint, 288);
		MAKE_PADDED_VAR(int32_t, m_positionTag, m_positionTag, 296);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 300);
	};
};

class CQuestJournalStatusCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(CJournalPath, m_entry, m_entry, 104);
		MAKE_PADDED_VAR(intptr_t, m_status, m_status, 112);
		MAKE_PADDED_VAR(bool, m_inverted, m_inverted, 116);
	};
};

class CQuestLayersHiderBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(char*, m_world, m_world, 288);
		MAKE_PADDED_VAR(char**, m_layersToShow[2], m_layersToShow, 300);
		MAKE_PADDED_VAR(char**, m_layersToHide[2], m_layersToHide, 312);
		MAKE_PADDED_VAR(bool, m_syncOperation, m_syncOperation, 324);
		MAKE_PADDED_VAR(bool, m_purgeSavedData, m_purgeSavedData, 325);
	};
};

class CQuestLockNPCBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_npcsTag, m_npcsTag, 288);
	};
};

class CQuestLogicOperationCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 96);
		MAKE_PADDED_VAR(intptr_t, m_logicOperation, m_logicOperation, 108);
	};
};

class CQuestLookAtBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 288);
		MAKE_PADDED_VAR(int32_t, m_target, m_target, 292);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 296);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 300);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 304);
		MAKE_PADDED_VAR(bool, m_instant, m_instant, 308);
		MAKE_PADDED_VAR(bool, m_canCloseEyes, m_canCloseEyes, 309);
		MAKE_PADDED_VAR(bool, m_forceCloseEyes, m_forceCloseEyes, 310);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 312);
		MAKE_PADDED_VAR(intptr_t, m_level, m_level, 316);
		MAKE_PADDED_VAR(float, m_range, m_range, 320);
		MAKE_PADDED_VAR(float, m_gameplayRange, m_gameplayRange, 324);
		MAKE_PADDED_VAR(bool, m_limitDeact, m_limitDeact, 328);
		MAKE_PADDED_VAR(Vector, m_staticPoint, m_staticPoint, 336);
		MAKE_PADDED_VAR(float, m_headRotationRatio, m_headRotationRatio, 352);
		MAKE_PADDED_VAR(float, m_eyesLookAtConvergenceWeight, m_eyesLookAtConvergenceWeight, 356);
		MAKE_PADDED_VAR(bool, m_eyesLookAtIsAdditive, m_eyesLookAtIsAdditive, 360);
		MAKE_PADDED_VAR(float, m_eyesLookAtDampScale, m_eyesLookAtDampScale, 364);
	};
};

class CQuestManageFastTravelBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_operation, m_operation, 288);
		MAKE_PADDED_VAR(bool, m_enable, m_enable, 292);
		MAKE_PADDED_VAR(bool, m_show, m_show, 293);
		MAKE_PADDED_VAR(int32_t*, m_affectedAreas[2], m_affectedAreas, 296);
		MAKE_PADDED_VAR(int32_t*, m_affectedFastTravelPoints[2], m_affectedFastTravelPoints, 308);
	};
};

class CQuestManyActorsCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(intptr_t, m_actorTags, m_actorTags, 104);
		MAKE_PADDED_VAR(intptr_t, m_logicOperation, m_logicOperation, 116);
		MAKE_PADDED_VAR(intptr_t, m_condition, m_condition, 120);
	};
};

class CQuestNoLivingActorsCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(intptr_t, m_actorTags, m_actorTags, 104);
	};
};

class CQuestPauseConditionBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t*, m_conditions[2], m_conditions, 304);
	};
};

class CQuestPhase {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_graph, m_graph, 104);
	};
};

class CQuestPhaseIOBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_socketID, m_socketID, 288);
	};
};

class CQuestPhaseOutputBlock {
public:
	union {
	CQuestPhaseIOBlock cquestphaseioblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_socketID, m_socketID, 288);
	};
};

class CQuestPlayAnimationBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_entityTag, m_entityTag, 288);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 292);
		MAKE_PADDED_VAR(intptr_t, m_operation, m_operation, 296);
		MAKE_PADDED_VAR(uint32_t, m_playCount, m_playCount, 300);
		MAKE_PADDED_VAR(float, m_playLengthScale, m_playLengthScale, 304);
		MAKE_PADDED_VAR(intptr_t, m_playPropertyCurveMode, m_playPropertyCurveMode, 308);
		MAKE_PADDED_VAR(float, m_rewindTime, m_rewindTime, 312);
	};
};

class CQuestPokeScriptedActionsBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 288);
		MAKE_PADDED_VAR(int32_t, m_pokeEvent, m_pokeEvent, 292);
		MAKE_PADDED_VAR(bool, m_onlyOneActor, m_onlyOneActor, 296);
		MAKE_PADDED_VAR(bool, m_handleBehaviorOutcome, m_handleBehaviorOutcome, 297);
	};
};

class CQuestRandomBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t*, m_randomOutputs[2], m_randomOutputs, 288);
	};
};

class CQuestReactionCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_fieldName, m_fieldName, 96);
		MAKE_PADDED_VAR(intptr_t, m_actorsTags, m_actorsTags, 100);
	};
};

class CQuestResetScriptedActionsBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 288);
		MAKE_PADDED_VAR(bool, m_onlyOneActor, m_onlyOneActor, 292);
	};
};

class CQuestRewardBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_rewardName, m_rewardName, 288);
		MAKE_PADDED_VAR(int32_t, m_targetEntityTag, m_targetEntityTag, 292);
		MAKE_PADDED_VAR(char*, m_caption, m_caption, 296);
	};
};

class CQuestSceneBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CStoryScene, m_scene, m_scene, 312);
		MAKE_PADDED_VAR(intptr_t, m_forcingMode, m_forcingMode, 344);
		MAKE_PADDED_VAR(bool, m_forceSpawnedActors, m_forceSpawnedActors, 348);
		MAKE_PADDED_VAR(bool, m_interrupt, m_interrupt, 349);
		MAKE_PADDED_VAR(bool, m_shouldFadeOnLoading, m_shouldFadeOnLoading, 350);
		MAKE_PADDED_VAR(int32_t*, m_shouldFadeOnLoading_NamesCooked[2], m_shouldFadeOnLoading_NamesCooked, 352);
		MAKE_PADDED_VAR(bool*, m_shouldFadeOnLoading_ValuesCooked[2], m_shouldFadeOnLoading_ValuesCooked, 364);
		MAKE_PADDED_VAR(intptr_t, m_saveMode, m_saveMode, 376);
		MAKE_PADDED_VAR(int32_t, m_saveSkipOutputNode, m_saveSkipOutputNode, 380);
		MAKE_PADDED_VAR(int32_t, m_playGoChunk, m_playGoChunk, 384);
	};
};

class CQuestScenePrepareBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(StorySceneDefinition*, m_storyScenes[2], m_storyScenes, 288);
	};
};

class CQuestScopeBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CQuestPhase, m_phase, m_phase, 368);
		MAKE_PADDED_VAR(intptr_t, m_embeddedGraph, m_embeddedGraph, 376);
		MAKE_PADDED_VAR(CQuestPhase, m_phaseHandle, m_phaseHandle, 392);
		MAKE_PADDED_VAR(char*, m_requiredWorld, m_requiredWorld, 424);
	};
};

class CQuestScriptBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_functionName, m_functionName, 296);
		MAKE_PADDED_VAR(intptr_t, m_saveMode, m_saveMode, 300);
		MAKE_PADDED_VAR(intptr_t*, m_parameters[2], m_parameters, 304);
		MAKE_PADDED_VAR(bool, m_choiceOutput, m_choiceOutput, 316);
		MAKE_PADDED_VAR(char*, m_caption, m_caption, 320);
	};
};

class CQuestScriptedDialogBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CStoryScene, m_scene, m_scene, 312);
		MAKE_PADDED_VAR(intptr_t, m_actorTags, m_actorTags, 344);
	};
};

class CQuestSpawnNotStreamedBoatBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t*, m_tagsToSet[2], m_tagsToSet, 288);
		MAKE_PADDED_VAR(int32_t, m_spawnLayerTag, m_spawnLayerTag, 300);
		MAKE_PADDED_VAR(int32_t, m_spawnPointTag, m_spawnPointTag, 304);
		MAKE_PADDED_VAR(bool, m_forceNonStreamed, m_forceNonStreamed, 308);
	};
};

class CQuestSpawnVehicleBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_vehicleType, m_vehicleType, 288);
		MAKE_PADDED_VAR(int32_t, m_spawnPointTag, m_spawnPointTag, 292);
	};
};

class CQuestStartBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
	};
};

class CQuestStateChangeRequestResetBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_entityTag, m_entityTag, 288);
	};
};

class CQuestStaticCameraStopBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 288);
	};
};

class CQuestStoryPhaseSetterBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t*, m_spawnsets[2], m_spawnsets, 288);
	};
};

class CQuestTagsPresenceCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 104);
		MAKE_PADDED_VAR(bool, m_all, m_all, 116);
		MAKE_PADDED_VAR(uint32_t, m_howMany, m_howMany, 120);
		MAKE_PADDED_VAR(bool, m_includeStubs, m_includeStubs, 124);
	};
};

class CQuestTeleportBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_locationTag, m_locationTag, 288);
		MAKE_PADDED_VAR(float, m_distance, m_distance, 300);
		MAKE_PADDED_VAR(float, m_distanceToDestination, m_distanceToDestination, 304);
		MAKE_PADDED_VAR(intptr_t, m_actorsTags, m_actorsTags, 308);
	};
};

class CQuestTestBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
	};
};

class CQuestTimeCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(GameTime, m_time, m_time, 96);
		MAKE_PADDED_VAR(intptr_t, m_comparison, m_comparison, 100);
	};
};

class CQuestTimeManagementBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_function, m_function, 288);
	};
};

class CQuestUICondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(intptr_t, m_checkType, m_checkType, 96);
	};
};

class CQuestUnlockNPCBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_npcsTag, m_npcsTag, 288);
	};
};

class CQuestUsedFastTravelCondition {
public:
	union {
	IQuestCondition iquestcondition;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(int32_t, m_pinTag, m_pinTag, 100);
		MAKE_PADDED_VAR(intptr_t, m_conditionType, m_conditionType, 104);
	};
};

class CQuestVariedInputsBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(uint32_t, m_inputsCount, m_inputsCount, 288);
	};
};

class CQuestWaitForTickBlock {
public:
	union {
	CQuestTestBlock cquesttestblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(uint32_t, m_tick, m_tick, 288);
	};
};

class CQuestXorBlock {
public:
	union {
	CQuestVariedInputsBlock cquestvariedinputsblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(uint32_t, m_inputsCount, m_inputsCount, 288);
	};
};

class CR4BehTreeNodePredefinedPathWithCompanionDefinition {
public:
	union {
	CBehTreeNodePredefinedPathWithCompanionDefinition cbehtreenodepredefinedpathwithcompaniondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pathName, m_pathName, 136);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathMargin, m_pathMargin, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerance, m_tolerance, 152);
		MAKE_PADDED_VAR(CBehTreeValBool, m_upThePath, m_upThePath, 160);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_arrivalDistance, m_arrivalDistance, 168);
		MAKE_PADDED_VAR(CBehTreeValBool, m_useExplorations, m_useExplorations, 176);
		MAKE_PADDED_VAR(CBehTreeValCName, m_companionTag, m_companionTag, 184);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 192);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 200);
		MAKE_PADDED_VAR(CBehTreeValBool, m_progressWhenCompanionIsAhead, m_progressWhenCompanionIsAhead, 208);
		MAKE_PADDED_VAR(CBehTreeValBool, m_progressOnlyWhenCompanionIsAhead, m_progressOnlyWhenCompanionIsAhead, 216);
		MAKE_PADDED_VAR(CBehTreeValBool, m_matchCompanionSpeed, m_matchCompanionSpeed, 224);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepMovingWhenMaxDistanceReached, m_keepMovingWhenMaxDistanceReached, 232);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveTypeAfterMaxDistanceReached, m_moveTypeAfterMaxDistanceReached, 240);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_companionOffset, m_companionOffset, 256);
	};
};

class CR4FinisherDLC {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_finisherAnimName, m_finisherAnimName, 88);
		MAKE_PADDED_VAR(int32_t, m_woundName, m_woundName, 92);
		MAKE_PADDED_VAR(intptr_t, m_finisherSide, m_finisherSide, 96);
		MAKE_PADDED_VAR(int32_t, m_leftCameraAnimName, m_leftCameraAnimName, 100);
		MAKE_PADDED_VAR(int32_t, m_rightCameraAnimName, m_rightCameraAnimName, 104);
		MAKE_PADDED_VAR(int32_t, m_frontCameraAnimName, m_frontCameraAnimName, 108);
		MAKE_PADDED_VAR(int32_t, m_backCameraAnimName, m_backCameraAnimName, 112);
	};
};

class CR4FinishersDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(intptr_t, m_customCameraAnimSet, m_customCameraAnimSet, 88);
		MAKE_PADDED_VAR(intptr_t*, m_finishers[2], m_finishers, 100);
	};
};

class CR4LocomotionDirectController {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_agent, m_agent, 88);
		MAKE_PADDED_VAR(float, m_moveSpeed, m_moveSpeed, 96);
		MAKE_PADDED_VAR(float, m_moveRotation, m_moveRotation, 100);
	};
};

class CR4LocomotionDirectControllerScript {
public:
	union {
	CR4LocomotionDirectController cr4locomotiondirectcontroller;
		MAKE_PADDED_VAR(intptr_t, m_agent, m_agent, 88);
		MAKE_PADDED_VAR(float, m_moveSpeed, m_moveSpeed, 96);
		MAKE_PADDED_VAR(float, m_moveRotation, m_moveRotation, 100);
	};
};

class CR4MappinsDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(intptr_t, m_worldFilePath, m_worldFilePath, 88);
		MAKE_PADDED_VAR(CEntityMapPinsResource, m_mappinsFilePath, m_mappinsFilePath, 120);
		MAKE_PADDED_VAR(CQuestMapPinsResource, m_questMappinsFilePath, m_questMappinsFilePath, 152);
	};
};

class CR4QuestDLCMounter {
public:
	union {
	IGameplayDLCMounter igameplaydlcmounter;
		MAKE_PADDED_VAR(intptr_t, m_quest, m_quest, 88);
		MAKE_PADDED_VAR(int32_t, m_taintFact, m_taintFact, 96);
		MAKE_PADDED_VAR(char*, m_sceneVoiceTagsTableFilePath, m_sceneVoiceTagsTableFilePath, 100);
		MAKE_PADDED_VAR(char*, m_questLevelsFilePath, m_questLevelsFilePath, 116);
	};
};

class CRagdoll {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(float, m_densityScaler, m_densityScaler, 152);
		MAKE_PADDED_VAR(float, m_windScaler, m_windScaler, 156);
		MAKE_PADDED_VAR(float, m_autoStopDelay, m_autoStopDelay, 160);
		MAKE_PADDED_VAR(float, m_autoStopTime, m_autoStopTime, 164);
		MAKE_PADDED_VAR(float, m_autoStopSpeed, m_autoStopSpeed, 168);
		MAKE_PADDED_VAR(bool, m_resetDampingAfterStop, m_resetDampingAfterStop, 172);
		MAKE_PADDED_VAR(bool, m_forceWakeUpOnAttach, m_forceWakeUpOnAttach, 173);
		MAKE_PADDED_VAR(intptr_t, m_customDynamicGroup, m_customDynamicGroup, 176);
		MAKE_PADDED_VAR(bool, m_disableConstrainsTwistAxis, m_disableConstrainsTwistAxis, 216);
		MAKE_PADDED_VAR(bool, m_disableConstrainsSwing1Axis, m_disableConstrainsSwing1Axis, 217);
		MAKE_PADDED_VAR(bool, m_disableConstrainsSwing2Axis, m_disableConstrainsSwing2Axis, 218);
		MAKE_PADDED_VAR(float, m_jointBounce, m_jointBounce, 220);
		MAKE_PADDED_VAR(float, m_modifyTwistLower, m_modifyTwistLower, 224);
		MAKE_PADDED_VAR(float, m_modifyTwistUpper, m_modifyTwistUpper, 228);
		MAKE_PADDED_VAR(float, m_modifySwingY, m_modifySwingY, 232);
		MAKE_PADDED_VAR(float, m_modifySwingZ, m_modifySwingZ, 236);
		MAKE_PADDED_VAR(int32_t, m_projectionIterations, m_projectionIterations, 240);
	};
};

class CReactionAttitudeChange {
public:
	union {
	IReactionAction ireactionaction;
		MAKE_PADDED_VAR(intptr_t, m_attitude, m_attitude, 88);
		MAKE_PADDED_VAR(bool, m_towardSource, m_towardSource, 92);
		MAKE_PADDED_VAR(bool, m_noticeActor, m_noticeActor, 93);
	};
};

class CReactionLookAtAction {
public:
	union {
	IReactionAction ireactionaction;
		MAKE_PADDED_VAR(intptr_t, m_lookAtType, m_lookAtType, 88);
	};
};

class CScriptedInterestPoint {
public:
	union {
	CInterestPoint cinterestpoint;
		MAKE_PADDED_VAR(int32_t, m_fieldName, m_fieldName, 88);
		MAKE_PADDED_VAR(intptr_t, m_potentialField, m_potentialField, 96);
	};
};

class CSEntitiesEntry {
public:
	union {
	CEntityTemplate m_entityTemplate;
		MAKE_PADDED_VAR(int32_t*, m_appearances[2], m_appearances, 32);
		MAKE_PADDED_VAR(intptr_t, m_entitySpawnTags, m_entitySpawnTags, 48);
		MAKE_PADDED_VAR(int32_t, m_mappinTag, m_mappinTag, 60);
		MAKE_PADDED_VAR(intptr_t, m_mappinType, m_mappinType, 64);
		MAKE_PADDED_VAR(intptr_t, m_initializers, m_initializers, 72);
		MAKE_PADDED_VAR(intptr_t, m_despawners, m_despawners, 80);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
	};
};

class CSimpleActionPointSelector {
public:
	union {
	CActionPointSelector cactionpointselector;
		MAKE_PADDED_VAR(int32_t*, m_categories[2], m_categories, 48);
		MAKE_PADDED_VAR(intptr_t, m_apTags, m_apTags, 60);
		MAKE_PADDED_VAR(intptr_t, m_areaTags, m_areaTags, 72);
		MAKE_PADDED_VAR(int32_t, m_apAreaTag, m_apAreaTag, 84);
		MAKE_PADDED_VAR(bool, m_keepActionPointOnceSelected, m_keepActionPointOnceSelected, 88);
		MAKE_PADDED_VAR(bool, m_useNearestMatchingAP, m_useNearestMatchingAP, 89);
	};
};

class CSkeletalAnimation {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t, m_animBuffer, m_animBuffer, 32);
		MAKE_PADDED_VAR(float, m_framesPerSecond, m_framesPerSecond, 40);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 44);
		MAKE_PADDED_VAR(intptr_t, m_motionExtraction, m_motionExtraction, 48);
		MAKE_PADDED_VAR(int32_t, m_compressedPose, m_compressedPose, 56);
		MAKE_PADDED_VAR(bool, m_hasBundingBox, m_hasBundingBox, 60);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 64);
		MAKE_PADDED_VAR(intptr_t, m_streamingType, m_streamingType, 112);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 116);
	};
};

class CSkeletalAnimationAttackTrajectoryParam {
public:
	union {
	ISkeletalAnimationSetEntryParam iskeletalanimationsetentryparam;
		MAKE_PADDED_VAR(int32_t, m_tagId, m_tagId, 272);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 276);
		MAKE_PADDED_VAR(float, m_hitDuration, m_hitDuration, 280);
		MAKE_PADDED_VAR(float, m_postHitEnd, m_postHitEnd, 284);
		MAKE_PADDED_VAR(float, m_slowMotionStart, m_slowMotionStart, 288);
		MAKE_PADDED_VAR(float, m_slowMotionEnd, m_slowMotionEnd, 292);
		MAKE_PADDED_VAR(float, m_dampOutEnd, m_dampOutEnd, 296);
		MAKE_PADDED_VAR(float, m_slowMotionTimeFactor, m_slowMotionTimeFactor, 300);
	};
};

class CSkeletalAnimationSet {
public:
	union {
	CExtAnimEventsFile cextanimeventsfile;
		MAKE_PADDED_VAR(int32_t, m_requiredSfxTag, m_requiredSfxTag, 144);
		MAKE_PADDED_VAR(intptr_t*, m_animations[2], m_animations, 152);
		MAKE_PADDED_VAR(intptr_t, m_skeleton, m_skeleton, 168);
		MAKE_PADDED_VAR(intptr_t*, m_compressedPoses[2], m_compressedPoses, 176);
		MAKE_PADDED_VAR(CExtAnimEventsFile*, m_extAnimEvents[2], m_extAnimEvents, 188);
		MAKE_PADDED_VAR(intptr_t, m_Streaming_option, m_Streaming_option, 200);
		MAKE_PADDED_VAR(uint32_t, m_Number_of_non_streamable_bones, m_Number_of_non_streamable_bones, 204);
	};
};

class CSkeletalAnimationSetEntry {
public:
	union {
	ISerializable iserializable;
		MAKE_PADDED_VAR(intptr_t, m_animation, m_animation, 32);
		MAKE_PADDED_VAR(intptr_t, m_compressedPoseBlend, m_compressedPoseBlend, 40);
		MAKE_PADDED_VAR(intptr_t*, m_params[2], m_params, 44);
		MAKE_PADDED_VAR(SEventGroupsRanges*, m_eventsGroupsRanges[2], m_eventsGroupsRanges, 80);
	};
};

class CSkeleton {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t*, m_bones[2], m_bones, 104);
		MAKE_PADDED_VAR(intptr_t*, m_tracks[2], m_tracks, 116);
		MAKE_PADDED_VAR(intptr_t*, m_parentIndices[2], m_parentIndices, 128);
		MAKE_PADDED_VAR(int32_t, m_lodBoneNum_1, m_lodBoneNum_1, 168);
		MAKE_PADDED_VAR(int32_t, m_lastNonStreamableBoneName, m_lastNonStreamableBoneName, 172);
		MAKE_PADDED_VAR(intptr_t, m_poseCompression, m_poseCompression, 224);
		MAKE_PADDED_VAR(intptr_t, m_bboxGenerator, m_bboxGenerator, 232);
		MAKE_PADDED_VAR(intptr_t, m_controlRigDefinition, m_controlRigDefinition, 240);
		MAKE_PADDED_VAR(intptr_t, m_controlRigDefaultPropertySet, m_controlRigDefaultPropertySet, 248);
		MAKE_PADDED_VAR(intptr_t, m_controlRigSettings, m_controlRigSettings, 256);
		MAKE_PADDED_VAR(intptr_t*, m_skeletonMappers[2], m_skeletonMappers, 264);
		MAKE_PADDED_VAR(intptr_t, m_teleportDetectorData, m_teleportDetectorData, 280);
		MAKE_PADDED_VAR(float, m_walkSpeed, m_walkSpeed, 288);
		MAKE_PADDED_VAR(float, m_slowRunSpeed, m_slowRunSpeed, 292);
		MAKE_PADDED_VAR(float, m_fastRunSpeed, m_fastRunSpeed, 296);
		MAKE_PADDED_VAR(float, m_sprintSpeed, m_sprintSpeed, 300);
		MAKE_PADDED_VAR(float, m_walkSpeedRel, m_walkSpeedRel, 304);
		MAKE_PADDED_VAR(float, m_slowRunSpeedRel, m_slowRunSpeedRel, 308);
		MAKE_PADDED_VAR(float, m_fastRunSpeedRel, m_fastRunSpeedRel, 312);
		MAKE_PADDED_VAR(float, m_sprintSpeedRel, m_sprintSpeedRel, 316);
	};
};

class CSkeleton2SkeletonMapper {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CSkeleton, m_skeletonB, m_skeletonB, 88);
		MAKE_PADDED_VAR(int32_t, m_pelvisBoneName, m_pelvisBoneName, 96);
		MAKE_PADDED_VAR(int32_t*, m_mappingA2B[2], m_mappingA2B, 100);
		MAKE_PADDED_VAR(int32_t*, m_mappingB2A[2], m_mappingB2A, 112);
		MAKE_PADDED_VAR(float, m_motionScale, m_motionScale, 124);
		MAKE_PADDED_VAR(bool, m_skeletonsAreSimilar, m_skeletonsAreSimilar, 128);
	};
};

class CSlotFormationLogic {
public:
	union {
	IFormationLogic iformationlogic;
		MAKE_PADDED_VAR(float, m_recomputionDelay, m_recomputionDelay, 88);
		MAKE_PADDED_VAR(float, m_minCatchupDistance, m_minCatchupDistance, 92);
		MAKE_PADDED_VAR(intptr_t, m_formationPattern, m_formationPattern, 96);
	};
};

class CSourceTexture {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(uint32_t, m_width, m_width, 152);
		MAKE_PADDED_VAR(uint32_t, m_height, m_height, 156);
		MAKE_PADDED_VAR(uint32_t, m_pitch, m_pitch, 160);
		MAKE_PADDED_VAR(intptr_t, m_format, m_format, 164);
	};
};

class CSpawnConditionFact {
public:
	union {
	ISpawnCondition ispawncondition;
		MAKE_PADDED_VAR(char*, m_fact, m_fact, 48);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 60);
		MAKE_PADDED_VAR(intptr_t, m_compare, m_compare, 64);
	};
};

class CSpawnTree {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_spawnTreeType, m_spawnTreeType, 120);
		MAKE_PADDED_VAR(intptr_t, m_rootNode, m_rootNode, 128);
		MAKE_PADDED_VAR(intptr_t*, m_creatureDefinition[2], m_creatureDefinition, 168);
	};
};

class CSpawnTreeActionPointSpawner {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_visibility, m_visibility, 40);
		MAKE_PADDED_VAR(float, m_spawnpointDelay, m_spawnpointDelay, 44);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 48);
		MAKE_PADDED_VAR(int32_t*, m_categories[2], m_categories, 64);
	};
};

class CSpawnTreeAIDespawnInitializer {
public:
	union {
	CSpawnTreeDespawnInitializer cspawntreedespawninitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(SSpawnTreeDespawnConfiguration, m_instantDespawnConfiguration, m_instantDespawnConfiguration, 112);
		MAKE_PADDED_VAR(SSpawnTreeAIDespawnConfiguration, m_aiDespawnConfiguration, m_aiDespawnConfiguration, 144);
		MAKE_PADDED_VAR(CAIDespawnTree, m_ai, m_ai, 176);
		MAKE_PADDED_VAR(intptr_t, m_aiPriority, m_aiPriority, 184);
	};
};

class CSpawnTreeIncludeTreeNode {
public:
	union {
	ISpawnTreeBranch ispawntreebranch;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(CSpawnTree, m_spawnTree, m_spawnTree, 144);
	};
};

class CSpawnTreeInitializerActionpointSpawner {
public:
	union {
	ISpawnTreeSpawnerInitializer ispawntreespawnerinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(CSpawnTreeActionPointSpawner, m_spawner, m_spawner, 112);
	};
};

class CSpawnTreeInitializerAddTag {
public:
	union {
	ISpawnTreeInitializer ispawntreeinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(intptr_t, m_tag, m_tag, 112);
		MAKE_PADDED_VAR(bool, m_onlySetOnSpawnAppearance, m_onlySetOnSpawnAppearance, 124);
	};
};

class CSpawnTreeInitializerBaseStartingBehavior {
public:
	union {
	ISpawnTreeInitializerAI ispawntreeinitializerai;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnSpawn, m_runBehaviorOnSpawn, 136);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnActivation, m_runBehaviorOnActivation, 137);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnLoading, m_runBehaviorOnLoading, 138);
		MAKE_PADDED_VAR(intptr_t, m_actionPriority, m_actionPriority, 140);
	};
};

class CSpawnTreeInitializerGuardAreaByHandle {
public:
	union {
	ISpawnTreeInitializerGuardAreaBase ispawntreeinitializerguardareabase;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(float, m_pursuitRange, m_pursuitRange, 112);
		MAKE_PADDED_VAR(intptr_t, m_guardArea, m_guardArea, 120);
		MAKE_PADDED_VAR(intptr_t, m_pursuitArea, m_pursuitArea, 128);
	};
};

class CSpawnTreeInitializerRiderStartingBehavior {
public:
	union {
	CSpawnTreeInitializerBaseStartingBehavior cspawntreeinitializerbasestartingbehavior;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnSpawn, m_runBehaviorOnSpawn, 136);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnActivation, m_runBehaviorOnActivation, 137);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnLoading, m_runBehaviorOnLoading, 138);
		MAKE_PADDED_VAR(intptr_t, m_actionPriority, m_actionPriority, 140);
	};
};

class CSpawnTreeInitializerStartingBehavior {
public:
	union {
	CSpawnTreeInitializerBaseStartingBehavior cspawntreeinitializerbasestartingbehavior;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicTreeParameterName, m_dynamicTreeParameterName, 132);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnSpawn, m_runBehaviorOnSpawn, 136);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnActivation, m_runBehaviorOnActivation, 137);
		MAKE_PADDED_VAR(bool, m_runBehaviorOnLoading, m_runBehaviorOnLoading, 138);
		MAKE_PADDED_VAR(intptr_t, m_actionPriority, m_actionPriority, 140);
	};
};

class CSpawnTreeInitializerWaypointSpawner {
public:
	union {
	ISpawnTreeSpawnerInitializer ispawntreespawnerinitializer;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(bool, m_overrideDeepInitializers, m_overrideDeepInitializers, 104);
		MAKE_PADDED_VAR(intptr_t, m_spawner, m_spawner, 112);
	};
};

class CSpawnTreeWaypointSpawner {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_visibility, m_visibility, 40);
		MAKE_PADDED_VAR(float, m_spawnpointDelay, m_spawnpointDelay, 44);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 48);
		MAKE_PADDED_VAR(bool, m_useLocationTest, m_useLocationTest, 60);
	};
};

class CSSceneTableEntry {
public:
	union {
	intptr_t m_storyPhaseName;
		MAKE_PADDED_VAR(float, m_cooldownTime, m_cooldownTime, 24);
		MAKE_PADDED_VAR(CSSceneTimetableEntry*, m_timetable[2], m_timetable, 28);
	};
};

class CSSceneTimetableScenesEntry {
public:
	union {
	CStoryScene m_storyScene;
		MAKE_PADDED_VAR(char*, m_sceneInputSection, m_sceneInputSection, 8);
		MAKE_PADDED_VAR(float, m_cooldownTime, m_cooldownTime, 20);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 24);
		MAKE_PADDED_VAR(intptr_t, m_priority, m_priority, 28);
		MAKE_PADDED_VAR(intptr_t, m_forceMode, m_forceMode, 32);
	};
};

class CSStoryPhaseEntry {
public:
	union {
	char* m_comment;
		MAKE_PADDED_VAR(intptr_t, m_storyPhaseName, m_storyPhaseName, 12);
		MAKE_PADDED_VAR(bool, m_isHiddenSpawn, m_isHiddenSpawn, 24);
		MAKE_PADDED_VAR(intptr_t, m_initializers, m_initializers, 32);
		MAKE_PADDED_VAR(CSStoryPhaseSpawnTimetableEntry*, m_spawnTimetable[2], m_spawnTimetable, 40);
		MAKE_PADDED_VAR(int32_t, m_timetableName, m_timetableName, 52);
		MAKE_PADDED_VAR(GameTime, m_spawnDelay, m_spawnDelay, 56);
		MAKE_PADDED_VAR(intptr_t, m_spawnPointTags, m_spawnPointTags, 60);
		MAKE_PADDED_VAR(intptr_t, m_despawnPointTags, m_despawnPointTags, 72);
		MAKE_PADDED_VAR(bool, m_startInAP, m_startInAP, 84);
		MAKE_PADDED_VAR(bool, m_useLastAP, m_useLastAP, 85);
		MAKE_PADDED_VAR(bool, m_alwaysSpawned, m_alwaysSpawned, 86);
		MAKE_PADDED_VAR(intptr_t, m_spawnStrategy, m_spawnStrategy, 88);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 96);
		MAKE_PADDED_VAR(Vector, m_cachedMapPinPosition, m_cachedMapPinPosition, 112);
	};
};

class CSStoryPhaseNames {
public:
	union {
	intptr_t m_tags;
	};
};

class CSStoryPhaseTimetableACategoriesEntry {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(float, m_weight, m_weight, 4);
		MAKE_PADDED_VAR(intptr_t, m_apTags, m_apTags, 8);
	};
};

class CSTableEntry {
public:
	union {
	char* m_comment;
		MAKE_PADDED_VAR(char*, m_entryID, m_entryID, 12);
		MAKE_PADDED_VAR(CSEntitiesEntry*, m_entities[2], m_entities, 24);
		MAKE_PADDED_VAR(bool, m_alwaysSpawned, m_alwaysSpawned, 36);
		MAKE_PADDED_VAR(CSStoryPhaseEntry*, m_storyPhases[2], m_storyPhases, 40);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 52);
	};
};

class CStorySceneActionStartWork {
public:
	union {
	CStorySceneAction cstorysceneaction;
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 88);
		MAKE_PADDED_VAR(CJobTree, m_jobTree, m_jobTree, 112);
		MAKE_PADDED_VAR(int32_t, m_category, m_category, 120);
	};
};

class CStorySceneActor {
public:
	union {
	IStorySceneItem istorysceneitem;
		MAKE_PADDED_VAR(int32_t, m_id, m_id, 88);
		MAKE_PADDED_VAR(intptr_t, m_actorTags, m_actorTags, 96);
		MAKE_PADDED_VAR(CEntityTemplate, m_entityTemplate, m_entityTemplate, 112);
		MAKE_PADDED_VAR(int32_t*, m_appearanceFilter[2], m_appearanceFilter, 144);
		MAKE_PADDED_VAR(bool, m_dontSearchByVoicetag, m_dontSearchByVoicetag, 156);
		MAKE_PADDED_VAR(char*, m_alias, m_alias, 160);
		MAKE_PADDED_VAR(bool, m_useHiresShadows, m_useHiresShadows, 172);
		MAKE_PADDED_VAR(bool, m_forceSpawn, m_forceSpawn, 173);
		MAKE_PADDED_VAR(bool, m_useMimic, m_useMimic, 174);
	};
};

class CStorySceneActorPosition {
public:
	union {
	intptr_t m_position;
		MAKE_PADDED_VAR(float, m_distance, m_distance, 12);
		MAKE_PADDED_VAR(bool, m_useRotation, m_useRotation, 16);
		MAKE_PADDED_VAR(intptr_t, m_performAction, m_performAction, 20);
	};
};

class CStorySceneActorTemplate {
public:
	union {
	CEntityTemplate m_template;
		MAKE_PADDED_VAR(int32_t*, m_appearances[2], m_appearances, 8);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 20);
	};
};

class CStorySceneBlockingElement {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(intptr_t, m_event, m_event, 136);
	};
};

class CStorySceneComment {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(intptr_t, m_commentText, m_commentText, 136);
	};
};

class CStorySceneDanglesShakeEventInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 32);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 36);
	};
};

class CStorySceneDialogset {
public:
	union {
	CSkeletalAnimationSet cskeletalanimationset;
		MAKE_PADDED_VAR(int32_t, m_requiredSfxTag, m_requiredSfxTag, 144);
		MAKE_PADDED_VAR(intptr_t*, m_animations[2], m_animations, 152);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 168);
		MAKE_PADDED_VAR(intptr_t*, m_compressedPoses[2], m_compressedPoses, 176);
		MAKE_PADDED_VAR(CExtAnimEventsFile*, m_extAnimEvents[2], m_extAnimEvents, 188);
		MAKE_PADDED_VAR(intptr_t, m_Streaming_option, m_Streaming_option, 200);
		MAKE_PADDED_VAR(uint32_t, m_Number_of_non_streamable_bones, m_Number_of_non_streamable_bones, 204);
		MAKE_PADDED_VAR(int32_t, m_dialogsetName, m_dialogsetName, 208);
		MAKE_PADDED_VAR(int32_t, m_dialogsetTransitionEvent, m_dialogsetTransitionEvent, 212);
		MAKE_PADDED_VAR(bool, m_isDynamic, m_isDynamic, 216);
		MAKE_PADDED_VAR(intptr_t*, m_characterTrajectories[2], m_characterTrajectories, 220);
		MAKE_PADDED_VAR(intptr_t*, m_cameraTrajectories[2], m_cameraTrajectories, 232);
		MAKE_PADDED_VAR(Vector*, m_cameraEyePositions[2], m_cameraEyePositions, 244);
		MAKE_PADDED_VAR(SScenePersonalCameraDescription*, m_personalCameras[2], m_personalCameras, 256);
		MAKE_PADDED_VAR(SSceneMasterCameraDescription*, m_masterCameras[2], m_masterCameras, 268);
		MAKE_PADDED_VAR(intptr_t*, m_customCameras[2], m_customCameras, 280);
		MAKE_PADDED_VAR(intptr_t*, m_slots[2], m_slots, 292);
		MAKE_PADDED_VAR(intptr_t*, m_cameras[2], m_cameras, 304);
	};
};

class CStorySceneDialogsetInstance {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(intptr_t*, m_slots[2], m_slots, 92);
		MAKE_PADDED_VAR(intptr_t, m_placementTag, m_placementTag, 104);
		MAKE_PADDED_VAR(float, m_safePlacementRadius, m_safePlacementRadius, 116);
		MAKE_PADDED_VAR(bool, m_snapToTerrain, m_snapToTerrain, 120);
		MAKE_PADDED_VAR(bool, m_findSafePlacement, m_findSafePlacement, 121);
		MAKE_PADDED_VAR(bool, m_areCamerasUsedForBoundsCalculation, m_areCamerasUsedForBoundsCalculation, 122);
		MAKE_PADDED_VAR(char*, m_path, m_path, 124);
	};
};

class CStorySceneDialogsetSlot {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(uint32_t, m_slotNumber, m_slotNumber, 104);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 108);
		MAKE_PADDED_VAR(intptr_t, m_slotPlacement, m_slotPlacement, 112);
		MAKE_PADDED_VAR(int32_t, m_actorName, m_actorName, 120);
		MAKE_PADDED_VAR(bool, m_actorVisibility, m_actorVisibility, 124);
		MAKE_PADDED_VAR(intptr_t*, m_setupAction[2], m_setupAction, 128);
		MAKE_PADDED_VAR(int32_t, m_actorStatus, m_actorStatus, 140);
		MAKE_PADDED_VAR(int32_t, m_actorEmotionalState, m_actorEmotionalState, 144);
		MAKE_PADDED_VAR(int32_t, m_actorPoseName, m_actorPoseName, 148);
		MAKE_PADDED_VAR(int32_t, m_actorMimicsEmotionalState, m_actorMimicsEmotionalState, 152);
		MAKE_PADDED_VAR(int32_t, m_actorMimicsLayer_Eyes, m_actorMimicsLayer_Eyes, 156);
		MAKE_PADDED_VAR(int32_t, m_actorMimicsLayer_Pose, m_actorMimicsLayer_Pose, 160);
		MAKE_PADDED_VAR(int32_t, m_actorMimicsLayer_Animation, m_actorMimicsLayer_Animation, 164);
		MAKE_PADDED_VAR(int32_t, m_forceBodyIdleAnimation, m_forceBodyIdleAnimation, 168);
		MAKE_PADDED_VAR(float, m_forceBodyIdleAnimationWeight, m_forceBodyIdleAnimationWeight, 172);
		MAKE_PADDED_VAR(float, m_actorMimicsLayer_Pose_Weight, m_actorMimicsLayer_Pose_Weight, 176);
		MAKE_PADDED_VAR(intptr_t, m_ID, m_ID, 180);
		MAKE_PADDED_VAR(int32_t, m_actorState, m_actorState, 196);
	};
};

class CStorySceneEffect {
public:
	union {
	IStorySceneItem istorysceneitem;
		MAKE_PADDED_VAR(int32_t, m_id, m_id, 88);
		MAKE_PADDED_VAR(CParticleSystem, m_particleSystem, m_particleSystem, 96);
	};
};

class CStorySceneEvent {
public:
	union {
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
	};
};

class CStorySceneEventApplyAppearance {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(int32_t, m_appearance, m_appearance, 228);
	};
};

class CStorySceneEventAttachPropToSlot {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_propId, m_propId, 224);
		MAKE_PADDED_VAR(int32_t, m_actorName, m_actorName, 228);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 232);
		MAKE_PADDED_VAR(bool, m_activate, m_activate, 236);
		MAKE_PADDED_VAR(bool, m_snapAtStart, m_snapAtStart, 237);
		MAKE_PADDED_VAR(bool, m_showHide, m_showHide, 238);
		MAKE_PADDED_VAR(intptr_t, m_offset, m_offset, 240);
	};
};

class CStorySceneEventCamera {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
	};
};

class CStorySceneEventCameraInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 368);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 428);
	};
};

class CStorySceneEventCameraLight {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t, m_cameralightType, m_cameralightType, 224);
		MAKE_PADDED_VAR(intptr_t, m_lightMod1, m_lightMod1, 240);
		MAKE_PADDED_VAR(intptr_t, m_lightMod2, m_lightMod2, 352);
	};
};

class CStorySceneEventCameraLightInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 56);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 64);
	};
};

class CStorySceneEventChangeActorGameState {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(bool, m_snapToTerrain, m_snapToTerrain, 229);
		MAKE_PADDED_VAR(float, m_snapToTerrainDuration, m_snapToTerrainDuration, 232);
		MAKE_PADDED_VAR(float, m_blendPoseDuration, m_blendPoseDuration, 236);
		MAKE_PADDED_VAR(bool, m_forceResetClothAndDangles, m_forceResetClothAndDangles, 240);
		MAKE_PADDED_VAR(bool, m_switchToGameplayPose, m_switchToGameplayPose, 241);
		MAKE_PADDED_VAR(int32_t, m_gameplayPoseTypeName, m_gameplayPoseTypeName, 244);
		MAKE_PADDED_VAR(int32_t, m_raiseGlobalBehaviorEvent, m_raiseGlobalBehaviorEvent, 248);
		MAKE_PADDED_VAR(int32_t, m_activateBehaviorGraph, m_activateBehaviorGraph, 252);
		MAKE_PADDED_VAR(int32_t, m_startGameplayAction, m_startGameplayAction, 256);
	};
};

class CStorySceneEventClothDisablingInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 32);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 36);
	};
};

class CStorySceneEventCsCamera {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
	};
};

class CStorySceneEventCustomCamera {
public:
	union {
	CStorySceneEventCamera cstorysceneeventcamera;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(Vector, m_cameraTranslation, m_cameraTranslation, 224);
		MAKE_PADDED_VAR(EulerAngles, m_cameraRotation, m_cameraRotation, 240);
		MAKE_PADDED_VAR(float, m_cameraZoom, m_cameraZoom, 252);
		MAKE_PADDED_VAR(float, m_cameraFov, m_cameraFov, 256);
		MAKE_PADDED_VAR(float, m_dofFocusDistFar, m_dofFocusDistFar, 260);
		MAKE_PADDED_VAR(float, m_dofBlurDistFar, m_dofBlurDistFar, 264);
		MAKE_PADDED_VAR(float, m_dofIntensity, m_dofIntensity, 268);
		MAKE_PADDED_VAR(float, m_dofFocusDistNear, m_dofFocusDistNear, 272);
		MAKE_PADDED_VAR(float, m_dofBlurDistNear, m_dofBlurDistNear, 276);
		MAKE_PADDED_VAR(intptr_t, m_cameraDefinition, m_cameraDefinition, 288);
	};
};

class CStorySceneEventCustomCameraInstance {
public:
	union {
	CStorySceneEventCamera cstorysceneeventcamera;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_customCameraName, m_customCameraName, 224);
		MAKE_PADDED_VAR(bool, m_enableCameraNoise, m_enableCameraNoise, 228);
	};
};

class CStorySceneEventDangleDisablingInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 32);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 36);
	};
};

class CStorySceneEventDespawn {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
	};
};

class CStorySceneEventDialogLine {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t, m_line, m_line, 224);
	};
};

class CStorySceneEventDuration {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
	};
};

class CStorySceneEventEquipItem {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(int32_t, m_leftItem, m_leftItem, 228);
		MAKE_PADDED_VAR(int32_t, m_rightItem, m_rightItem, 232);
		MAKE_PADDED_VAR(intptr_t, m_internalMode, m_internalMode, 236);
		MAKE_PADDED_VAR(int32_t, m_ignoreItemsWithTag, m_ignoreItemsWithTag, 240);
		MAKE_PADDED_VAR(bool, m_instant, m_instant, 244);
	};
};

class CStorySceneEventFade {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(bool, m_in, m_in, 248);
		MAKE_PADDED_VAR(Color, m_color, m_color, 249);
	};
};

class CStorySceneEventGameplayCamera {
public:
	union {
	CStorySceneEventCamera cstorysceneeventcamera;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
	};
};

class CStorySceneEventGameplayLookAt {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 256);
		MAKE_PADDED_VAR(int32_t, m_target, m_target, 260);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 264);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 268);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 272);
		MAKE_PADDED_VAR(bool, m_instant, m_instant, 276);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 277);
		MAKE_PADDED_VAR(intptr_t, m_weightCurve, m_weightCurve, 280);
		MAKE_PADDED_VAR(Vector, m_staticPoint, m_staticPoint, 304);
		MAKE_PADDED_VAR(int32_t, m_behaviorVarWeight, m_behaviorVarWeight, 320);
		MAKE_PADDED_VAR(int32_t, m_behaviorVarTarget, m_behaviorVarTarget, 324);
	};
};

class CStorySceneEventGroup {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
	};
};

class CStorySceneEventHideScabbard {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actorId, m_actorId, 224);
		MAKE_PADDED_VAR(bool, m_setVisible, m_setVisible, 228);
	};
};

class CStorySceneEventHitSound {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_soundAttackType, m_soundAttackType, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 228);
		MAKE_PADDED_VAR(int32_t, m_actorAttacker, m_actorAttacker, 232);
		MAKE_PADDED_VAR(int32_t, m_actorAttackerWeaponSlot, m_actorAttackerWeaponSlot, 236);
		MAKE_PADDED_VAR(int32_t, m_actorAttackerWeaponName, m_actorAttackerWeaponName, 240);
	};
};

class CStorySceneEventInfo {
public:
	union {
	intptr_t m_eventGuid;
		MAKE_PADDED_VAR(uint32_t, m_sectionVariantId, m_sectionVariantId, 24);
	};
};

class CStorySceneEventInterpolation {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
	};
};

class CStorySceneEventLightProperties {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_lightId, m_lightId, 224);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 228);
		MAKE_PADDED_VAR(bool, m_additiveChanges, m_additiveChanges, 229);
		MAKE_PADDED_VAR(bool, m_useGlobalCoords, m_useGlobalCoords, 230);
		MAKE_PADDED_VAR(Color, m_color, m_color, 231);
		MAKE_PADDED_VAR(intptr_t, m_lightColorSource, m_lightColorSource, 236);
		MAKE_PADDED_VAR(intptr_t, m_radius, m_radius, 240);
		MAKE_PADDED_VAR(intptr_t, m_brightness, m_brightness, 288);
		MAKE_PADDED_VAR(intptr_t, m_attenuation, m_attenuation, 336);
		MAKE_PADDED_VAR(intptr_t, m_placement, m_placement, 384);
		MAKE_PADDED_VAR(SStorySceneAttachmentInfo, m_attachment, m_attachment, 392);
		MAKE_PADDED_VAR(intptr_t, m_lightTracker, m_lightTracker, 408);
		MAKE_PADDED_VAR(SLightFlickering, m_flickering, m_flickering, 520);
		MAKE_PADDED_VAR(SStorySceneSpotLightProperties, m_spotLightProperties, m_spotLightProperties, 532);
		MAKE_PADDED_VAR(intptr_t, m_dimmerProperties, m_dimmerProperties, 544);
	};
};

class CStorySceneEventLightPropertiesInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventLightPropertiesInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 440);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 512);
	};
};

class CStorySceneEventLodOverride {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(intptr_t, m_actorsByTag, m_actorsByTag, 228);
		MAKE_PADDED_VAR(bool, m_forceHighestLod, m_forceHighestLod, 240);
		MAKE_PADDED_VAR(bool, m_disableAutoHide, m_disableAutoHide, 241);
	};
};

class CStorySceneEventLookAt {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(int32_t, m_target, m_target, 228);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 232);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 236);
		MAKE_PADDED_VAR(bool, m_instant, m_instant, 240);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 244);
		MAKE_PADDED_VAR(intptr_t, m_level, m_level, 248);
		MAKE_PADDED_VAR(float, m_range, m_range, 252);
		MAKE_PADDED_VAR(float, m_gameplayRange, m_gameplayRange, 256);
		MAKE_PADDED_VAR(bool, m_limitDeact, m_limitDeact, 260);
		MAKE_PADDED_VAR(Vector, m_staticPoint, m_staticPoint, 272);
		MAKE_PADDED_VAR(float, m_headRotationRatio, m_headRotationRatio, 288);
		MAKE_PADDED_VAR(float, m_eyesLookAtConvergenceWeight, m_eyesLookAtConvergenceWeight, 292);
		MAKE_PADDED_VAR(bool, m_eyesLookAtIsAdditive, m_eyesLookAtIsAdditive, 296);
		MAKE_PADDED_VAR(float, m_eyesLookAtDampScale, m_eyesLookAtDampScale, 300);
		MAKE_PADDED_VAR(intptr_t, m_resetCloth, m_resetCloth, 304);
	};
};

class CStorySceneEventLookAtDuration {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(bool, m_useTwoTargets, m_useTwoTargets, 252);
		MAKE_PADDED_VAR(int32_t, m_bodyTarget, m_bodyTarget, 256);
		MAKE_PADDED_VAR(bool, m_bodyEnabled, m_bodyEnabled, 260);
		MAKE_PADDED_VAR(bool, m_bodyInstant, m_bodyInstant, 261);
		MAKE_PADDED_VAR(float, m_bodyWeight, m_bodyWeight, 264);
		MAKE_PADDED_VAR(Vector, m_bodyStaticPointWS, m_bodyStaticPointWS, 272);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 288);
		MAKE_PADDED_VAR(intptr_t, m_level, m_level, 292);
		MAKE_PADDED_VAR(float, m_bodyTransitionWeight, m_bodyTransitionWeight, 296);
		MAKE_PADDED_VAR(int32_t, m_eyesTarget, m_eyesTarget, 300);
		MAKE_PADDED_VAR(bool, m_eyesEnabled, m_eyesEnabled, 304);
		MAKE_PADDED_VAR(bool, m_eyesInstant, m_eyesInstant, 305);
		MAKE_PADDED_VAR(float, m_eyesWeight, m_eyesWeight, 308);
		MAKE_PADDED_VAR(Vector, m_eyesStaticPointWS, m_eyesStaticPointWS, 320);
		MAKE_PADDED_VAR(float, m_eyesLookAtConvergenceWeight, m_eyesLookAtConvergenceWeight, 336);
		MAKE_PADDED_VAR(bool, m_eyesLookAtIsAdditive, m_eyesLookAtIsAdditive, 340);
		MAKE_PADDED_VAR(float, m_sceneRange, m_sceneRange, 344);
		MAKE_PADDED_VAR(float, m_gameplayRange, m_gameplayRange, 348);
		MAKE_PADDED_VAR(bool, m_limitDeact, m_limitDeact, 352);
		MAKE_PADDED_VAR(float, m_oldLookAtEyesSpeed, m_oldLookAtEyesSpeed, 356);
		MAKE_PADDED_VAR(float, m_oldLookAtEyesDampScale, m_oldLookAtEyesDampScale, 360);
		MAKE_PADDED_VAR(bool, m_usesNewTransition, m_usesNewTransition, 364);
		MAKE_PADDED_VAR(intptr_t, m_resetCloth, m_resetCloth, 368);
		MAKE_PADDED_VAR(SStorySceneEventLookAtBlinkSettings, m_blinkSettings, m_blinkSettings, 372);
	};
};

class CStorySceneEventMimicLod {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(bool, m_setMimicOn, m_setMimicOn, 228);
	};
};

class CStorySceneEventMimicsFilter {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 256);
		MAKE_PADDED_VAR(int32_t, m_filterName, m_filterName, 260);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 264);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 268);
		MAKE_PADDED_VAR(intptr_t, m_weightCurve, m_weightCurve, 272);
	};
};

class CStorySceneEventMimicsPose {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 256);
		MAKE_PADDED_VAR(int32_t, m_poseName, m_poseName, 260);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 264);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 268);
		MAKE_PADDED_VAR(intptr_t, m_weightCurve, m_weightCurve, 272);
	};
};

class CStorySceneEventModifyEnv {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(CEnvironmentDefinition, m_environmentDefinition, m_environmentDefinition, 224);
		MAKE_PADDED_VAR(bool, m_activate, m_activate, 232);
		MAKE_PADDED_VAR(int32_t, m_priority, m_priority, 236);
		MAKE_PADDED_VAR(float, m_blendFactor, m_blendFactor, 240);
		MAKE_PADDED_VAR(float, m_blendInTime, m_blendInTime, 244);
	};
};

class CStorySceneEventMorphInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventMorphInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 32);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 36);
	};
};

class CStorySceneEventOpenDoor {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_doorTag, m_doorTag, 224);
		MAKE_PADDED_VAR(bool, m_instant, m_instant, 228);
		MAKE_PADDED_VAR(bool, m_openClose, m_openClose, 229);
		MAKE_PADDED_VAR(bool, m_flipDirection, m_flipDirection, 230);
	};
};

class CStorySceneEventOverridePlacement {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actorName, m_actorName, 224);
		MAKE_PADDED_VAR(intptr_t, m_placement, m_placement, 232);
		MAKE_PADDED_VAR(intptr_t, m_resetCloth, m_resetCloth, 240);
	};
};

class CStorySceneEventPlacementInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventPlacementInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 152);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 176);
	};
};

class CStorySceneEventPoseKey {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 260);
		MAKE_PADDED_VAR(intptr_t, m_weightBlendType, m_weightBlendType, 264);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 268);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 272);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 276);
		MAKE_PADDED_VAR(bool, m_linkToDialogset, m_linkToDialogset, 280);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 281);
		MAKE_PADDED_VAR(intptr_t, m_weightCurve, m_weightCurve, 284);
		MAKE_PADDED_VAR(int32_t, m_version, m_version, 308);
		MAKE_PADDED_VAR(int32_t*, m_cachedBones[2], m_cachedBones, 312);
		MAKE_PADDED_VAR(intptr_t*, m_cachedTransforms[133], m_cachedTransforms, 324);
		MAKE_PADDED_VAR(int32_t*, m_cachedTracks[2], m_cachedTracks, 336);
		MAKE_PADDED_VAR(float*, m_cachedTracksValues[2], m_cachedTracksValues, 348);
	};
};

class CStorySceneEventPropPlacementInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventPropPlacementInterpolationKey {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_bezierHandles, m_bezierHandles, 8);
		MAKE_PADDED_VAR(intptr_t, m_interpolationTypes, m_interpolationTypes, 152);
		MAKE_PADDED_VAR(bool, m_volatile, m_volatile, 176);
	};
};

class CStorySceneEventPropVisibility {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_propID, m_propID, 224);
		MAKE_PADDED_VAR(bool, m_showHideFlag, m_showHideFlag, 228);
	};
};

class CStorySceneEventReward {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 224);
		MAKE_PADDED_VAR(int32_t, m_itemName, m_itemName, 228);
		MAKE_PADDED_VAR(int32_t, m_rewardName, m_rewardName, 232);
		MAKE_PADDED_VAR(int32_t, m_quantity, m_quantity, 236);
		MAKE_PADDED_VAR(bool, m_dontInformGui, m_dontInformGui, 240);
	};
};

class CStorySceneEventRotate {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(float, m_angle, m_angle, 228);
		MAKE_PADDED_VAR(bool, m_toCamera, m_toCamera, 232);
		MAKE_PADDED_VAR(bool, m_instant, m_instant, 233);
		MAKE_PADDED_VAR(bool, m_absoluteAngle, m_absoluteAngle, 234);
	};
};

class CStorySceneEventScenePropPlacement {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_propId, m_propId, 224);
		MAKE_PADDED_VAR(intptr_t, m_placement, m_placement, 232);
		MAKE_PADDED_VAR(bool, m_showHide, m_showHide, 240);
		MAKE_PADDED_VAR(uint32_t, m_rotationCyclesPitch, m_rotationCyclesPitch, 244);
		MAKE_PADDED_VAR(uint32_t, m_rotationCyclesRoll, m_rotationCyclesRoll, 248);
		MAKE_PADDED_VAR(uint32_t, m_rotationCyclesYaw, m_rotationCyclesYaw, 252);
	};
};

class CStorySceneEventSetupItemForSync {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actorToSyncTo, m_actorToSyncTo, 224);
		MAKE_PADDED_VAR(int32_t, m_itemName, m_itemName, 228);
		MAKE_PADDED_VAR(bool, m_activate, m_activate, 232);
	};
};

class CStorySceneEventSound {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t, m_soundEventName, m_soundEventName, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 236);
		MAKE_PADDED_VAR(int32_t, m_bone, m_bone, 240);
		MAKE_PADDED_VAR(float, m_dbVolume, m_dbVolume, 244);
	};
};

class CStorySceneEventStartBlendToGameplayCamera {
public:
	union {
	CStorySceneEventCustomCamera cstorysceneeventcustomcamera;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(Vector, m_cameraTranslation, m_cameraTranslation, 224);
		MAKE_PADDED_VAR(EulerAngles, m_cameraRotation, m_cameraRotation, 240);
		MAKE_PADDED_VAR(float, m_cameraZoom, m_cameraZoom, 252);
		MAKE_PADDED_VAR(float, m_cameraFov, m_cameraFov, 256);
		MAKE_PADDED_VAR(float, m_dofFocusDistFar, m_dofFocusDistFar, 260);
		MAKE_PADDED_VAR(float, m_dofBlurDistFar, m_dofBlurDistFar, 264);
		MAKE_PADDED_VAR(float, m_dofIntensity, m_dofIntensity, 268);
		MAKE_PADDED_VAR(float, m_dofFocusDistNear, m_dofFocusDistNear, 272);
		MAKE_PADDED_VAR(float, m_dofBlurDistNear, m_dofBlurDistNear, 276);
		MAKE_PADDED_VAR(intptr_t, m_cameraDefinition, m_cameraDefinition, 288);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 448);
		MAKE_PADDED_VAR(bool, m_changesCamera, m_changesCamera, 452);
		MAKE_PADDED_VAR(float, m_lightsBlendTime, m_lightsBlendTime, 456);
	};
};

class CStorySceneEventSurfaceEffect {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 224);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 240);
		MAKE_PADDED_VAR(float, m_fadeInTime, m_fadeInTime, 244);
		MAKE_PADDED_VAR(float, m_fadeOutTime, m_fadeOutTime, 248);
		MAKE_PADDED_VAR(float, m_durationTime, m_durationTime, 252);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 256);
	};
};

class CStorySceneEventTimelapse {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(bool, m_enable, m_enable, 224);
	};
};

class CStorySceneEventUseHiresShadows {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(bool, m_useHiresShadows, m_useHiresShadows, 228);
	};
};

class CStorySceneEventVideoOverlay {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(char*, m_fileName, m_fileName, 224);
	};
};

class CStorySceneEventVisibility {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(bool, m_showHideFlag, m_showHideFlag, 228);
	};
};

class CStorySceneEventWeatherChange {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_weatherName, m_weatherName, 224);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 228);
	};
};

class CStorySceneEventWorldEntityEffect {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_entityTag, m_entityTag, 224);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 228);
		MAKE_PADDED_VAR(bool, m_startStop, m_startStop, 232);
	};
};

class CStorySceneEventWorldPropPlacement {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_propId, m_propId, 224);
		MAKE_PADDED_VAR(intptr_t, m_placement, m_placement, 232);
		MAKE_PADDED_VAR(bool, m_showHide, m_showHide, 240);
	};
};

class CStorySceneFlowConditionBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_condition, m_condition, 120);
		MAKE_PADDED_VAR(char*, m_description, m_description, 128);
	};
};

class CStorySceneFlowSwitchBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_switch, m_switch, 112);
		MAKE_PADDED_VAR(char*, m_description, m_description, 120);
	};
};

class CStorySceneFlowSwitchCase {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_whenCondition, m_whenCondition, 88);
		MAKE_PADDED_VAR(intptr_t, m_thenLink, m_thenLink, 96);
	};
};

class CStorySceneGraphSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
		MAKE_PADDED_VAR(intptr_t, m_linkElement, m_linkElement, 40);
	};
};

class CStorySceneInputBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_input, m_input, 120);
	};
};

class CStorySceneLight {
public:
	union {
	IStorySceneItem istorysceneitem;
		MAKE_PADDED_VAR(int32_t, m_id, m_id, 88);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 96);
		MAKE_PADDED_VAR(float, m_innerAngle, m_innerAngle, 100);
		MAKE_PADDED_VAR(float, m_outerAngle, m_outerAngle, 104);
		MAKE_PADDED_VAR(float, m_softness, m_softness, 108);
		MAKE_PADDED_VAR(intptr_t, m_shadowCastingMode, m_shadowCastingMode, 112);
		MAKE_PADDED_VAR(float, m_shadowFadeDistance, m_shadowFadeDistance, 116);
		MAKE_PADDED_VAR(float, m_shadowFadeRange, m_shadowFadeRange, 120);
		MAKE_PADDED_VAR(intptr_t, m_dimmerType, m_dimmerType, 124);
		MAKE_PADDED_VAR(bool, m_dimmerAreaMarker, m_dimmerAreaMarker, 128);
	};
};

class CStorySceneLine {
public:
	union {
	CAbstractStorySceneLine cabstractstorysceneline;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(int32_t, m_voicetag, m_voicetag, 136);
		MAKE_PADDED_VAR(intptr_t, m_comment, m_comment, 140);
		MAKE_PADDED_VAR(int32_t, m_speakingTo, m_speakingTo, 144);
		MAKE_PADDED_VAR(intptr_t, m_dialogLine, m_dialogLine, 152);
		MAKE_PADDED_VAR(char*, m_voiceFileName, m_voiceFileName, 156);
		MAKE_PADDED_VAR(bool, m_noBreak, m_noBreak, 168);
		MAKE_PADDED_VAR(intptr_t, m_soundEventName, m_soundEventName, 172);
		MAKE_PADDED_VAR(bool, m_isBackgroundLine, m_isBackgroundLine, 184);
		MAKE_PADDED_VAR(bool, m_disableOcclusion, m_disableOcclusion, 185);
		MAKE_PADDED_VAR(bool, m_alternativeUI, m_alternativeUI, 186);
	};
};

class CStorySceneLinkElement {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
	};
};

class CStorySceneLinkHubBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_hub, m_hub, 112);
	};
};

class CStorySceneMorphEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 228);
		MAKE_PADDED_VAR(int32_t, m_morphComponentId, m_morphComponentId, 232);
	};
};

class CStorySceneOutputBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_output, m_output, 112);
	};
};

class CStorySceneProp {
public:
	union {
	IStorySceneItem istorysceneitem;
		MAKE_PADDED_VAR(int32_t, m_id, m_id, 88);
		MAKE_PADDED_VAR(CEntityTemplate, m_entityTemplate, m_entityTemplate, 96);
		MAKE_PADDED_VAR(int32_t, m_forceBehaviorGraph, m_forceBehaviorGraph, 128);
		MAKE_PADDED_VAR(bool, m_resetBehaviorGraph, m_resetBehaviorGraph, 132);
		MAKE_PADDED_VAR(bool, m_useMimics, m_useMimics, 133);
	};
};

class CStoryScenePropEffectEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_propID, m_propID, 224);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 228);
		MAKE_PADDED_VAR(bool, m_startOrStop, m_startOrStop, 232);
	};
};

class CStorySceneQuestChoiceLine {
public:
	union {
	CStorySceneComment cstoryscenecomment;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(intptr_t, m_commentText, m_commentText, 136);
		MAKE_PADDED_VAR(bool, m_emphasisLine, m_emphasisLine, 144);
		MAKE_PADDED_VAR(bool, m_returnToChoice, m_returnToChoice, 145);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 152);
	};
};

class CStorySceneRandomBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_controlPart, m_controlPart, 112);
	};
};

class CStorySceneResetClothAndDanglesEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(bool, m_forceRelaxedState, m_forceRelaxedState, 228);
	};
};

class CStorySceneScriptingBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_sceneScript, m_sceneScript, 112);
	};
};

class CStorySceneScriptLine {
public:
	union {
	CStorySceneElement cstorysceneelement;
		MAKE_PADDED_VAR(char*, m_elementID, m_elementID, 96);
		MAKE_PADDED_VAR(float, m_approvedDuration, m_approvedDuration, 108);
		MAKE_PADDED_VAR(bool, m_isCopy, m_isCopy, 112);
		MAKE_PADDED_VAR(char*, m_script, m_script, 136);
		MAKE_PADDED_VAR(intptr_t, m_sceneScript, m_sceneScript, 152);
	};
};

class CStorySceneSectionBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_section, m_section, 112);
	};
};

class CStorySceneSystem {
public:
	union {
	IGameSystem igamesystem;
		MAKE_PADDED_VAR(intptr_t*, m_activeScenes[2], m_activeScenes, 136);
		MAKE_PADDED_VAR(intptr_t, m_actorMap, m_actorMap, 240);
	};
};

class CStorySceneVideoBlock {
public:
	union {
	CStorySceneGraphBlock cstoryscenegraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_sceneVideo, m_sceneVideo, 112);
	};
};

class CSwfTexture {
public:
	union {
	CBitmapTexture cbitmaptexture;
		MAKE_PADDED_VAR(uint32_t, m_width, m_width, 104);
		MAKE_PADDED_VAR(uint32_t, m_height, m_height, 108);
		MAKE_PADDED_VAR(intptr_t, m_format, m_format, 112);
		MAKE_PADDED_VAR(intptr_t, m_compression, m_compression, 116);
		MAKE_PADDED_VAR(int32_t, m_textureGroup, m_textureGroup, 120);
		MAKE_PADDED_VAR(CSourceTexture, m_sourceData, m_sourceData, 128);
		MAKE_PADDED_VAR(int32_t, m_pcDownscaleBias, m_pcDownscaleBias, 184);
		MAKE_PADDED_VAR(int32_t, m_xboneDownscaleBias, m_xboneDownscaleBias, 188);
		MAKE_PADDED_VAR(int32_t, m_ps4DownscaleBias, m_ps4DownscaleBias, 192);
		MAKE_PADDED_VAR(uint32_t, m_textureCacheKey, m_textureCacheKey, 200);
		MAKE_PADDED_VAR(char, m_residentMipIndex, m_residentMipIndex, 224);
		MAKE_PADDED_VAR(char*, m_linkageName, m_linkageName, 232);
	};
};

class CTeleportDetectorData {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_pelvisTeleportData, m_pelvisTeleportData, 88);
		MAKE_PADDED_VAR(intptr_t*, m_teleportedBones[2], m_teleportedBones, 96);
		MAKE_PADDED_VAR(float, m_angleDif, m_angleDif, 108);
		MAKE_PADDED_VAR(float, m_pelvisPositionThreshold, m_pelvisPositionThreshold, 112);
	};
};

class CTerrainTile {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(uint32_t, m_tileFileVersion, m_tileFileVersion, 112);
		MAKE_PADDED_VAR(intptr_t, m_collisionType, m_collisionType, 188);
		MAKE_PADDED_VAR(uint16_t, m_minHeightValue, m_minHeightValue, 192);
		MAKE_PADDED_VAR(uint16_t, m_maxHeightValue, m_maxHeightValue, 194);
	};
};

class CTextureArrayEntry {
public:
	union {
	CBitmapTexture m_m_texture;
	};
};

class CTrailerCameraPositionController {
public:
	union {
	ICustomCameraPositionController icustomcamerapositioncontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(bool, m_enableAutoCollisionAvoidance, m_enableAutoCollisionAvoidance, 96);
		MAKE_PADDED_VAR(bool, m_enableScreenSpaceCorrections, m_enableScreenSpaceCorrections, 97);
		MAKE_PADDED_VAR(float, m_defaultPitch, m_defaultPitch, 148);
		MAKE_PADDED_VAR(float, m_defaultZOffset, m_defaultZOffset, 152);
		MAKE_PADDED_VAR(float, m_offsetSmoothTime, m_offsetSmoothTime, 156);
		MAKE_PADDED_VAR(intptr_t, m_collisionController, m_collisionController, 224);
		MAKE_PADDED_VAR(Vector, m_defaultCollisionOriginOffset, m_defaultCollisionOriginOffset, 240);
	};
};

class CubeFace {
public:
	union {
	CBitmapTexture m_m_texture;
		MAKE_PADDED_VAR(CSourceTexture, m_sourceTexture, m_sourceTexture, 8);
		MAKE_PADDED_VAR(bool, m_m_rotate, m_m_rotate, 16);
		MAKE_PADDED_VAR(bool, m_m_flipX, m_m_flipX, 17);
		MAKE_PADDED_VAR(bool, m_m_flipY, m_m_flipY, 18);
	};
};

class CUmbraTile {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_data, m_data, 144);
		MAKE_PADDED_VAR(intptr_t, m_dataStatus, m_dataStatus, 352);
	};
};

class CVariableValueStateTransitionCondition {
public:
	union {
	IBehaviorStateTransitionCondition ibehaviorstatetransitioncondition;
		MAKE_PADDED_VAR(intptr_t, m_cachedVariableNode, m_cachedVariableNode, 88);
		MAKE_PADDED_VAR(int32_t, m_socketName, m_socketName, 96);
		MAKE_PADDED_VAR(float, m_compareValue, m_compareValue, 100);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 104);
		MAKE_PADDED_VAR(bool, m_useAbsoluteValue, m_useAbsoluteValue, 108);
	};
};

class CVirtualSkeletalAnimation {
public:
	union {
	CSkeletalAnimation cskeletalanimation;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t, m_animBuffer, m_animBuffer, 32);
		MAKE_PADDED_VAR(float, m_framesPerSecond, m_framesPerSecond, 40);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 44);
		MAKE_PADDED_VAR(intptr_t, m_motionExtraction, m_motionExtraction, 48);
		MAKE_PADDED_VAR(int32_t, m_compressedPose, m_compressedPose, 56);
		MAKE_PADDED_VAR(bool, m_hasBundingBox, m_hasBundingBox, 60);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 64);
		MAKE_PADDED_VAR(intptr_t, m_streamingType, m_streamingType, 112);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 116);
		MAKE_PADDED_VAR(intptr_t*, m_virtualAnimations[2], m_virtualAnimations, 152);
		MAKE_PADDED_VAR(intptr_t*, m_virtualAnimationsOverride[2], m_virtualAnimationsOverride, 164);
		MAKE_PADDED_VAR(intptr_t*, m_virtualAnimationsAdditive[2], m_virtualAnimationsAdditive, 176);
		MAKE_PADDED_VAR(VirtualAnimationMotion*, m_virtualMotions[2], m_virtualMotions, 188);
		MAKE_PADDED_VAR(VirtualAnimationPoseFK*, m_virtualFKs[2], m_virtualFKs, 200);
		MAKE_PADDED_VAR(VirtualAnimationPoseIK*, m_virtualIKs[2], m_virtualIKs, 212);
	};
};

class CVitalSpot {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(Vector, m_normal, m_normal, 96);
		MAKE_PADDED_VAR(Vector, m_cutDirection, m_cutDirection, 112);
		MAKE_PADDED_VAR(int32_t, m_editorLabel, m_editorLabel, 128);
		MAKE_PADDED_VAR(int32_t, m_entitySlotName, m_entitySlotName, 132);
		MAKE_PADDED_VAR(int32_t, m_visualEffect, m_visualEffect, 136);
		MAKE_PADDED_VAR(int32_t, m_hitReactionAnimation, m_hitReactionAnimation, 140);
		MAKE_PADDED_VAR(bool, m_destroyAfterExecution, m_destroyAfterExecution, 152);
		MAKE_PADDED_VAR(float, m_focusPointsCost, m_focusPointsCost, 156);
		MAKE_PADDED_VAR(CJournalPath, m_vitalSpotEntry, m_vitalSpotEntry, 160);
		MAKE_PADDED_VAR(char*, m_soundOnFocus, m_soundOnFocus, 168);
		MAKE_PADDED_VAR(char*, m_soundOffFocus, m_soundOffFocus, 180);
		MAKE_PADDED_VAR(IGameplayEffectExecutor*, m_gameplayEffects[2], m_gameplayEffects, 192);
		MAKE_PADDED_VAR(SVitalSpotEnableConditions, m_enableConditions, m_enableConditions, 204);
	};
};

class CVitalSpotsParam {
public:
	union {
	CGameplayEntityParam cgameplayentityparam;
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 88);
		MAKE_PADDED_VAR(bool, m_overrideInherited, m_overrideInherited, 96);
		MAKE_PADDED_VAR(char*, m_name, m_name, 100);
		MAKE_PADDED_VAR(CJournalPath, m_journalCreaturVitalSpotsPath, m_journalCreaturVitalSpotsPath, 112);
		MAKE_PADDED_VAR(intptr_t*, m_vitalSpots[2], m_vitalSpots, 120);
	};
};

class CWanderActionPointSelector {
public:
	union {
	CActionPointSelector cactionpointselector;
		MAKE_PADDED_VAR(SEncounterActionPointSelectorPair*, m_categories[2], m_categories, 48);
		MAKE_PADDED_VAR(intptr_t, m_areaTags, m_areaTags, 60);
		MAKE_PADDED_VAR(float, m_delay, m_delay, 72);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 76);
		MAKE_PADDED_VAR(intptr_t, m_apTags, m_apTags, 80);
		MAKE_PADDED_VAR(int32_t, m_apAreaTag, m_apAreaTag, 92);
		MAKE_PADDED_VAR(bool, m_chooseClosestAP, m_chooseClosestAP, 96);
	};
};

class CWorld {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_environmentParameters, m_environmentParameters, 576);
		MAKE_PADDED_VAR(intptr_t, m_pathLib, m_pathLib, 2328);
		MAKE_PADDED_VAR(CUmbraScene, m_umbraScene, m_umbraScene, 2336);
		MAKE_PADDED_VAR(Vector, m_startupCameraPosition, m_startupCameraPosition, 2400);
		MAKE_PADDED_VAR(EulerAngles, m_startupCameraRotation, m_startupCameraRotation, 2416);
		MAKE_PADDED_VAR(float, m_worldDimensions, m_worldDimensions, 2428);
		MAKE_PADDED_VAR(intptr_t, m_terrainClipMap, m_terrainClipMap, 2456);
		MAKE_PADDED_VAR(intptr_t, m_globalWater, m_globalWater, 2464);
		MAKE_PADDED_VAR(CWorldShadowConfig, m_shadowConfig, m_shadowConfig, 2480);
		MAKE_PADDED_VAR(intptr_t, m_foliageScene, m_foliageScene, 2632);
		MAKE_PADDED_VAR(int32_t*, m_soundBanksDependency[2], m_soundBanksDependency, 2672);
		MAKE_PADDED_VAR(intptr_t*, m_soundEventsOnAttach[2], m_soundEventsOnAttach, 2684);
		MAKE_PADDED_VAR(intptr_t*, m_soundEventsOnDetach[2], m_soundEventsOnDetach, 2696);
		MAKE_PADDED_VAR(bool, m_newLayerGroupFormat, m_newLayerGroupFormat, 2708);
		MAKE_PADDED_VAR(C2dArray, m_initialyHidenLayerGroups, m_initialyHidenLayerGroups, 2712);
		MAKE_PADDED_VAR(bool, m_hasEmbeddedLayerInfos, m_hasEmbeddedLayerInfos, 2720);
		MAKE_PADDED_VAR(int32_t*, m_playGoChunks[2], m_playGoChunks, 2752);
		MAKE_PADDED_VAR(char*, m_minimapsPath, m_minimapsPath, 2764);
		MAKE_PADDED_VAR(char*, m_hubmapsPath, m_hubmapsPath, 2776);
		MAKE_PADDED_VAR(intptr_t, m_mergedGeometry, m_mergedGeometry, 2800);
	};
};

class CWorldMap {
public:
	union {
	CResource cresource;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 104);
		MAKE_PADDED_VAR(SWorldMapImageInfo, m_imageInfo, m_imageInfo, 120);
		MAKE_PADDED_VAR(intptr_t, m_displayTitle, m_displayTitle, 156);
		MAKE_PADDED_VAR(intptr_t*, m_staticMapPins[2], m_staticMapPins, 160);
	};
};

class EntitySlot {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(int32_t, m_componentName, m_componentName, 4);
		MAKE_PADDED_VAR(int32_t, m_boneName, m_boneName, 8);
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 16);
		MAKE_PADDED_VAR(bool, m_freePositionAxisX, m_freePositionAxisX, 24);
		MAKE_PADDED_VAR(bool, m_freePositionAxisY, m_freePositionAxisY, 25);
		MAKE_PADDED_VAR(bool, m_freePositionAxisZ, m_freePositionAxisZ, 26);
		MAKE_PADDED_VAR(bool, m_freeRotation, m_freeRotation, 27);
		MAKE_PADDED_VAR(bool, m_wasIncluded, m_wasIncluded, 28);
	};
};

class IAIExplorationTree {
public:
	union {
	IAITree iaitree;
		MAKE_PADDED_VAR(char*, m_aiTreeName, m_aiTreeName, 80);
		MAKE_PADDED_VAR(CBehTree, m_tree, m_tree, 96);
		MAKE_PADDED_VAR(Vector3, m_interactionPoint, m_interactionPoint, 104);
		MAKE_PADDED_VAR(Vector3, m_destinationPoint, m_destinationPoint, 116);
		MAKE_PADDED_VAR(intptr_t, m_metalinkComponent, m_metalinkComponent, 128);
	};
};

class IAttachment {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
	};
};

class IBehTreeAtomicBinaryCondition {
public:
	union {
	IBehTreeAtomicCondition ibehtreeatomiccondition;
		MAKE_PADDED_VAR(intptr_t, m_condition1, m_condition1, 88);
		MAKE_PADDED_VAR(intptr_t, m_condition2, m_condition2, 96);
	};
};

class IBehTreeMetanodeOnSpawnDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 104);
		MAKE_PADDED_VAR(bool, m_runWhenReattachedFromPool, m_runWhenReattachedFromPool, 112);
	};
};

class IBehTreeNodeConditionalBaseNodeDefinition {
public:
	union {
	IBehTreeMetanodeDefinition ibehtreemetanodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(uint32_t, m_childNodeToDisableCount, m_childNodeToDisableCount, 112);
		MAKE_PADDED_VAR(bool, m_invertCondition, m_invertCondition, 116);
	};
};

class IBehTreeNodeDecoratorDefinition {
public:
	union {
	IBehTreeNodeDefinition ibehtreenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeNodeDecoratorSteeringTargeterDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeNodeExplorationQueueDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeNodeFlightDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeNodeHLOffenceBaseDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeNodeSetupCustomMoveDataDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_setTargetForEvaluation, m_setTargetForEvaluation, 112);
	};
};

class IBehTreeNodeSpeechDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeTicketAlgorithmDecoratorDefinition {
public:
	union {
	IBehTreeTicketAlgorithmDefinition ibehtreeticketalgorithmdefinition;
		MAKE_PADDED_VAR(intptr_t, m_baseAlgorithm, m_baseAlgorithm, 88);
	};
};

class ICustomCameraPivotRotationController {
public:
	union {
	ICustomCameraBaseController icustomcamerabasecontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minPitch, m_minPitch, 100);
		MAKE_PADDED_VAR(float, m_maxPitch, m_maxPitch, 104);
		MAKE_PADDED_VAR(intptr_t, m_sensitivityPreset, m_sensitivityPreset, 108);
	};
};

class ICustomCameraScriptedPivotRotationController {
public:
	union {
	ICustomCameraPivotRotationController icustomcamerapivotrotationcontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minPitch, m_minPitch, 100);
		MAKE_PADDED_VAR(float, m_maxPitch, m_maxPitch, 104);
		MAKE_PADDED_VAR(intptr_t, m_sensitivityPreset, m_sensitivityPreset, 108);
	};
};

class IEntityTargetingAction {
public:
	union {
	IPerformableAction iperformableaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
	};
};

class IEvaluatorVector {
public:
	union {
	IEvaluator ievaluator;
		MAKE_PADDED_VAR(intptr_t, m_freeAxes, m_freeAxes, 88);
		MAKE_PADDED_VAR(bool, m_spill, m_spill, 92);
	};
};

class IFXPhysicalForce {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(intptr_t, m_fieldType, m_fieldType, 100);
		MAKE_PADDED_VAR(bool, m_simulateLocalyInEntity, m_simulateLocalyInEntity, 108);
	};
};

class IPresetActorLatentAction {
public:
	union {
	IActorLatentAction iactorlatentaction;
		MAKE_PADDED_VAR(CBehTree, m_res, m_res, 72);
		MAKE_PADDED_VAR(intptr_t, m_def, m_def, 80);
		MAKE_PADDED_VAR(char*, m_resName, m_resName, 88);
	};
};

class IQuestCombatManagerBaseBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_npcTags, m_npcTags, 288);
		MAKE_PADDED_VAR(bool, m_overrideGuardArea, m_overrideGuardArea, 300);
		MAKE_PADDED_VAR(int32_t, m_guardAreaTag, m_guardAreaTag, 304);
		MAKE_PADDED_VAR(int32_t, m_pursuitAreaTag, m_pursuitAreaTag, 308);
		MAKE_PADDED_VAR(float, m_pursuitRange, m_pursuitRange, 312);
	};
};

class ISpawnTreeDecorator {
public:
	union {
	ISpawnTreeBranch ispawntreebranch;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 144);
	};
};

class ISpawnTreeScriptedDecorator {
public:
	union {
	ISpawnTreeDecorator ispawntreedecorator;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 144);
	};
};

class PersistentRef {
public:
	union {
	intptr_t m_entityHandle;
		MAKE_PADDED_VAR(Vector, m_position, m_position, 16);
		MAKE_PADDED_VAR(EulerAngles, m_rotation, m_rotation, 32);
	};
};

class QuestScriptParam {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 8);
		MAKE_PADDED_VAR(bool, m_softHandle, m_softHandle, 40);
	};
};

class SAbility {
public:
	union {
		MAKE_PADDED_VAR(intptr_t*, m_attributes[2], m_attributes, 4);
		MAKE_PADDED_VAR(int32_t*, m_prerequisites[2], m_prerequisites, 16);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 28);
		MAKE_PADDED_VAR(int32_t*, m_abilities[2], m_abilities, 48);
		MAKE_PADDED_VAR(int32_t, m_type, m_type, 72);
	};
};

class SAbilityAttribute {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 4);
		MAKE_PADDED_VAR(bool, m_alwaysRandom, m_alwaysRandom, 8);
		MAKE_PADDED_VAR(float, m_min, m_min, 12);
		MAKE_PADDED_VAR(float, m_max, m_max, 16);
		MAKE_PADDED_VAR(int8_t, m_precision, m_precision, 20);
		MAKE_PADDED_VAR(bool, m_displayPerc, m_displayPerc, 21);
	};
};

class SActionPointId {
public:
	union {
	intptr_t m_component;
		MAKE_PADDED_VAR(intptr_t, m_entity, m_entity, 16);
	};
};

class SActorLODConfig {
public:
	union {
		MAKE_PADDED_VAR(float, m_distance, m_distance, 4);
		MAKE_PADDED_VAR(float, m_deadZone, m_deadZone, 8);
		MAKE_PADDED_VAR(bool, m_hide, m_hide, 12);
		MAKE_PADDED_VAR(bool, m_enableIK, m_enableIK, 13);
		MAKE_PADDED_VAR(bool, m_enableDandles, m_enableDandles, 14);
		MAKE_PADDED_VAR(uint32_t, m_mimicsQuality, m_mimicsQuality, 16);
		MAKE_PADDED_VAR(intptr_t, m_behaviorLOD, m_behaviorLOD, 20);
		MAKE_PADDED_VAR(uint32_t, m_animatedComponentUpdateFrameSkip, m_animatedComponentUpdateFrameSkip, 24);
		MAKE_PADDED_VAR(bool, m_suppressAnimatedComponent, m_suppressAnimatedComponent, 28);
		MAKE_PADDED_VAR(bool, m_budgetAnimatedComponentTick, m_budgetAnimatedComponentTick, 29);
		MAKE_PADDED_VAR(bool, m_suppressAnimatedComponentIfNotVisible, m_suppressAnimatedComponentIfNotVisible, 30);
		MAKE_PADDED_VAR(bool, m_budgetAnimatedComponentTickIfNotVisible, m_budgetAnimatedComponentTickIfNotVisible, 31);
	};
};

class SAIAttitudeDummy {
public:
	union {
	intptr_t m_atttitude;
	};
};

class SAIMinigameParams {
public:
	union {
	intptr_t m_wristWrestling;
	};
};

class SAIReactionFactTest {
public:
	union {
	bool m_enabled;
		MAKE_PADDED_VAR(char*, m_factId, m_factId, 4);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 16);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 20);
		MAKE_PADDED_VAR(intptr_t, m_queryFact, m_queryFact, 24);
	};
};

class SAnimationBufferBitwiseCompressionSettings {
public:
	union {
	float m_translationTolerance;
		MAKE_PADDED_VAR(float, m_translationSkipFrameTolerance, m_translationSkipFrameTolerance, 4);
		MAKE_PADDED_VAR(float, m_orientationTolerance, m_orientationTolerance, 8);
		MAKE_PADDED_VAR(intptr_t, m_orientationCompressionMethod, m_orientationCompressionMethod, 12);
		MAKE_PADDED_VAR(float, m_orientationSkipFrameTolerance, m_orientationSkipFrameTolerance, 16);
		MAKE_PADDED_VAR(float, m_scaleTolerance, m_scaleTolerance, 20);
		MAKE_PADDED_VAR(float, m_scaleSkipFrameTolerance, m_scaleSkipFrameTolerance, 24);
		MAKE_PADDED_VAR(float, m_trackTolerance, m_trackTolerance, 28);
		MAKE_PADDED_VAR(float, m_trackSkipFrameTolerance, m_trackSkipFrameTolerance, 32);
	};
};

class SAnimationMappedPose {
public:
	union {
	intptr_t* m_bones[133];
		MAKE_PADDED_VAR(float*, m_tracks[2], m_tracks, 12);
		MAKE_PADDED_VAR(int32_t*, m_bonesMapping[2], m_bonesMapping, 24);
		MAKE_PADDED_VAR(int32_t*, m_tracksMapping[2], m_tracksMapping, 36);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 48);
		MAKE_PADDED_VAR(intptr_t, m_mode, m_mode, 52);
		MAKE_PADDED_VAR(intptr_t, m_correctionID, m_correctionID, 56);
		MAKE_PADDED_VAR(int32_t, m_correctionIdleID, m_correctionIdleID, 72);
	};
};

class SAnimationSequenceDefinition {
public:
	union {
	intptr_t m_entity;
		MAKE_PADDED_VAR(int32_t, m_manualSlotName, m_manualSlotName, 8);
		MAKE_PADDED_VAR(intptr_t*, m_parts[2], m_parts, 12);
		MAKE_PADDED_VAR(bool, m_freezeAtEnd, m_freezeAtEnd, 24);
		MAKE_PADDED_VAR(int32_t, m_startForceEvent, m_startForceEvent, 28);
		MAKE_PADDED_VAR(int32_t, m_raiseEventOnEnd, m_raiseEventOnEnd, 32);
		MAKE_PADDED_VAR(int32_t, m_raiseForceEventOnEnd, m_raiseForceEventOnEnd, 36);
	};
};

class SAnimationSequencePartDefinition {
public:
	union {
	int32_t m_animation;
		MAKE_PADDED_VAR(intptr_t, m_syncType, m_syncType, 4);
		MAKE_PADDED_VAR(int32_t, m_syncEventName, m_syncEventName, 8);
		MAKE_PADDED_VAR(bool, m_shouldSlide, m_shouldSlide, 12);
		MAKE_PADDED_VAR(bool, m_shouldRotate, m_shouldRotate, 13);
		MAKE_PADDED_VAR(int32_t, m_useRefBone, m_useRefBone, 16);
		MAKE_PADDED_VAR(intptr_t, m_rotationTypeUsingRefBone, m_rotationTypeUsingRefBone, 20);
		MAKE_PADDED_VAR(Vector, m_finalPosition, m_finalPosition, 32);
		MAKE_PADDED_VAR(float, m_finalHeading, m_finalHeading, 48);
		MAKE_PADDED_VAR(float, m_blendTransitionTime, m_blendTransitionTime, 52);
		MAKE_PADDED_VAR(float, m_blendInTime, m_blendInTime, 56);
		MAKE_PADDED_VAR(float, m_blendOutTime, m_blendOutTime, 60);
		MAKE_PADDED_VAR(float, m_allowBreakAtStart, m_allowBreakAtStart, 64);
		MAKE_PADDED_VAR(int32_t, m_allowBreakAtStartBeforeEventsEnd, m_allowBreakAtStartBeforeEventsEnd, 68);
		MAKE_PADDED_VAR(float, m_allowBreakBeforeEnd, m_allowBreakBeforeEnd, 72);
		MAKE_PADDED_VAR(int32_t, m_allowBreakBeforeAtAfterEventsStart, m_allowBreakBeforeAtAfterEventsStart, 76);
		MAKE_PADDED_VAR(int32_t, m_sequenceIndex, m_sequenceIndex, 80);
		MAKE_PADDED_VAR(bool, m_disableProxyCollisions, m_disableProxyCollisions, 84);
	};
};

class SAnimationTrajectoryPlayerInput {
public:
	union {
	Matrix m_localToWorld;
		MAKE_PADDED_VAR(Vector, m_pointWS, m_pointWS, 64);
		MAKE_PADDED_VAR(Vector, m_directionWS, m_directionWS, 80);
		MAKE_PADDED_VAR(int32_t, m_tagId, m_tagId, 96);
		MAKE_PADDED_VAR(intptr_t, m_selectorType, m_selectorType, 100);
		MAKE_PADDED_VAR(intptr_t, m_proxySyncType, m_proxySyncType, 104);
		MAKE_PADDED_VAR(CActionMoveAnimationProxy, m_proxy, m_proxy, 112);
	};
};

class SAreaEnvironmentPoint {
public:
	union {
	Vector m_position;
		MAKE_PADDED_VAR(EulerAngles, m_direction, m_direction, 16);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 28);
		MAKE_PADDED_VAR(intptr_t, m_blend, m_blend, 32);
		MAKE_PADDED_VAR(float, m_innerRadius, m_innerRadius, 36);
		MAKE_PADDED_VAR(float, m_outerRadius, m_outerRadius, 40);
		MAKE_PADDED_VAR(float, m_scaleX, m_scaleX, 44);
		MAKE_PADDED_VAR(float, m_scaleY, m_scaleY, 48);
		MAKE_PADDED_VAR(float, m_scaleZ, m_scaleZ, 52);
		MAKE_PADDED_VAR(bool, m_useCurve, m_useCurve, 56);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 64);
		MAKE_PADDED_VAR(float, m_blendScale, m_blendScale, 112);
		MAKE_PADDED_VAR(CEnvironmentDefinition, m_environmentDefinition, m_environmentDefinition, 120);
	};
};

class SBaseStat {
public:
	union {
	float m_current;
		MAKE_PADDED_VAR(float, m_max, m_max, 4);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 8);
	};
};

class SBehaviorComboAttack {
public:
	union {
	float m_attackHitTime;
		MAKE_PADDED_VAR(float, m_parryHitTime, m_parryHitTime, 4);
		MAKE_PADDED_VAR(float, m_attackHitLevel, m_attackHitLevel, 8);
		MAKE_PADDED_VAR(float, m_parryHitLevel, m_parryHitLevel, 12);
		MAKE_PADDED_VAR(float, m_attackHitTime1, m_attackHitTime1, 16);
		MAKE_PADDED_VAR(float, m_attackHitTime2, m_attackHitTime2, 20);
		MAKE_PADDED_VAR(float, m_attackHitTime3, m_attackHitTime3, 24);
		MAKE_PADDED_VAR(float, m_parryHitTime1, m_parryHitTime1, 28);
		MAKE_PADDED_VAR(float, m_parryHitTime2, m_parryHitTime2, 32);
		MAKE_PADDED_VAR(float, m_parryHitTime3, m_parryHitTime3, 36);
		MAKE_PADDED_VAR(float, m_attackHitLevel1, m_attackHitLevel1, 40);
		MAKE_PADDED_VAR(float, m_attackHitLevel2, m_attackHitLevel2, 44);
		MAKE_PADDED_VAR(float, m_attackHitLevel3, m_attackHitLevel3, 48);
		MAKE_PADDED_VAR(float, m_parryHitLevel1, m_parryHitLevel1, 52);
		MAKE_PADDED_VAR(float, m_parryHitLevel2, m_parryHitLevel2, 56);
		MAKE_PADDED_VAR(float, m_parryHitLevel3, m_parryHitLevel3, 60);
		MAKE_PADDED_VAR(int32_t, m_level, m_level, 64);
		MAKE_PADDED_VAR(int32_t, m_type, m_type, 68);
		MAKE_PADDED_VAR(intptr_t, m_direction, m_direction, 72);
		MAKE_PADDED_VAR(intptr_t, m_distance, m_distance, 76);
		MAKE_PADDED_VAR(float, m_attackTime, m_attackTime, 80);
		MAKE_PADDED_VAR(float, m_parryTime, m_parryTime, 84);
		MAKE_PADDED_VAR(int32_t, m_attackAnimation, m_attackAnimation, 88);
		MAKE_PADDED_VAR(int32_t, m_parryAnimation, m_parryAnimation, 92);
	};
};

class SBehaviorGraphInstanceSlot {
public:
	union {
	int32_t m_instanceName;
		MAKE_PADDED_VAR(CBehaviorGraph, m_graph, m_graph, 8);
		MAKE_PADDED_VAR(bool, m_alwaysOnTopOfStack, m_alwaysOnTopOfStack, 16);
	};
};

class SBehaviorGroup {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(CBehaviorGraph, m_behavior, m_behavior, 88);
		MAKE_PADDED_VAR(intptr_t, m_affectedNPCs, m_affectedNPCs, 120);
		MAKE_PADDED_VAR(uint32_t, m_expectedCount, m_expectedCount, 132);
	};
};

class SBehaviorScriptContext {
public:
	union {
	intptr_t* m_poseLS[133];
		MAKE_PADDED_VAR(intptr_t*, m_poseMS[133], m_poseMS, 12);
		MAKE_PADDED_VAR(float*, m_floatTracks[2], m_floatTracks, 24);
		MAKE_PADDED_VAR(float*, m_inputParamsF[2], m_inputParamsF, 36);
		MAKE_PADDED_VAR(Vector*, m_inputParamsV[2], m_inputParamsV, 48);
		MAKE_PADDED_VAR(float*, m_localParamsF[2], m_localParamsF, 60);
		MAKE_PADDED_VAR(Vector*, m_localParamsV[2], m_localParamsV, 72);
		MAKE_PADDED_VAR(Matrix*, m_localParamsM[2], m_localParamsM, 84);
		MAKE_PADDED_VAR(intptr_t*, m_localParamsT[133], m_localParamsT, 96);
		MAKE_PADDED_VAR(float, m_timeDelta, m_timeDelta, 108);
		MAKE_PADDED_VAR(intptr_t, m_visualDebug, m_visualDebug, 112);
	};
};

class SBehTreeAreaSelection {
public:
	union {
	CBehTreeValAreaSelectionMode m_selectionMode;
		MAKE_PADDED_VAR(CBehTreeValCName, m_optionalAreaTag, m_optionalAreaTag, 8);
	};
};

class SBgNpcJobTree {
public:
	union {
	int32_t m_category;
		MAKE_PADDED_VAR(CJobTree, m_jobTree, m_jobTree, 8);
		MAKE_PADDED_VAR(GameTime, m_fireTime, m_fireTime, 40);
	};
};

class SBlockDesc {
public:
	union {
	intptr_t m_ock;
		MAKE_PADDED_VAR(int32_t, m_putName, m_putName, 8);
	};
};

class SBokehDofParams {
public:
	union {
	float m_planeInFocus;
		MAKE_PADDED_VAR(intptr_t, m_fStops, m_fStops, 4);
		MAKE_PADDED_VAR(float, m_bokehSizeMuliplier, m_bokehSizeMuliplier, 8);
		MAKE_PADDED_VAR(float, m_hexToCircleScale, m_hexToCircleScale, 12);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 16);
		MAKE_PADDED_VAR(bool, m_usePhysicalSetup, m_usePhysicalSetup, 17);
	};
};

class SBoneTransform {
public:
	union {
	int32_t m_bone;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 8);
	};
};

class SBTNodeResult {
public:
	union {
	intptr_t m_status;
	};
};

class SCameraMovementData {
public:
	union {
	intptr_t m_camera;
		MAKE_PADDED_VAR(ICustomCameraPivotPositionController, m_pivotPositionController, m_pivotPositionController, 8);
		MAKE_PADDED_VAR(ICustomCameraPivotRotationController, m_pivotRotationController, m_pivotRotationController, 16);
		MAKE_PADDED_VAR(ICustomCameraPivotDistanceController, m_pivotDistanceController, m_pivotDistanceController, 24);
		MAKE_PADDED_VAR(Vector, m_pivotPositionValue, m_pivotPositionValue, 32);
		MAKE_PADDED_VAR(Vector, m_pivotPositionVelocity, m_pivotPositionVelocity, 48);
		MAKE_PADDED_VAR(EulerAngles, m_pivotRotationValue, m_pivotRotationValue, 64);
		MAKE_PADDED_VAR(EulerAngles, m_pivotRotationVelocity, m_pivotRotationVelocity, 76);
		MAKE_PADDED_VAR(float, m_pivotDistanceValue, m_pivotDistanceValue, 88);
		MAKE_PADDED_VAR(float, m_pivotDistanceVelocity, m_pivotDistanceVelocity, 92);
		MAKE_PADDED_VAR(Vector, m_cameraLocalSpaceOffset, m_cameraLocalSpaceOffset, 96);
		MAKE_PADDED_VAR(Vector, m_cameraLocalSpaceOffsetVel, m_cameraLocalSpaceOffsetVel, 112);
		MAKE_PADDED_VAR(Vector, m_cameraOffset, m_cameraOffset, 128);
	};
};

class SCardDefinition {
public:
	union {
	int32_t m_index;
		MAKE_PADDED_VAR(char*, m_title, m_title, 4);
		MAKE_PADDED_VAR(char*, m_description, m_description, 16);
		MAKE_PADDED_VAR(int32_t, m_power, m_power, 28);
		MAKE_PADDED_VAR(char*, m_picture, m_picture, 32);
		MAKE_PADDED_VAR(intptr_t, m_faction, m_faction, 44);
		MAKE_PADDED_VAR(int32_t, m_typeFlags, m_typeFlags, 48);
		MAKE_PADDED_VAR(intptr_t*, m_effectFlags[2], m_effectFlags, 52);
		MAKE_PADDED_VAR(int32_t*, m_summonFlags[2], m_summonFlags, 64);
		MAKE_PADDED_VAR(int32_t, m_dlcPictureFlag, m_dlcPictureFlag, 76);
		MAKE_PADDED_VAR(char*, m_dlcPicture, m_dlcPicture, 80);
	};
};

class SCollisionData {
public:
	union {
	intptr_t m_entity;
		MAKE_PADDED_VAR(Vector, m_point, m_point, 16);
		MAKE_PADDED_VAR(Vector, m_normal, m_normal, 32);
	};
};

class SComboAttackCallbackInfo {
public:
	union {
	intptr_t m_outDirection;
		MAKE_PADDED_VAR(intptr_t, m_outDistance, m_outDistance, 4);
		MAKE_PADDED_VAR(bool, m_outShouldRotate, m_outShouldRotate, 8);
		MAKE_PADDED_VAR(float, m_outRotateToEnemyAngle, m_outRotateToEnemyAngle, 12);
		MAKE_PADDED_VAR(Vector, m_outSlideToPosition, m_outSlideToPosition, 16);
		MAKE_PADDED_VAR(bool, m_outShouldTranslate, m_outShouldTranslate, 32);
		MAKE_PADDED_VAR(bool, m_outLeftString, m_outLeftString, 33);
		MAKE_PADDED_VAR(intptr_t, m_outAttackType, m_outAttackType, 36);
		MAKE_PADDED_VAR(int32_t, m_inAspectName, m_inAspectName, 40);
		MAKE_PADDED_VAR(bool, m_prevDirAttack, m_prevDirAttack, 44);
		MAKE_PADDED_VAR(int32_t, m_inGlobalAttackCounter, m_inGlobalAttackCounter, 48);
		MAKE_PADDED_VAR(int32_t, m_inStringAttackCounter, m_inStringAttackCounter, 52);
		MAKE_PADDED_VAR(int32_t, m_inAttackId, m_inAttackId, 56);
	};
};

class SCommonMapPinInstance {
public:
	union {
	int32_t m_id;
		MAKE_PADDED_VAR(int32_t, m_tag, m_tag, 4);
		MAKE_PADDED_VAR(int32_t, m_customNameId, m_customNameId, 8);
		MAKE_PADDED_VAR(int32_t, m_extraTag, m_extraTag, 12);
		MAKE_PADDED_VAR(int32_t, m_type, m_type, 16);
		MAKE_PADDED_VAR(int32_t, m_visibleType, m_visibleType, 20);
		MAKE_PADDED_VAR(int32_t, m_alternateVersion, m_alternateVersion, 24);
		MAKE_PADDED_VAR(Vector, m_position, m_position, 32);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 48);
		MAKE_PADDED_VAR(float, m_visibleRadius, m_visibleRadius, 52);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 56);
		MAKE_PADDED_VAR(intptr_t*, m_entities[2], m_entities, 72);
		MAKE_PADDED_VAR(bool, m_isDynamic, m_isDynamic, 84);
		MAKE_PADDED_VAR(bool, m_isKnown, m_isKnown, 85);
		MAKE_PADDED_VAR(bool, m_isDiscovered, m_isDiscovered, 86);
		MAKE_PADDED_VAR(bool, m_isDisabled, m_isDisabled, 87);
		MAKE_PADDED_VAR(bool, m_isHighlightable, m_isHighlightable, 88);
		MAKE_PADDED_VAR(bool, m_isHighlighted, m_isHighlighted, 89);
		MAKE_PADDED_VAR(bool, m_canBePointedByArrow, m_canBePointedByArrow, 90);
		MAKE_PADDED_VAR(bool, m_canBeAddedToMinimap, m_canBeAddedToMinimap, 91);
		MAKE_PADDED_VAR(bool, m_isAddedToMinimap, m_isAddedToMinimap, 92);
		MAKE_PADDED_VAR(bool, m_invalidated, m_invalidated, 93);
	};
};

class SCreatureEntryEntryGeneratorNodeParam {
public:
	union {
	char* m_comment;
		MAKE_PADDED_VAR(int32_t, m_qualityMin, m_qualityMin, 12);
		MAKE_PADDED_VAR(int32_t, m_qualityMax, m_qualityMax, 16);
		MAKE_PADDED_VAR(intptr_t, m_spawnWayPointTag, m_spawnWayPointTag, 20);
		MAKE_PADDED_VAR(SCreatureDefinitionWrapper, m_creatureDefinition, m_creatureDefinition, 32);
		MAKE_PADDED_VAR(int32_t, m_appearanceName, m_appearanceName, 36);
		MAKE_PADDED_VAR(int32_t, m_tagToAssign, m_tagToAssign, 40);
		MAKE_PADDED_VAR(int32_t, m_group, m_group, 44);
	};
};

class SCurve3DData {
public:
	union {
	intptr_t m_curveX;
		MAKE_PADDED_VAR(intptr_t, m_curveY, m_curveY, 24);
		MAKE_PADDED_VAR(intptr_t, m_curveZ, m_curveZ, 48);
	};
};

class SCurveData {
public:
	union {
	SCurveDataEntry* m_Curve_Values[142];
		MAKE_PADDED_VAR(intptr_t, m_value_type, m_value_type, 12);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 16);
		MAKE_PADDED_VAR(bool, m_is_looped, m_is_looped, 20);
	};
};

class SCutsceneActorDef {
public:
	union {
	char* m_name;
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 16);
		MAKE_PADDED_VAR(intptr_t, m_tag, m_tag, 48);
		MAKE_PADDED_VAR(int32_t, m_voiceTag, m_voiceTag, 60);
		MAKE_PADDED_VAR(int32_t, m_appearance, m_appearance, 64);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 68);
		MAKE_PADDED_VAR(intptr_t, m_finalPosition, m_finalPosition, 72);
		MAKE_PADDED_VAR(int32_t, m_animationAtFinalPosition, m_animationAtFinalPosition, 84);
		MAKE_PADDED_VAR(bool, m_killMe, m_killMe, 88);
		MAKE_PADDED_VAR(bool, m_useMimic, m_useMimic, 89);
	};
};

class SCutsceneActorOverrideMapping {
public:
	union {
	char* m_actorName;
		MAKE_PADDED_VAR(SCutsceneActorDef, m_cutsceneActorDef, m_cutsceneActorDef, 16);
	};
};

class SDismembermentEffect {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(intptr_t, m_typeMask, m_typeMask, 4);
	};
};

class SDismembermentWoundDecal {
public:
	union {
	intptr_t m_materialInfo;
		MAKE_PADDED_VAR(Vector2, m_scale, m_scale, 48);
		MAKE_PADDED_VAR(float, m_depthScale, m_depthScale, 56);
		MAKE_PADDED_VAR(Vector2, m_offset, m_offset, 60);
		MAKE_PADDED_VAR(float, m_depthFadePower, m_depthFadePower, 68);
		MAKE_PADDED_VAR(float, m_normalFadeBias, m_normalFadeBias, 72);
		MAKE_PADDED_VAR(float, m_normalFadeScale, m_normalFadeScale, 76);
		MAKE_PADDED_VAR(bool, m_doubleSided, m_doubleSided, 80);
		MAKE_PADDED_VAR(intptr_t, m_projectionMode, m_projectionMode, 84);
		MAKE_PADDED_VAR(bool, m_applyToFillMesh, m_applyToFillMesh, 88);
	};
};

class SDismembermentWoundSingleSpawn {
public:
	union {
	CEntityTemplate m_spawnedEntity;
		MAKE_PADDED_VAR(int32_t, m_spawnEntityBoneName, m_spawnEntityBoneName, 8);
		MAKE_PADDED_VAR(int32_t, m_spawnedEntityCurveName, m_spawnedEntityCurveName, 12);
		MAKE_PADDED_VAR(int32_t, m_droppedEquipmentTag, m_droppedEquipmentTag, 16);
		MAKE_PADDED_VAR(intptr_t*, m_soundEvents[2], m_soundEvents, 20);
		MAKE_PADDED_VAR(bool, m_despawnAlongWithBase, m_despawnAlongWithBase, 32);
		MAKE_PADDED_VAR(bool, m_syncPose, m_syncPose, 33);
		MAKE_PADDED_VAR(intptr_t, m_fixBaseBonesHierarchyType, m_fixBaseBonesHierarchyType, 36);
		MAKE_PADDED_VAR(intptr_t, m_fixSpawnedBonesHierarchyType, m_fixSpawnedBonesHierarchyType, 40);
		MAKE_PADDED_VAR(int32_t*, m_effectsNames[2], m_effectsNames, 44);
		MAKE_PADDED_VAR(SDismembermentEffect*, m_additionalEffects[2], m_additionalEffects, 56);
	};
};

class SDropPhysicsCurves {
public:
	union {
	intptr_t m_trajectory;
		MAKE_PADDED_VAR(intptr_t, m_rotation, m_rotation, 128);
	};
};

class SDynamicDecalMaterialInfo {
public:
	union {
	CBitmapTexture m_diffuseTexture;
		MAKE_PADDED_VAR(CBitmapTexture, m_normalTexture, m_normalTexture, 8);
		MAKE_PADDED_VAR(Color, m_specularColor, m_specularColor, 16);
		MAKE_PADDED_VAR(float, m_specularScale, m_specularScale, 20);
		MAKE_PADDED_VAR(float, m_specularBase, m_specularBase, 24);
		MAKE_PADDED_VAR(float, m_specularity, m_specularity, 28);
		MAKE_PADDED_VAR(bool, m_additiveNormals, m_additiveNormals, 32);
		MAKE_PADDED_VAR(Color, m_diffuseRandomColor0, m_diffuseRandomColor0, 33);
		MAKE_PADDED_VAR(Color, m_diffuseRandomColor1, m_diffuseRandomColor1, 37);
		MAKE_PADDED_VAR(intptr_t, m_subUVType, m_subUVType, 44);
	};
};

class SEntityMapPinInfo {
public:
	union {
	int32_t m_entityName;
		MAKE_PADDED_VAR(uint32_t, m_entityCustomNameId, m_entityCustomNameId, 4);
		MAKE_PADDED_VAR(intptr_t, m_entityTags, m_entityTags, 8);
		MAKE_PADDED_VAR(Vector, m_entityPosition, m_entityPosition, 32);
		MAKE_PADDED_VAR(float, m_entityRadius, m_entityRadius, 48);
		MAKE_PADDED_VAR(int32_t, m_entityType, m_entityType, 52);
		MAKE_PADDED_VAR(int32_t, m_alternateVersion, m_alternateVersion, 56);
		MAKE_PADDED_VAR(int32_t, m_fastTravelSpotName, m_fastTravelSpotName, 60);
		MAKE_PADDED_VAR(int32_t, m_fastTravelGroupName, m_fastTravelGroupName, 64);
		MAKE_PADDED_VAR(int32_t, m_fastTravelTeleportWayPointTag, m_fastTravelTeleportWayPointTag, 68);
		MAKE_PADDED_VAR(Vector, m_fastTravelTeleportWayPointPosition, m_fastTravelTeleportWayPointPosition, 80);
		MAKE_PADDED_VAR(EulerAngles, m_fastTravelTeleportWayPointRotation, m_fastTravelTeleportWayPointRotation, 96);
	};
};

class SEntityWeight {
public:
	union {
	CEntityTemplate m_template;
		MAKE_PADDED_VAR(float, m_weight, m_weight, 8);
	};
};

class SEnvProbeGenParams {
public:
	union {
	bool m_useInInterior;
		MAKE_PADDED_VAR(bool, m_useInExterior, m_useInExterior, 1);
		MAKE_PADDED_VAR(bool, m_isInteriorFallback, m_isInteriorFallback, 2);
		MAKE_PADDED_VAR(float, m_cullingDistance, m_cullingDistance, 4);
		MAKE_PADDED_VAR(Color, m_ambientColor, m_ambientColor, 8);
		MAKE_PADDED_VAR(float, m_ambientIntensity, m_ambientIntensity, 12);
		MAKE_PADDED_VAR(float, m_dimmerFactor, m_dimmerFactor, 16);
		MAKE_PADDED_VAR(float, m_fadeInDuration, m_fadeInDuration, 20);
		MAKE_PADDED_VAR(float, m_fadeOutDuration, m_fadeOutDuration, 24);
		MAKE_PADDED_VAR(float, m_lightScaleGlobal, m_lightScaleGlobal, 28);
		MAKE_PADDED_VAR(float, m_lightScaleLocals, m_lightScaleLocals, 32);
		MAKE_PADDED_VAR(float, m_fogAmount, m_fogAmount, 36);
		MAKE_PADDED_VAR(intptr_t, m_daycycleAmbientIntensity, m_daycycleAmbientIntensity, 40);
		MAKE_PADDED_VAR(intptr_t, m_daycycleLightScaleLocals, m_daycycleLightScaleLocals, 88);
		MAKE_PADDED_VAR(intptr_t, m_daycycleEffectIntensity, m_daycycleEffectIntensity, 136);
	};
};

class SExplorationQueryToken {
public:
	union {
		MAKE_PADDED_VAR(bool, m_valid, m_valid, 8);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 24);
		MAKE_PADDED_VAR(Vector, m_pointOnEdge, m_pointOnEdge, 32);
		MAKE_PADDED_VAR(Vector, m_normal, m_normal, 48);
		MAKE_PADDED_VAR(bool, m_usesHands, m_usesHands, 112);
	};
};

class SFlareParameters {
public:
	union {
	intptr_t m_category;
		MAKE_PADDED_VAR(intptr_t, m_colorGroup, m_colorGroup, 4);
		MAKE_PADDED_VAR(intptr_t, m_lensFlareGroup, m_lensFlareGroup, 8);
		MAKE_PADDED_VAR(float, m_occlusionExtent, m_occlusionExtent, 12);
		MAKE_PADDED_VAR(float, m_flareRadius, m_flareRadius, 16);
		MAKE_PADDED_VAR(float, m_fadeInMaxSpeed, m_fadeInMaxSpeed, 20);
		MAKE_PADDED_VAR(float, m_fadeOutMaxSpeed, m_fadeOutMaxSpeed, 24);
		MAKE_PADDED_VAR(float, m_fadeInAccel, m_fadeInAccel, 28);
		MAKE_PADDED_VAR(float, m_fadeOutAccel, m_fadeOutAccel, 32);
		MAKE_PADDED_VAR(float, m_visibilityFullDist, m_visibilityFullDist, 36);
		MAKE_PADDED_VAR(float, m_visibilityFadeRange, m_visibilityFadeRange, 40);
	};
};

class SFoliageLODSetting {
public:
	union {
	intptr_t m_minTreeExtentPerLod;
	};
};

class SFormationConstraintDefinition {
public:
	union {
	bool m_referenceRelativeIndex;
		MAKE_PADDED_VAR(int32_t, m_referenceSlot, m_referenceSlot, 4);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 8);
		MAKE_PADDED_VAR(Vector2, m_value, m_value, 12);
		MAKE_PADDED_VAR(float, m_strength, m_strength, 20);
		MAKE_PADDED_VAR(float, m_tolerance, m_tolerance, 24);
	};
};

class SFurClumping {
public:
	union {
	float m_clumpRoundness;
		MAKE_PADDED_VAR(CBitmapTexture, m_clumpRoundnessTex, m_clumpRoundnessTex, 8);
		MAKE_PADDED_VAR(intptr_t, m_clumpRoundnessTexChannel, m_clumpRoundnessTexChannel, 16);
		MAKE_PADDED_VAR(float, m_clumpScale, m_clumpScale, 20);
		MAKE_PADDED_VAR(CBitmapTexture, m_clumpScaleTex, m_clumpScaleTex, 24);
		MAKE_PADDED_VAR(intptr_t, m_clumpScaleTexChannel, m_clumpScaleTexChannel, 32);
		MAKE_PADDED_VAR(float, m_clumpNoise, m_clumpNoise, 36);
		MAKE_PADDED_VAR(CBitmapTexture, m_clumpNoiseTex, m_clumpNoiseTex, 40);
		MAKE_PADDED_VAR(intptr_t, m_clumpNoiseTexChannel, m_clumpNoiseTexChannel, 48);
		MAKE_PADDED_VAR(uint32_t, m_clumpNumSubclumps, m_clumpNumSubclumps, 52);
	};
};

class SFurColor {
public:
	union {
	float m_rootAlphaFalloff;
		MAKE_PADDED_VAR(Color, m_rootColor, m_rootColor, 4);
		MAKE_PADDED_VAR(CBitmapTexture, m_rootColorTex, m_rootColorTex, 8);
		MAKE_PADDED_VAR(Color, m_tipColor, m_tipColor, 16);
		MAKE_PADDED_VAR(CBitmapTexture, m_tipColorTex, m_tipColorTex, 24);
		MAKE_PADDED_VAR(float, m_rootTipColorWeight, m_rootTipColorWeight, 32);
		MAKE_PADDED_VAR(float, m_rootTipColorFalloff, m_rootTipColorFalloff, 36);
		MAKE_PADDED_VAR(CBitmapTexture, m_strandTex, m_strandTex, 40);
		MAKE_PADDED_VAR(intptr_t, m_strandBlendMode, m_strandBlendMode, 48);
		MAKE_PADDED_VAR(float, m_strandBlendScale, m_strandBlendScale, 52);
		MAKE_PADDED_VAR(float, m_textureBrightness, m_textureBrightness, 56);
		MAKE_PADDED_VAR(float, m_ambientEnvScale, m_ambientEnvScale, 60);
	};
};

class SFurGraphicalMaterials {
public:
	union {
	SFurColor m_color;
		MAKE_PADDED_VAR(SFurDiffuse, m_diffuse, m_diffuse, 64);
		MAKE_PADDED_VAR(intptr_t, m_specular, m_specular, 112);
		MAKE_PADDED_VAR(SFurGlint, m_glint, m_glint, 160);
		MAKE_PADDED_VAR(SFurShadow, m_shadow, m_shadow, 172);
	};
};

class SFurMaterialSet {
public:
	union {
	intptr_t m_physicalMaterials;
		MAKE_PADDED_VAR(SFurGraphicalMaterials, m_graphicalMaterials, m_graphicalMaterials, 480);
		MAKE_PADDED_VAR(bool, m_useWetness, m_useWetness, 672);
	};
};

class SFurPhysicalMaterials {
public:
	union {
	SFurSimulation m_simulation;
		MAKE_PADDED_VAR(intptr_t, m_volume, m_volume, 80);
		MAKE_PADDED_VAR(intptr_t, m_strandWidth, m_strandWidth, 128);
		MAKE_PADDED_VAR(intptr_t, m_stiffness, m_stiffness, 176);
		MAKE_PADDED_VAR(SFurClumping, m_clumping, m_clumping, 352);
		MAKE_PADDED_VAR(intptr_t, m_waveness, m_waveness, 408);
	};
};

class SFurSpecular {
public:
	union {
	Color m_specularColor;
		MAKE_PADDED_VAR(CBitmapTexture, m_specularTex, m_specularTex, 8);
		MAKE_PADDED_VAR(float, m_specularPrimary, m_specularPrimary, 16);
		MAKE_PADDED_VAR(float, m_specularPowerPrimary, m_specularPowerPrimary, 20);
		MAKE_PADDED_VAR(float, m_specularPrimaryBreakup, m_specularPrimaryBreakup, 24);
		MAKE_PADDED_VAR(float, m_specularSecondary, m_specularSecondary, 28);
		MAKE_PADDED_VAR(float, m_specularPowerSecondary, m_specularPowerSecondary, 32);
		MAKE_PADDED_VAR(float, m_specularSecondaryOffset, m_specularSecondaryOffset, 36);
		MAKE_PADDED_VAR(float, m_specularNoiseScale, m_specularNoiseScale, 40);
		MAKE_PADDED_VAR(float, m_specularEnvScale, m_specularEnvScale, 44);
	};
};

class SFurStiffness {
public:
	union {
	float m_stiffness;
		MAKE_PADDED_VAR(float, m_stiffnessStrength, m_stiffnessStrength, 4);
		MAKE_PADDED_VAR(CBitmapTexture, m_stiffnessTex, m_stiffnessTex, 8);
		MAKE_PADDED_VAR(intptr_t, m_stiffnessTexChannel, m_stiffnessTexChannel, 16);
		MAKE_PADDED_VAR(float, m_interactionStiffness, m_interactionStiffness, 20);
		MAKE_PADDED_VAR(float, m_rootStiffness, m_rootStiffness, 24);
		MAKE_PADDED_VAR(float, m_pinStiffness, m_pinStiffness, 28);
		MAKE_PADDED_VAR(CBitmapTexture, m_rootStiffnessTex, m_rootStiffnessTex, 32);
		MAKE_PADDED_VAR(intptr_t, m_rootStiffnessTexChannel, m_rootStiffnessTexChannel, 40);
		MAKE_PADDED_VAR(float, m_stiffnessDamping, m_stiffnessDamping, 44);
		MAKE_PADDED_VAR(float, m_tipStiffness, m_tipStiffness, 48);
		MAKE_PADDED_VAR(float, m_bendStiffness, m_bendStiffness, 52);
		MAKE_PADDED_VAR(bool, m_stiffnessBoneEnable, m_stiffnessBoneEnable, 56);
		MAKE_PADDED_VAR(uint32_t, m_stiffnessBoneIndex, m_stiffnessBoneIndex, 60);
		MAKE_PADDED_VAR(uint32_t, m_stiffnessBoneAxis, m_stiffnessBoneAxis, 64);
		MAKE_PADDED_VAR(float, m_stiffnessStartDistance, m_stiffnessStartDistance, 68);
		MAKE_PADDED_VAR(float, m_stiffnessEndDistance, m_stiffnessEndDistance, 72);
		MAKE_PADDED_VAR(Vector, m_stiffnessBoneCurve, m_stiffnessBoneCurve, 80);
		MAKE_PADDED_VAR(Vector, m_stiffnessCurve, m_stiffnessCurve, 96);
		MAKE_PADDED_VAR(Vector, m_stiffnessStrengthCurve, m_stiffnessStrengthCurve, 112);
		MAKE_PADDED_VAR(Vector, m_stiffnessDampingCurve, m_stiffnessDampingCurve, 128);
		MAKE_PADDED_VAR(Vector, m_bendStiffnessCurve, m_bendStiffnessCurve, 144);
		MAKE_PADDED_VAR(Vector, m_interactionStiffnessCurve, m_interactionStiffnessCurve, 160);
	};
};

class SFurStrandWidth {
public:
	union {
	float m_width;
		MAKE_PADDED_VAR(float, m_widthRootScale, m_widthRootScale, 4);
		MAKE_PADDED_VAR(CBitmapTexture, m_rootWidthTex, m_rootWidthTex, 8);
		MAKE_PADDED_VAR(intptr_t, m_rootWidthTexChannel, m_rootWidthTexChannel, 16);
		MAKE_PADDED_VAR(float, m_widthTipScale, m_widthTipScale, 20);
		MAKE_PADDED_VAR(CBitmapTexture, m_tipWidthTex, m_tipWidthTex, 24);
		MAKE_PADDED_VAR(intptr_t, m_tipWidthTexChannel, m_tipWidthTexChannel, 32);
		MAKE_PADDED_VAR(float, m_widthNoise, m_widthNoise, 36);
	};
};

class SFurVisualizers {
public:
	union {
	bool m_drawRenderHairs;
		MAKE_PADDED_VAR(bool, m_visualizeBones, m_visualizeBones, 1);
		MAKE_PADDED_VAR(bool, m_visualizeCapsules, m_visualizeCapsules, 2);
		MAKE_PADDED_VAR(bool, m_visualizeGuideHairs, m_visualizeGuideHairs, 3);
		MAKE_PADDED_VAR(bool, m_visualizeControlVertices, m_visualizeControlVertices, 4);
		MAKE_PADDED_VAR(bool, m_visualizeBoundingBox, m_visualizeBoundingBox, 5);
		MAKE_PADDED_VAR(intptr_t, m_colorizeMode, m_colorizeMode, 8);
		MAKE_PADDED_VAR(bool, m_visualizeCullSphere, m_visualizeCullSphere, 12);
		MAKE_PADDED_VAR(bool, m_visualizeDiffuseBone, m_visualizeDiffuseBone, 13);
		MAKE_PADDED_VAR(bool, m_visualizeFrames, m_visualizeFrames, 14);
		MAKE_PADDED_VAR(bool, m_visualizeGrowthMesh, m_visualizeGrowthMesh, 15);
		MAKE_PADDED_VAR(bool, m_visualizeHairInteractions, m_visualizeHairInteractions, 16);
		MAKE_PADDED_VAR(uint32_t, m_visualizeHairSkips, m_visualizeHairSkips, 20);
		MAKE_PADDED_VAR(bool, m_visualizeLocalPos, m_visualizeLocalPos, 24);
		MAKE_PADDED_VAR(bool, m_visualizePinConstraints, m_visualizePinConstraints, 25);
		MAKE_PADDED_VAR(bool, m_visualizeShadingNormals, m_visualizeShadingNormals, 26);
		MAKE_PADDED_VAR(bool, m_visualizeSkinnedGuideHairs, m_visualizeSkinnedGuideHairs, 27);
		MAKE_PADDED_VAR(bool, m_visualizeStiffnessBone, m_visualizeStiffnessBone, 28);
	};
};

class SFurVolume {
public:
	union {
	float m_density;
		MAKE_PADDED_VAR(CBitmapTexture, m_densityTex, m_densityTex, 8);
		MAKE_PADDED_VAR(intptr_t, m_densityTexChannel, m_densityTexChannel, 16);
		MAKE_PADDED_VAR(bool, m_usePixelDensity, m_usePixelDensity, 20);
		MAKE_PADDED_VAR(float, m_lengthNoise, m_lengthNoise, 24);
		MAKE_PADDED_VAR(float, m_lengthScale, m_lengthScale, 28);
		MAKE_PADDED_VAR(CBitmapTexture, m_lengthTex, m_lengthTex, 32);
		MAKE_PADDED_VAR(intptr_t, m_lengthTexChannel, m_lengthTexChannel, 40);
	};
};

class SFurWaveness {
public:
	union {
	float m_waveScale;
		MAKE_PADDED_VAR(CBitmapTexture, m_waveScaleTex, m_waveScaleTex, 8);
		MAKE_PADDED_VAR(intptr_t, m_waveScaleTexChannel, m_waveScaleTexChannel, 16);
		MAKE_PADDED_VAR(float, m_waveScaleNoise, m_waveScaleNoise, 20);
		MAKE_PADDED_VAR(float, m_waveFreq, m_waveFreq, 24);
		MAKE_PADDED_VAR(CBitmapTexture, m_waveFreqTex, m_waveFreqTex, 32);
		MAKE_PADDED_VAR(intptr_t, m_waveFreqTexChannel, m_waveFreqTexChannel, 40);
		MAKE_PADDED_VAR(float, m_waveFreqNoise, m_waveFreqNoise, 44);
		MAKE_PADDED_VAR(float, m_waveRootStraighten, m_waveRootStraighten, 48);
		MAKE_PADDED_VAR(float, m_waveStrand, m_waveStrand, 52);
		MAKE_PADDED_VAR(float, m_waveClump, m_waveClump, 56);
	};
};

class SGraphLayer {
public:
	union {
	intptr_t m_state;
		MAKE_PADDED_VAR(char*, m_name, m_name, 4);
	};
};

class SGuiSceneDescription {
public:
	union {
	bool m_enabled;
		MAKE_PADDED_VAR(int32_t, m_worldClass, m_worldClass, 4);
		MAKE_PADDED_VAR(CEnvironmentDefinition, m_defaultEnvDef, m_defaultEnvDef, 8);
		MAKE_PADDED_VAR(EulerAngles, m_defaultSunRotation, m_defaultSunRotation, 40);
		MAKE_PADDED_VAR(bool, m_enablePhysics, m_enablePhysics, 52);
	};
};

class SJobTreeSettings {
public:
	union {
	bool m_leftRemoveAtEnd;
		MAKE_PADDED_VAR(bool, m_rightRemoveAtEnd, m_rightRemoveAtEnd, 1);
		MAKE_PADDED_VAR(bool, m_leftDropOnBreak, m_leftDropOnBreak, 2);
		MAKE_PADDED_VAR(bool, m_rightDropOnBreak, m_rightDropOnBreak, 3);
		MAKE_PADDED_VAR(bool, m_ignoreHardReactions, m_ignoreHardReactions, 4);
		MAKE_PADDED_VAR(bool, m_needsPrecision, m_needsPrecision, 5);
		MAKE_PADDED_VAR(bool, m_isConscious, m_isConscious, 6);
		MAKE_PADDED_VAR(int32_t, m_jobTreeType, m_jobTreeType, 8);
		MAKE_PADDED_VAR(float, m_globalBreakingBlendOutTime, m_globalBreakingBlendOutTime, 12);
		MAKE_PADDED_VAR(bool, m_forceKeepIKactive, m_forceKeepIKactive, 16);
		MAKE_PADDED_VAR(CJobTree, m_altJobTreeRes, m_altJobTreeRes, 24);
	};
};

class SJournalEntryStatus {
public:
	union {
	intptr_t m_entry;
		MAKE_PADDED_VAR(intptr_t, m_status, m_status, 8);
		MAKE_PADDED_VAR(bool, m_unread, m_unread, 12);
	};
};

class SJournalQuestObjectiveData {
public:
	union {
	intptr_t m_status;
		MAKE_PADDED_VAR(intptr_t, m_objectiveEntry, m_objectiveEntry, 8);
	};
};

class SJournalStatusEvent {
public:
	union {
	SJournalEvent sjournalevent;
		MAKE_PADDED_VAR(intptr_t, m_oldStatus, m_oldStatus, 16);
		MAKE_PADDED_VAR(intptr_t, m_newStatus, m_newStatus, 20);
		MAKE_PADDED_VAR(bool, m_silent, m_silent, 24);
	};
};

class SMenuDescription {
public:
	union {
	int32_t m_menuName;
		MAKE_PADDED_VAR(CMenuResource, m_menuResource, m_menuResource, 8);
	};
};

class SMenuEvent {
public:
	union {
	int32_t m_eventName;
		MAKE_PADDED_VAR(int32_t, m_openedMenu, m_openedMenu, 4);
		MAKE_PADDED_VAR(CJournalBase, m_openedJournalEntry, m_openedJournalEntry, 8);
	};
};

class SMeshChunkPacked {
public:
	union {
	intptr_t m_vertexType;
		MAKE_PADDED_VAR(uint32_t, m_materialID, m_materialID, 4);
		MAKE_PADDED_VAR(char, m_numBonesPerVertex, m_numBonesPerVertex, 8);
		MAKE_PADDED_VAR(uint32_t, m_numVertices, m_numVertices, 12);
		MAKE_PADDED_VAR(uint32_t, m_numIndices, m_numIndices, 16);
		MAKE_PADDED_VAR(uint32_t, m_firstVertex, m_firstVertex, 20);
		MAKE_PADDED_VAR(uint32_t, m_firstIndex, m_firstIndex, 24);
		MAKE_PADDED_VAR(intptr_t, m_renderMask, m_renderMask, 28);
		MAKE_PADDED_VAR(bool, m_useForShadowmesh, m_useForShadowmesh, 29);
	};
};

class SMeshCookedData {
public:
	union {
	Vector m_collisionInitPositionOffset;
		MAKE_PADDED_VAR(Vector, m_dropOffset, m_dropOffset, 16);
		MAKE_PADDED_VAR(Vector*, m_bonePositions[46], m_bonePositions, 32);
		MAKE_PADDED_VAR(float*, m_renderLODs[46], m_renderLODs, 44);
		MAKE_PADDED_VAR(char*, m_renderChunks[46], m_renderChunks, 56);
		MAKE_PADDED_VAR(intptr_t, m_renderBuffer, m_renderBuffer, 72);
		MAKE_PADDED_VAR(uint32_t, m_vertexBufferSize, m_vertexBufferSize, 208);
		MAKE_PADDED_VAR(uint32_t, m_indexBufferSize, m_indexBufferSize, 212);
		MAKE_PADDED_VAR(uint32_t, m_indexBufferOffset, m_indexBufferOffset, 216);
		MAKE_PADDED_VAR(Vector, m_quantizationScale, m_quantizationScale, 224);
		MAKE_PADDED_VAR(Vector, m_quantizationOffset, m_quantizationOffset, 240);
	};
};

class SMultiCurve {
public:
	union {
	intptr_t m_type;
		MAKE_PADDED_VAR(intptr_t, m_showFlags, m_showFlags, 4);
		MAKE_PADDED_VAR(Color, m_color, m_color, 8);
		MAKE_PADDED_VAR(intptr_t, m_positionInterpolationMode, m_positionInterpolationMode, 12);
		MAKE_PADDED_VAR(intptr_t, m_positionManualMode, m_positionManualMode, 16);
		MAKE_PADDED_VAR(float, m_automaticPositionInterpolationSmoothness, m_automaticPositionInterpolationSmoothness, 20);
		MAKE_PADDED_VAR(intptr_t, m_rotationInterpolationMode, m_rotationInterpolationMode, 24);
		MAKE_PADDED_VAR(float, m_automaticRotationInterpolationSmoothness, m_automaticRotationInterpolationSmoothness, 28);
		MAKE_PADDED_VAR(float, m_totalTime, m_totalTime, 32);
		MAKE_PADDED_VAR(bool, m_enableConsistentNumberOfControlPoints, m_enableConsistentNumberOfControlPoints, 36);
		MAKE_PADDED_VAR(bool, m_enableAutomaticTimeByDistanceRecalculation, m_enableAutomaticTimeByDistanceRecalculation, 37);
		MAKE_PADDED_VAR(bool, m_enableAutomaticTimeRecalculation, m_enableAutomaticTimeRecalculation, 38);
		MAKE_PADDED_VAR(bool, m_enableAutomaticRotationFromDirectionRecalculation, m_enableAutomaticRotationFromDirectionRecalculation, 39);
		MAKE_PADDED_VAR(SCurveData*, m_curves[2], m_curves, 40);
		MAKE_PADDED_VAR(Vector*, m_leftTangents[142], m_leftTangents, 52);
		MAKE_PADDED_VAR(Vector*, m_rightTangents[142], m_rightTangents, 64);
		MAKE_PADDED_VAR(SCurveEaseParam*, m_easeParams[2], m_easeParams, 76);
		MAKE_PADDED_VAR(intptr_t, m_translationRelativeMode, m_translationRelativeMode, 88);
		MAKE_PADDED_VAR(intptr_t, m_rotationRelativeMode, m_rotationRelativeMode, 92);
		MAKE_PADDED_VAR(intptr_t, m_scaleRelativeMode, m_scaleRelativeMode, 96);
		MAKE_PADDED_VAR(bool, m_hasInitialParentTransform, m_hasInitialParentTransform, 112);
		MAKE_PADDED_VAR(intptr_t, m_initialParentTransform, m_initialParentTransform, 120);
	};
};

class SParticleEmitterLODLevel {
public:
	union {
	ParticleBurst* m_burstList[2];
		MAKE_PADDED_VAR(intptr_t, m_birthRate, m_birthRate, 16);
		MAKE_PADDED_VAR(EmitterDurationSettings, m_emitterDurationSettings, m_emitterDurationSettings, 24);
		MAKE_PADDED_VAR(EmitterDelaySettings, m_emitterDelaySettings, m_emitterDelaySettings, 36);
		MAKE_PADDED_VAR(bool, m_sortBackToFront, m_sortBackToFront, 48);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 49);
	};
};

class SPartyWaypointHandle {
public:
	union {
	int32_t m_partyMemberName;
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 8);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 16);
	};
};

class SPhysicsDestructionAdditionalInfo {
public:
	union {
		MAKE_PADDED_VAR(Vector, m_initialVelocity, m_initialVelocity, 16);
		MAKE_PADDED_VAR(bool, m_overrideCollisionMasks, m_overrideCollisionMasks, 32);
		MAKE_PADDED_VAR(intptr_t, m_m_collisionType, m_m_collisionType, 40);
	};
};

class SPopupDescription {
public:
	union {
	int32_t m_popupName;
		MAKE_PADDED_VAR(CPopupResource, m_popupResource, m_popupResource, 8);
	};
};

class SPoseLookAtSegmentData {
public:
	union {
	intptr_t m_segmentLevel;
		MAKE_PADDED_VAR(char*, m_boneNameFirst, m_boneNameFirst, 4);
		MAKE_PADDED_VAR(char*, m_boneNameLast, m_boneNameLast, 16);
		MAKE_PADDED_VAR(intptr_t, m_up, m_up, 28);
		MAKE_PADDED_VAR(intptr_t, m_front, m_front, 32);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 36);
		MAKE_PADDED_VAR(float, m_bendingMultiplier, m_bendingMultiplier, 40);
		MAKE_PADDED_VAR(float, m_responsiveness, m_responsiveness, 44);
		MAKE_PADDED_VAR(bool, m_propagateToChain, m_propagateToChain, 48);
		MAKE_PADDED_VAR(bool, m_onlyFirst, m_onlyFirst, 49);
		MAKE_PADDED_VAR(float, m_angleMaxHor, m_angleMaxHor, 52);
		MAKE_PADDED_VAR(float, m_angleMaxVer, m_angleMaxVer, 56);
		MAKE_PADDED_VAR(float, m_angleThresholdDiffHor, m_angleThresholdDiffHor, 60);
		MAKE_PADDED_VAR(float, m_angleThresholdDiffVer, m_angleThresholdDiffVer, 64);
		MAKE_PADDED_VAR(float, m_maxAngleDiffVer, m_maxAngleDiffVer, 68);
		MAKE_PADDED_VAR(float, m_maxAngleDiffHor, m_maxAngleDiffHor, 72);
		MAKE_PADDED_VAR(float, m_maxAngleVerToRefPose, m_maxAngleVerToRefPose, 76);
		MAKE_PADDED_VAR(float, m_maxAngleHorToRefPose, m_maxAngleHorToRefPose, 80);
	};
};

class SPropertyAnimation {
public:
	union {
	int32_t m_propertyName;
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 4);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 24);
		MAKE_PADDED_VAR(bool, m_playOnStartup, m_playOnStartup, 152);
		MAKE_PADDED_VAR(int32_t, m_effectToPlay, m_effectToPlay, 156);
	};
};

class SQuestThreadSuspensionData {
public:
	union {
	intptr_t m_scopeBlockGUID;
		MAKE_PADDED_VAR(char*, m_scopeData[154], m_scopeData, 16);
	};
};

class SR4PlayerTargetingIn {
public:
	union {
	bool m_canFindTarget;
		MAKE_PADDED_VAR(bool, m_playerHasBlockingBuffs, m_playerHasBlockingBuffs, 1);
		MAKE_PADDED_VAR(bool, m_isHardLockedToTarget, m_isHardLockedToTarget, 2);
		MAKE_PADDED_VAR(bool, m_isActorLockedToTarget, m_isActorLockedToTarget, 3);
		MAKE_PADDED_VAR(bool, m_isCameraLockedToTarget, m_isCameraLockedToTarget, 4);
		MAKE_PADDED_VAR(bool, m_actionCheck, m_actionCheck, 5);
		MAKE_PADDED_VAR(bool, m_actionInput, m_actionInput, 6);
		MAKE_PADDED_VAR(bool, m_isInCombatAction, m_isInCombatAction, 7);
		MAKE_PADDED_VAR(bool, m_isLAxisReleased, m_isLAxisReleased, 8);
		MAKE_PADDED_VAR(bool, m_isLAxisReleasedAfterCounter, m_isLAxisReleasedAfterCounter, 9);
		MAKE_PADDED_VAR(bool, m_isLAxisReleasedAfterCounterNoCA, m_isLAxisReleasedAfterCounterNoCA, 10);
		MAKE_PADDED_VAR(bool, m_lastAxisInputIsMovement, m_lastAxisInputIsMovement, 11);
		MAKE_PADDED_VAR(bool, m_isAiming, m_isAiming, 12);
		MAKE_PADDED_VAR(bool, m_isSwimming, m_isSwimming, 13);
		MAKE_PADDED_VAR(bool, m_isDiving, m_isDiving, 14);
		MAKE_PADDED_VAR(bool, m_isThreatened, m_isThreatened, 15);
		MAKE_PADDED_VAR(bool, m_isCombatMusicEnabled, m_isCombatMusicEnabled, 16);
		MAKE_PADDED_VAR(bool, m_isPcModeEnabled, m_isPcModeEnabled, 17);
		MAKE_PADDED_VAR(bool, m_shouldUsePcModeTargeting, m_shouldUsePcModeTargeting, 18);
		MAKE_PADDED_VAR(bool, m_isInParryOrCounter, m_isInParryOrCounter, 19);
		MAKE_PADDED_VAR(intptr_t, m_bufferActionType, m_bufferActionType, 20);
		MAKE_PADDED_VAR(intptr_t, m_orientationTarget, m_orientationTarget, 24);
		MAKE_PADDED_VAR(float, m_coneDist, m_coneDist, 28);
		MAKE_PADDED_VAR(float, m_findMoveTargetDist, m_findMoveTargetDist, 32);
		MAKE_PADDED_VAR(float, m_cachedRawPlayerHeading, m_cachedRawPlayerHeading, 36);
		MAKE_PADDED_VAR(float, m_combatActionHeading, m_combatActionHeading, 40);
		MAKE_PADDED_VAR(Vector, m_rawPlayerHeadingVector, m_rawPlayerHeadingVector, 48);
		MAKE_PADDED_VAR(Vector, m_lookAtDirection, m_lookAtDirection, 64);
		MAKE_PADDED_VAR(intptr_t, m_moveTarget, m_moveTarget, 80);
		MAKE_PADDED_VAR(intptr_t, m_aimingTarget, m_aimingTarget, 88);
		MAKE_PADDED_VAR(intptr_t, m_displayTarget, m_displayTarget, 96);
		MAKE_PADDED_VAR(intptr_t*, m_finishableEnemies[2], m_finishableEnemies, 104);
		MAKE_PADDED_VAR(intptr_t*, m_hostileEnemies[2], m_hostileEnemies, 116);
		MAKE_PADDED_VAR(STargetSelectionWeights, m_defaultSelectionWeights, m_defaultSelectionWeights, 128);
	};
};

class SR4PlayerTargetingOut {
public:
	union {
	intptr_t m_target;
		MAKE_PADDED_VAR(bool, m_result, m_result, 8);
		MAKE_PADDED_VAR(bool, m_confirmNewTarget, m_confirmNewTarget, 9);
		MAKE_PADDED_VAR(bool, m_forceDisableUpdatePosition, m_forceDisableUpdatePosition, 10);
	};
};

class SRaycastHitResult {
public:
	union {
	Vector m_position;
		MAKE_PADDED_VAR(Vector, m_normal, m_normal, 16);
		MAKE_PADDED_VAR(float, m_distance, m_distance, 32);
		MAKE_PADDED_VAR(intptr_t, m_component, m_component, 64);
	};
};

class SResistanceValue {
public:
	union {
	SAbilityAttributeValue m_points;
		MAKE_PADDED_VAR(SAbilityAttributeValue, m_percents, m_percents, 12);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 24);
	};
};

class SReverbDefinition {
public:
	union {
	intptr_t m_reverbName;
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 12);
	};
};

class SSavegameInfo {
public:
	union {
		MAKE_PADDED_VAR(intptr_t, m_slotType, m_slotType, 4);
		MAKE_PADDED_VAR(int32_t, m_slotIndex, m_slotIndex, 8);
		MAKE_PADDED_VAR(char*, m_filename, m_filename, 24);
	};
};

class SSceneChoice {
public:
	union {
		MAKE_PADDED_VAR(char*, m_description, m_description, 16);
		MAKE_PADDED_VAR(bool, m_emphasised, m_emphasised, 32);
		MAKE_PADDED_VAR(bool, m_previouslyChoosen, m_previouslyChoosen, 33);
		MAKE_PADDED_VAR(bool, m_disabled, m_disabled, 34);
		MAKE_PADDED_VAR(intptr_t, m_dialogAction, m_dialogAction, 36);
		MAKE_PADDED_VAR(int32_t, m_playGoChunk, m_playGoChunk, 40);
	};
};

class SSceneCustomCameraDescription {
public:
	union {
	int32_t m_cameraName;
		MAKE_PADDED_VAR(intptr_t, m_cameraTransform, m_cameraTransform, 8);
		MAKE_PADDED_VAR(float, m_fov, m_fov, 16);
	};
};

class SSimpleCurve {
public:
	union {
		MAKE_PADDED_VAR(SCurveDataEntry*, m_dataCurveValues[142], m_dataCurveValues, 8);
		MAKE_PADDED_VAR(intptr_t, m_dataBaseType, m_dataBaseType, 24);
		MAKE_PADDED_VAR(float, m_ScalarEditScale, m_ScalarEditScale, 32);
		MAKE_PADDED_VAR(float, m_ScalarEditOrigin, m_ScalarEditOrigin, 36);
		MAKE_PADDED_VAR(intptr_t, m_CurveType, m_CurveType, 40);
	};
};

class SSkeletonBone {
public:
	union {
	intptr_t m_name;
		MAKE_PADDED_VAR(int32_t, m_nameAsCName, m_nameAsCName, 12);
		MAKE_PADDED_VAR(intptr_t, m_flags, m_flags, 16);
	};
};

class SSkeletonTrack {
public:
	union {
	intptr_t m_name;
		MAKE_PADDED_VAR(int32_t, m_nameAsCName, m_nameAsCName, 12);
	};
};

class SSoundAmbientDynamicSoundEvents {
public:
	union {
	intptr_t m_eventName;
		MAKE_PADDED_VAR(float, m_repeatTime, m_repeatTime, 12);
		MAKE_PADDED_VAR(float, m_repeatTimeVariance, m_repeatTimeVariance, 16);
		MAKE_PADDED_VAR(bool, m_triggerOnActivation, m_triggerOnActivation, 20);
	};
};

class SSoundGameParameterValue {
public:
	union {
	intptr_t m_gameParameterName;
		MAKE_PADDED_VAR(float, m_gameParameterValue, m_gameParameterValue, 12);
	};
};

class SSoundParameterCullSettings {
public:
	union {
	intptr_t m_gameParameterName;
		MAKE_PADDED_VAR(float, m_gameParameterCullValue, m_gameParameterCullValue, 12);
		MAKE_PADDED_VAR(bool, m_invertCullCheck, m_invertCullCheck, 16);
	};
};

class SSoundProperty {
public:
	union {
	intptr_t m_SoundProperty;
		MAKE_PADDED_VAR(float, m_value, m_value, 12);
	};
};

class SSoundSwitch {
public:
	union {
	intptr_t m_SoundSwitch;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 12);
	};
};

class SSSBoneTransform {
public:
	union {
	int32_t m_bone;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 8);
	};
};

class SStaticMapPin {
public:
	union {
	int32_t m_tag;
		MAKE_PADDED_VAR(int32_t, m_iconType, m_iconType, 4);
		MAKE_PADDED_VAR(int32_t, m_posX, m_posX, 8);
		MAKE_PADDED_VAR(int32_t, m_posY, m_posY, 12);
		MAKE_PADDED_VAR(CJournalResource, m_journalEntry, m_journalEntry, 16);
	};
};

class SStorySceneCameraBlendKey {
public:
	union {
	float m_time;
		MAKE_PADDED_VAR(intptr_t, m_cameraDefinition, m_cameraDefinition, 16);
	};
};

class SStorySceneCameraLightMod {
public:
	union {
	bool m_deactivateLight;
		MAKE_PADDED_VAR(bool, m_useCustomLight, m_useCustomLight, 1);
		MAKE_PADDED_VAR(SSimpleCurve, m_overrideColor, m_overrideColor, 8);
		MAKE_PADDED_VAR(Vector, m_lightOffset, m_lightOffset, 64);
		MAKE_PADDED_VAR(float, m_brightnessScale, m_brightnessScale, 80);
		MAKE_PADDED_VAR(float, m_radiusScale, m_radiusScale, 84);
		MAKE_PADDED_VAR(bool, m_useCustomAttenuation, m_useCustomAttenuation, 88);
		MAKE_PADDED_VAR(float, m_attenuation, m_attenuation, 92);
		MAKE_PADDED_VAR(intptr_t, m_usageMask, m_usageMask, 96);
	};
};

class SStorySceneEventGroupEntry {
public:
	union {
	float m_time;
		MAKE_PADDED_VAR(intptr_t, m_event, m_event, 8);
	};
};

class SStorySceneGameplayActionCallbackInfo {
public:
	union {
	bool m_outChangeItems;
		MAKE_PADDED_VAR(bool, m_outDontUseSceneTeleport, m_outDontUseSceneTeleport, 1);
		MAKE_PADDED_VAR(Vector, m_inActorPosition, m_inActorPosition, 16);
		MAKE_PADDED_VAR(Vector, m_inActorHeading, m_inActorHeading, 32);
		MAKE_PADDED_VAR(int32_t, m_inGameplayAction, m_inGameplayAction, 48);
		MAKE_PADDED_VAR(intptr_t, m_inActor, m_inActor, 56);
	};
};

class SStorySceneLightDimmerProperties {
public:
	union {
	SSimpleCurve m_ambientLevel;
		MAKE_PADDED_VAR(SSimpleCurve, m_marginFactor, m_marginFactor, 48);
	};
};

class SStorySceneLightTrackingInfo {
public:
	union {
	bool m_enable;
		MAKE_PADDED_VAR(SSimpleCurve, m_radius, m_radius, 8);
		MAKE_PADDED_VAR(SSimpleCurve, m_angleOffset, m_angleOffset, 56);
		MAKE_PADDED_VAR(intptr_t, m_trackingType, m_trackingType, 104);
	};
};

class SSweepHitResult {
public:
	union {
	Vector m_position;
		MAKE_PADDED_VAR(Vector, m_normal, m_normal, 16);
		MAKE_PADDED_VAR(float, m_distance, m_distance, 32);
		MAKE_PADDED_VAR(intptr_t, m_component, m_component, 40);
	};
};

class STargetingInfo {
public:
	union {
	intptr_t m_source;
		MAKE_PADDED_VAR(intptr_t, m_targetEntity, m_targetEntity, 8);
		MAKE_PADDED_VAR(bool, m_canBeTargetedCheck, m_canBeTargetedCheck, 16);
		MAKE_PADDED_VAR(bool, m_coneCheck, m_coneCheck, 17);
		MAKE_PADDED_VAR(float, m_coneHalfAngleCos, m_coneHalfAngleCos, 20);
		MAKE_PADDED_VAR(float, m_coneDist, m_coneDist, 24);
		MAKE_PADDED_VAR(Vector, m_coneHeadingVector, m_coneHeadingVector, 32);
		MAKE_PADDED_VAR(bool, m_distCheck, m_distCheck, 48);
		MAKE_PADDED_VAR(bool, m_invisibleCheck, m_invisibleCheck, 49);
		MAKE_PADDED_VAR(bool, m_navMeshCheck, m_navMeshCheck, 50);
		MAKE_PADDED_VAR(bool, m_inFrameCheck, m_inFrameCheck, 51);
		MAKE_PADDED_VAR(float, m_frameScaleX, m_frameScaleX, 52);
		MAKE_PADDED_VAR(float, m_frameScaleY, m_frameScaleY, 56);
		MAKE_PADDED_VAR(bool, m_knockDownCheck, m_knockDownCheck, 60);
		MAKE_PADDED_VAR(float, m_knockDownCheckDist, m_knockDownCheckDist, 64);
		MAKE_PADDED_VAR(bool, m_rsHeadingCheck, m_rsHeadingCheck, 68);
		MAKE_PADDED_VAR(float, m_rsHeadingLimitCos, m_rsHeadingLimitCos, 72);
	};
};

class STeleportBone {
public:
	union {
	int32_t m_boneName;
		MAKE_PADDED_VAR(intptr_t, m_teleportDetectionAxisLS, m_teleportDetectionAxisLS, 4);
	};
};

class StorySceneCameraDefinition {
public:
	union {
	int32_t m_cameraName;
		MAKE_PADDED_VAR(intptr_t, m_cameraTransform, m_cameraTransform, 8);
		MAKE_PADDED_VAR(float, m_cameraZoom, m_cameraZoom, 16);
		MAKE_PADDED_VAR(float, m_cameraFov, m_cameraFov, 20);
		MAKE_PADDED_VAR(float, m_dofFocusDistFar, m_dofFocusDistFar, 24);
		MAKE_PADDED_VAR(float, m_dofBlurDistFar, m_dofBlurDistFar, 28);
		MAKE_PADDED_VAR(float, m_dofIntensity, m_dofIntensity, 32);
		MAKE_PADDED_VAR(float, m_dofFocusDistNear, m_dofFocusDistNear, 36);
		MAKE_PADDED_VAR(float, m_dofBlurDistNear, m_dofBlurDistNear, 40);
		MAKE_PADDED_VAR(bool, m_enableCameraNoise, m_enableCameraNoise, 48);
		MAKE_PADDED_VAR(int32_t, m_sourceSlotName, m_sourceSlotName, 52);
		MAKE_PADDED_VAR(int32_t, m_targetSlotName, m_targetSlotName, 56);
		MAKE_PADDED_VAR(Vector, m_targetEyesLS, m_targetEyesLS, 64);
		MAKE_PADDED_VAR(float, m_sourceEyesHeigth, m_sourceEyesHeigth, 80);
		MAKE_PADDED_VAR(SBokehDofParams, m_bokehDofParams, m_bokehDofParams, 84);
		MAKE_PADDED_VAR(ApertureDofParams, m_dof, m_dof, 104);
		MAKE_PADDED_VAR(CEventGeneratorCameraParams, m_genParam, m_genParam, 120);
		MAKE_PADDED_VAR(char, m_cameraAdjustVersion, m_cameraAdjustVersion, 148);
	};
};

class StorySceneExpectedActor {
public:
	union {
	int32_t m_voicetag;
		MAKE_PADDED_VAR(intptr_t, m_actorTags, m_actorTags, 4);
		MAKE_PADDED_VAR(CEntityTemplate, m_entityTemplate, m_entityTemplate, 16);
		MAKE_PADDED_VAR(int32_t*, m_appearanceFilter[2], m_appearanceFilter, 48);
		MAKE_PADDED_VAR(bool, m_dontSearchByVoicetag, m_dontSearchByVoicetag, 60);
		MAKE_PADDED_VAR(char*, m_alias, m_alias, 64);
	};
};

class StorySceneScriptParam {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(intptr_t, m_value, m_value, 8);
	};
};

class SVoiceWeightCurve {
public:
	union {
	bool m_useCurve;
		MAKE_PADDED_VAR(SCurveData, m_curve, m_curve, 4);
		MAKE_PADDED_VAR(float, m_timeOffset, m_timeOffset, 28);
		MAKE_PADDED_VAR(float, m_valueOffset, m_valueOffset, 32);
		MAKE_PADDED_VAR(float, m_valueMulPre, m_valueMulPre, 36);
		MAKE_PADDED_VAR(float, m_valueMulPost, m_valueMulPost, 40);
	};
};

class SWanderAndWorkEntryGeneratorParams {
public:
	union {
	SCreatureEntryEntryGeneratorNodeParam m_creatureEntry;
		MAKE_PADDED_VAR(SWanderHistoryEntryGeneratorParams, m_wander, m_wander, 56);
		MAKE_PADDED_VAR(intptr_t, m_work, m_work, 60);
	};
};

class SWanderPointConnection {
public:
	union {
	intptr_t m_destination;
		MAKE_PADDED_VAR(bool, m_forcePathfinding, m_forcePathfinding, 8);
	};
};

class SWorkEntryGeneratorParam {
public:
	union {
	SCreatureEntryEntryGeneratorNodeParam m_creatureEntry;
		MAKE_PADDED_VAR(intptr_t, m_work, m_work, 56);
	};
};

class SWorkSmartAIEntryGeneratorNodeParam {
public:
	union {
	intptr_t m_apTag;
		MAKE_PADDED_VAR(intptr_t, m_areaTags, m_areaTags, 12);
		MAKE_PADDED_VAR(int32_t, m_apAreaTag, m_apAreaTag, 24);
		MAKE_PADDED_VAR(bool, m_keepActionPointOnceSelected, m_keepActionPointOnceSelected, 28);
		MAKE_PADDED_VAR(intptr_t, m_actionPointMoveType, m_actionPointMoveType, 32);
	};
};

class SWorkWanderSmartAIEntryGeneratorParam {
public:
	union {
	intptr_t m_apTag;
		MAKE_PADDED_VAR(intptr_t, m_areaTags, m_areaTags, 12);
		MAKE_PADDED_VAR(int32_t, m_apAreaTag, m_apAreaTag, 24);
	};
};

class SWorldDescription {
public:
	union {
	intptr_t m_worldName;
		MAKE_PADDED_VAR(CWorld, m_world, m_world, 8);
	};
};

class SWorldEnvironmentParameters {
public:
	union {
	CBitmapTexture m_vignetteTexture;
		MAKE_PADDED_VAR(CBitmapTexture, m_cameraDirtTexture, m_cameraDirtTexture, 8);
		MAKE_PADDED_VAR(CCubeTexture, m_interiorFallbackAmbientTexture, m_interiorFallbackAmbientTexture, 16);
		MAKE_PADDED_VAR(CCubeTexture, m_interiorFallbackReflectionTexture, m_interiorFallbackReflectionTexture, 24);
		MAKE_PADDED_VAR(float, m_cameraDirtNumVerticalTiles, m_cameraDirtNumVerticalTiles, 32);
		MAKE_PADDED_VAR(CGlobalLightingTrajectory, m_globalLightingTrajectory, m_globalLightingTrajectory, 40);
		MAKE_PADDED_VAR(float, m_toneMappingAdaptationSpeedUp, m_toneMappingAdaptationSpeedUp, 320);
		MAKE_PADDED_VAR(float, m_toneMappingAdaptationSpeedDown, m_toneMappingAdaptationSpeedDown, 324);
		MAKE_PADDED_VAR(CEnvironmentDefinition, m_environmentDefinition, m_environmentDefinition, 328);
		MAKE_PADDED_VAR(CEnvironmentDefinition, m_scenesEnvironmentDefinition, m_scenesEnvironmentDefinition, 336);
		MAKE_PADDED_VAR(SGlobalSpeedTreeParameters, m_speedTreeParameters, m_speedTreeParameters, 344);
		MAKE_PADDED_VAR(C2dArray, m_weatherTemplate, m_weatherTemplate, 400);
		MAKE_PADDED_VAR(bool, m_disableWaterShaders, m_disableWaterShaders, 408);
		MAKE_PADDED_VAR(intptr_t, m_skybox, m_skybox, 416);
		MAKE_PADDED_VAR(SLensFlareGroupsParameters, m_lensFlare, m_lensFlare, 480);
		MAKE_PADDED_VAR(SWorldRenderSettings, m_renderSettings, m_renderSettings, 736);
		MAKE_PADDED_VAR(CResourceSimplexTree, m_localWindDampers, m_localWindDampers, 960);
		MAKE_PADDED_VAR(CResourceSimplexTree, m_localWaterVisibility, m_localWaterVisibility, 968);
	};
};

class SWorldSkyboxParameters {
public:
	union {
	CMesh m_sunMesh;
		MAKE_PADDED_VAR(CMaterialInstance, m_sunMaterial, m_sunMaterial, 8);
		MAKE_PADDED_VAR(CMesh, m_moonMesh, m_moonMesh, 16);
		MAKE_PADDED_VAR(CMaterialInstance, m_moonMaterial, m_moonMaterial, 24);
		MAKE_PADDED_VAR(CMesh, m_skyboxMesh, m_skyboxMesh, 32);
		MAKE_PADDED_VAR(CMaterialInstance, m_skyboxMaterial, m_skyboxMaterial, 40);
		MAKE_PADDED_VAR(CMesh, m_cloudsMesh, m_cloudsMesh, 48);
		MAKE_PADDED_VAR(CMaterialInstance, m_cloudsMaterial, m_cloudsMaterial, 56);
	};
};

class TCrDefinition {
public:
	union {
	CObject cobject;
		MAKE_PADDED_VAR(int32_t, m_root, m_root, 88);
		MAKE_PADDED_VAR(int32_t, m_pelvis, m_pelvis, 92);
		MAKE_PADDED_VAR(int32_t, m_torso1, m_torso1, 96);
		MAKE_PADDED_VAR(int32_t, m_torso2, m_torso2, 100);
		MAKE_PADDED_VAR(int32_t, m_torso3, m_torso3, 104);
		MAKE_PADDED_VAR(int32_t, m_neck, m_neck, 108);
		MAKE_PADDED_VAR(int32_t, m_head, m_head, 112);
		MAKE_PADDED_VAR(int32_t, m_shoulderL, m_shoulderL, 116);
		MAKE_PADDED_VAR(int32_t, m_bicepL, m_bicepL, 120);
		MAKE_PADDED_VAR(int32_t, m_forearmL, m_forearmL, 124);
		MAKE_PADDED_VAR(int32_t, m_handL, m_handL, 128);
		MAKE_PADDED_VAR(int32_t, m_weaponL, m_weaponL, 132);
		MAKE_PADDED_VAR(int32_t, m_shoulderR, m_shoulderR, 136);
		MAKE_PADDED_VAR(int32_t, m_bicepR, m_bicepR, 140);
		MAKE_PADDED_VAR(int32_t, m_forearmR, m_forearmR, 144);
		MAKE_PADDED_VAR(int32_t, m_handR, m_handR, 148);
		MAKE_PADDED_VAR(int32_t, m_weaponR, m_weaponR, 152);
		MAKE_PADDED_VAR(int32_t, m_thighL, m_thighL, 156);
		MAKE_PADDED_VAR(int32_t, m_shinL, m_shinL, 160);
		MAKE_PADDED_VAR(int32_t, m_footL, m_footL, 164);
		MAKE_PADDED_VAR(int32_t, m_toeL, m_toeL, 168);
		MAKE_PADDED_VAR(int32_t, m_thighR, m_thighR, 172);
		MAKE_PADDED_VAR(int32_t, m_shinR, m_shinR, 176);
		MAKE_PADDED_VAR(int32_t, m_footR, m_footR, 180);
		MAKE_PADDED_VAR(int32_t, m_toeR, m_toeR, 184);
		MAKE_PADDED_VAR(int32_t, m_indexRoot, m_indexRoot, 188);
		MAKE_PADDED_VAR(int32_t, m_indexPelvis, m_indexPelvis, 192);
		MAKE_PADDED_VAR(int32_t, m_indexTorso1, m_indexTorso1, 196);
		MAKE_PADDED_VAR(int32_t, m_indexTorso2, m_indexTorso2, 200);
		MAKE_PADDED_VAR(int32_t, m_indexTorso3, m_indexTorso3, 204);
		MAKE_PADDED_VAR(int32_t, m_indexNeck, m_indexNeck, 208);
		MAKE_PADDED_VAR(int32_t, m_indexHead, m_indexHead, 212);
		MAKE_PADDED_VAR(int32_t, m_indexShoulderL, m_indexShoulderL, 216);
		MAKE_PADDED_VAR(int32_t, m_indexBicepL, m_indexBicepL, 220);
		MAKE_PADDED_VAR(int32_t, m_indexForearmL, m_indexForearmL, 224);
		MAKE_PADDED_VAR(int32_t, m_indexHandL, m_indexHandL, 228);
		MAKE_PADDED_VAR(int32_t, m_indexWeaponL, m_indexWeaponL, 232);
		MAKE_PADDED_VAR(int32_t, m_indexShoulderR, m_indexShoulderR, 236);
		MAKE_PADDED_VAR(int32_t, m_indexBicepR, m_indexBicepR, 240);
		MAKE_PADDED_VAR(int32_t, m_indexForearmR, m_indexForearmR, 244);
		MAKE_PADDED_VAR(int32_t, m_indexHandR, m_indexHandR, 248);
		MAKE_PADDED_VAR(int32_t, m_indexWeaponR, m_indexWeaponR, 252);
		MAKE_PADDED_VAR(int32_t, m_indexThighL, m_indexThighL, 256);
		MAKE_PADDED_VAR(int32_t, m_indexShinL, m_indexShinL, 260);
		MAKE_PADDED_VAR(int32_t, m_indexFootL, m_indexFootL, 264);
		MAKE_PADDED_VAR(int32_t, m_indexToeL, m_indexToeL, 268);
		MAKE_PADDED_VAR(int32_t, m_indexThighR, m_indexThighR, 272);
		MAKE_PADDED_VAR(int32_t, m_indexShinR, m_indexShinR, 276);
		MAKE_PADDED_VAR(int32_t, m_indexFootR, m_indexFootR, 280);
		MAKE_PADDED_VAR(int32_t, m_indexToeR, m_indexToeR, 284);
		MAKE_PADDED_VAR(intptr_t, m_pelvisUpDir, m_pelvisUpDir, 288);
		MAKE_PADDED_VAR(intptr_t, m_torso1UpDir, m_torso1UpDir, 292);
		MAKE_PADDED_VAR(intptr_t, m_torso2UpDir, m_torso2UpDir, 296);
		MAKE_PADDED_VAR(intptr_t, m_torso3UpDir, m_torso3UpDir, 300);
	};
};

class VirtualAnimation {
public:
	union {
	int32_t m_name;
		MAKE_PADDED_VAR(float, m_time, m_time, 4);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 8);
		MAKE_PADDED_VAR(float, m_endTime, m_endTime, 12);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 16);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 20);
		MAKE_PADDED_VAR(int32_t, m_track, m_track, 24);
		MAKE_PADDED_VAR(bool, m_useMotion, m_useMotion, 28);
		MAKE_PADDED_VAR(int32_t*, m_bones[2], m_bones, 32);
		MAKE_PADDED_VAR(float*, m_weights[2], m_weights, 44);
		MAKE_PADDED_VAR(int32_t, m_boneToExtract, m_boneToExtract, 56);
		MAKE_PADDED_VAR(CSkeletalAnimationSet, m_animset, m_animset, 64);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 104);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 108);
	};
};

class W3AbilityManager {
public:
	union {
	IScriptable iscriptable;
		MAKE_PADDED_VAR(intptr_t, m_owner, m_owner, 56);
		MAKE_PADDED_VAR(CCharacterStats, m_charStats, m_charStats, 64);
		MAKE_PADDED_VAR(intptr_t, m_usedDifficultyMode, m_usedDifficultyMode, 72);
		MAKE_PADDED_VAR(intptr_t, m_usedHealthType, m_usedHealthType, 76);
		MAKE_PADDED_VAR(bool, m_ignoresDifficultySettings, m_ignoresDifficultySettings, 80);
		MAKE_PADDED_VAR(int32_t**, m_difficultyAbilities[2][2], m_difficultyAbilities, 84);
		MAKE_PADDED_VAR(SBaseStat*, m_statPoints[2], m_statPoints, 96);
		MAKE_PADDED_VAR(SResistanceValue*, m_resistStats[2], m_resistStats, 108);
		MAKE_PADDED_VAR(SBlockedAbility*, m_blockedAbilities[2], m_blockedAbilities, 120);
	};
};

class CActionBroadcastEvent {
public:
	union {
	IEntityTargetingAction ientitytargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(int32_t, m_eventToBrodecast, m_eventToBrodecast, 112);
	};
};

class CAnimDangleConstraint_Breast {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
		MAKE_PADDED_VAR(intptr_t, m_preset, m_preset, 216);
		MAKE_PADDED_VAR(Vector, m_elA, m_elA, 992);
		MAKE_PADDED_VAR(float, m_simTime, m_simTime, 1024);
		MAKE_PADDED_VAR(float, m_velDamp, m_velDamp, 1028);
		MAKE_PADDED_VAR(float, m_bounceDamp, m_bounceDamp, 1032);
		MAKE_PADDED_VAR(float, m_inAcc, m_inAcc, 1036);
		MAKE_PADDED_VAR(float, m_inertiaScaler, m_inertiaScaler, 1040);
		MAKE_PADDED_VAR(float, m_blackHole, m_blackHole, 1044);
		MAKE_PADDED_VAR(float, m_velClamp, m_velClamp, 1048);
		MAKE_PADDED_VAR(float, m_gravity, m_gravity, 1052);
		MAKE_PADDED_VAR(float, m_movementBoneWeight, m_movementBoneWeight, 1056);
		MAKE_PADDED_VAR(float, m_rotationBoneWeight, m_rotationBoneWeight, 1060);
		MAKE_PADDED_VAR(float, m_startSimPointOffset, m_startSimPointOffset, 1064);
	};
};

class CAnimDangleConstraint_Collar {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
		MAKE_PADDED_VAR(Vector, m_offset, m_offset, 208);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 224);
		MAKE_PADDED_VAR(Vector, m_offset2, m_offset2, 240);
		MAKE_PADDED_VAR(float, m_radius2, m_radius2, 256);
	};
};

class CAnimDangleConstraint_Dress {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
		MAKE_PADDED_VAR(float, m_thighBoneWeight, m_thighBoneWeight, 212);
		MAKE_PADDED_VAR(float, m_shinBoneWeight, m_shinBoneWeight, 216);
		MAKE_PADDED_VAR(float, m_kneeRollBoneWeight, m_kneeRollBoneWeight, 220);
		MAKE_PADDED_VAR(float, m_ofweight, m_ofweight, 224);
		MAKE_PADDED_VAR(Vector, m_p1, m_p1, 240);
		MAKE_PADDED_VAR(Vector, m_p2, m_p2, 256);
		MAKE_PADDED_VAR(Vector, m_p3, m_p3, 272);
		MAKE_PADDED_VAR(Vector, m_r1, m_r1, 288);
		MAKE_PADDED_VAR(Vector, m_r2, m_r2, 304);
		MAKE_PADDED_VAR(Vector, m_r3, m_r3, 320);
	};
};

class CAnimDangleConstraint_Dyng {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
		MAKE_PADDED_VAR(CDyngResource, m_dyng, m_dyng, 208);
		MAKE_PADDED_VAR(CSkeletalAnimationSet, m_animSet, m_animSet, 216);
		MAKE_PADDED_VAR(bool, m_drawlinks, m_drawlinks, 224);
		MAKE_PADDED_VAR(bool, m_drawcolls, m_drawcolls, 225);
		MAKE_PADDED_VAR(bool, m_drawlimits, m_drawlimits, 226);
		MAKE_PADDED_VAR(float, m_dampening, m_dampening, 228);
		MAKE_PADDED_VAR(float, m_gravity, m_gravity, 232);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 236);
		MAKE_PADDED_VAR(float, m_shake, m_shake, 240);
		MAKE_PADDED_VAR(float, m_wind, m_wind, 244);
		MAKE_PADDED_VAR(int32_t, m_max_links_iterations, m_max_links_iterations, 248);
		MAKE_PADDED_VAR(bool, m_planeCollision, m_planeCollision, 484);
		MAKE_PADDED_VAR(bool, m_useOffsets, m_useOffsets, 488);
	};
};

class CAnimDangleConstraint_Hinge {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 208);
		MAKE_PADDED_VAR(float, m_limit, m_limit, 212);
		MAKE_PADDED_VAR(float, m_bounce, m_bounce, 216);
		MAKE_PADDED_VAR(float, m_damp, m_damp, 220);
		MAKE_PADDED_VAR(float, m_min, m_min, 224);
		MAKE_PADDED_VAR(float, m_max, m_max, 228);
		MAKE_PADDED_VAR(float, m_inertia, m_inertia, 232);
		MAKE_PADDED_VAR(char*, m_name, m_name, 236);
		MAKE_PADDED_VAR(float, m_gravity, m_gravity, 248);
		MAKE_PADDED_VAR(float, m_spring, m_spring, 252);
	};
};

class CAnimDangleConstraint_Hood {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
		MAKE_PADDED_VAR(Vector, m_offset, m_offset, 208);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 224);
	};
};

class CAnimDangleConstraint_Pusher {
public:
	union {
	CAnimSkeletalDangleConstraint canimskeletaldangleconstraint;
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 88);
		MAKE_PADDED_VAR(bool, m_dispSkeleton, m_dispSkeleton, 96);
		MAKE_PADDED_VAR(bool, m_dispBoneNames, m_dispBoneNames, 97);
		MAKE_PADDED_VAR(bool, m_dispBoneAxis, m_dispBoneAxis, 98);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 208);
		MAKE_PADDED_VAR(char*, m_collisionName, m_collisionName, 220);
		MAKE_PADDED_VAR(Vector, m_offset, m_offset, 240);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 256);
		MAKE_PADDED_VAR(float, m_maxAngle, m_maxAngle, 260);
	};
};

class CBaseQuestScriptedActionsBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 288);
		MAKE_PADDED_VAR(intptr_t, m_actionsPriority, m_actionsPriority, 304);
		MAKE_PADDED_VAR(bool, m_onlyOneActor, m_onlyOneActor, 308);
		MAKE_PADDED_VAR(bool, m_handleBehaviorOutcome, m_handleBehaviorOutcome, 309);
	};
};

class CBehaviorConstraintApplyOffset {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
	};
};

class CBehaviorConstraintCalcAdSetOffsetForPelvis {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_pelvisBoneName, m_pelvisBoneName, 248);
	};
};

class CBehaviorConstraintMoveHandsByOffset {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftHand, m_leftHand, 288);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightHand, m_rightHand, 496);
	};
};

class CBehaviorConstraintNodeFloorIKBase {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKCommonData, m_common, m_common, 288);
		MAKE_PADDED_VAR(bool, m_canBeDisabledDueToFrameRate, m_canBeDisabledDueToFrameRate, 312);
		MAKE_PADDED_VAR(int32_t, m_requiredAnimEvent, m_requiredAnimEvent, 316);
		MAKE_PADDED_VAR(int32_t, m_blockAnimEvent, m_blockAnimEvent, 320);
		MAKE_PADDED_VAR(bool, m_useFixedVersion, m_useFixedVersion, 324);
		MAKE_PADDED_VAR(float, m_slopeAngleDamp, m_slopeAngleDamp, 328);
	};
};

class CBehaviorConstraintNodeFloorIKBipedLong {
public:
	union {
	CBehaviorConstraintNodeFloorIKBase cbehaviorconstraintnodefloorikbase;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKCommonData, m_common, m_common, 288);
		MAKE_PADDED_VAR(bool, m_canBeDisabledDueToFrameRate, m_canBeDisabledDueToFrameRate, 312);
		MAKE_PADDED_VAR(int32_t, m_requiredAnimEvent, m_requiredAnimEvent, 316);
		MAKE_PADDED_VAR(int32_t, m_blockAnimEvent, m_blockAnimEvent, 320);
		MAKE_PADDED_VAR(bool, m_useFixedVersion, m_useFixedVersion, 324);
		MAKE_PADDED_VAR(float, m_slopeAngleDamp, m_slopeAngleDamp, 328);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_pelvis, m_pelvis, 432);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKLegsData, m_legs, m_legs, 456);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftLegIK, m_leftLegIK, 512);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightLegIK, m_rightLegIK, 720);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_leftShoulder, m_leftShoulder, 928);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_rightShoulder, m_rightShoulder, 952);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKMaintainLookBoneData, m_neck1MaintainLook, m_neck1MaintainLook, 976);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKMaintainLookBoneData, m_neck2MaintainLook, m_neck2MaintainLook, 984);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKMaintainLookBoneData, m_headMaintainLook, m_headMaintainLook, 992);
		MAKE_PADDED_VAR(float, m_speedForFullyPerpendicularLegs, m_speedForFullyPerpendicularLegs, 1000);
		MAKE_PADDED_VAR(Vector, m_upDirAdditionalWS, m_upDirAdditionalWS, 1008);
	};
};

class CBehaviorConstraintNodeFloorIKHandsOnly {
public:
	union {
	CBehaviorConstraintNodeFloorIKBase cbehaviorconstraintnodefloorikbase;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKCommonData, m_common, m_common, 288);
		MAKE_PADDED_VAR(bool, m_canBeDisabledDueToFrameRate, m_canBeDisabledDueToFrameRate, 312);
		MAKE_PADDED_VAR(int32_t, m_requiredAnimEvent, m_requiredAnimEvent, 316);
		MAKE_PADDED_VAR(int32_t, m_blockAnimEvent, m_blockAnimEvent, 320);
		MAKE_PADDED_VAR(bool, m_useFixedVersion, m_useFixedVersion, 324);
		MAKE_PADDED_VAR(float, m_slopeAngleDamp, m_slopeAngleDamp, 328);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKLegsData, m_hands, m_hands, 432);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftHandIK, m_leftHandIK, 480);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightHandIK, m_rightHandIK, 688);
	};
};

class CBehaviorConstraintNodeFloorIKQuadruped {
public:
	union {
	CBehaviorConstraintNodeFloorIKBase cbehaviorconstraintnodefloorikbase;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKCommonData, m_common, m_common, 288);
		MAKE_PADDED_VAR(bool, m_canBeDisabledDueToFrameRate, m_canBeDisabledDueToFrameRate, 312);
		MAKE_PADDED_VAR(int32_t, m_requiredAnimEvent, m_requiredAnimEvent, 316);
		MAKE_PADDED_VAR(int32_t, m_blockAnimEvent, m_blockAnimEvent, 320);
		MAKE_PADDED_VAR(bool, m_useFixedVersion, m_useFixedVersion, 324);
		MAKE_PADDED_VAR(float, m_slopeAngleDamp, m_slopeAngleDamp, 328);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_pelvis, m_pelvis, 432);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKLegsData, m_legs, m_legs, 456);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftFrontLegIK, m_leftFrontLegIK, 512);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightFrontLegIK, m_rightFrontLegIK, 720);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftBackLegIK, m_leftBackLegIK, 928);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightBackLegIK, m_rightBackLegIK, 1136);
		MAKE_PADDED_VAR(SApplyRotationIKSolverData, m_leftFrontLegRotIK, m_leftFrontLegRotIK, 1344);
		MAKE_PADDED_VAR(SApplyRotationIKSolverData, m_rightFrontLegRotIK, m_rightFrontLegRotIK, 1348);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_leftFrontShoulder, m_leftFrontShoulder, 1352);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_rightFrontShoulder, m_rightFrontShoulder, 1376);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_leftBackShoulder, m_leftBackShoulder, 1400);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_rightBackShoulder, m_rightBackShoulder, 1424);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKMaintainLookBoneData, m_neck1MaintainLook, m_neck1MaintainLook, 1448);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKMaintainLookBoneData, m_neck2MaintainLook, m_neck2MaintainLook, 1456);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKMaintainLookBoneData, m_headMaintainLook, m_headMaintainLook, 1464);
		MAKE_PADDED_VAR(float, m_speedForFullyPerpendicularLegs, m_speedForFullyPerpendicularLegs, 1472);
		MAKE_PADDED_VAR(float, m_upDirFromFrontAndBackLegsDiffCoef, m_upDirFromFrontAndBackLegsDiffCoef, 1476);
		MAKE_PADDED_VAR(float, m_upDirUseFrontAndBackLegsDiff, m_upDirUseFrontAndBackLegsDiff, 1480);
		MAKE_PADDED_VAR(Vector, m_upDirAdditionalWS, m_upDirAdditionalWS, 1488);
	};
};

class CBehaviorConstraintNodeFloorIKSixLegs {
public:
	union {
	CBehaviorConstraintNodeFloorIKBase cbehaviorconstraintnodefloorikbase;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKCommonData, m_common, m_common, 288);
		MAKE_PADDED_VAR(bool, m_canBeDisabledDueToFrameRate, m_canBeDisabledDueToFrameRate, 312);
		MAKE_PADDED_VAR(int32_t, m_requiredAnimEvent, m_requiredAnimEvent, 316);
		MAKE_PADDED_VAR(int32_t, m_blockAnimEvent, m_blockAnimEvent, 320);
		MAKE_PADDED_VAR(bool, m_useFixedVersion, m_useFixedVersion, 324);
		MAKE_PADDED_VAR(float, m_slopeAngleDamp, m_slopeAngleDamp, 328);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_pelvis, m_pelvis, 432);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKLegsData, m_legs, m_legs, 456);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftFrontLegIK, m_leftFrontLegIK, 512);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightFrontLegIK, m_rightFrontLegIK, 720);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftMiddleLegIK, m_leftMiddleLegIK, 928);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightMiddleLegIK, m_rightMiddleLegIK, 1136);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftBackLegIK, m_leftBackLegIK, 1344);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightBackLegIK, m_rightBackLegIK, 1552);
		MAKE_PADDED_VAR(float, m_usePerpendicularUprightWS, m_usePerpendicularUprightWS, 1760);
		MAKE_PADDED_VAR(float, m_upDirUseFromLegsHitLocs, m_upDirUseFromLegsHitLocs, 1764);
		MAKE_PADDED_VAR(Vector, m_upDirAdditionalWS, m_upDirAdditionalWS, 1776);
	};
};

class CBehaviorConstraintPullReinsToHands {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintPullReinToHandData, m_leftHand, m_leftHand, 288);
		MAKE_PADDED_VAR(SBehaviorConstraintPullReinToHandData, m_rightHand, m_rightHand, 336);
	};
};

class CBehaviorConstraintPullStirrupsToLegs {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintPullStirrupToLegData, m_leftLeg, m_leftLeg, 288);
		MAKE_PADDED_VAR(SBehaviorConstraintPullStirrupToLegData, m_rightLeg, m_rightLeg, 384);
	};
};

class CBehaviorConstraintPutLegsIntoStirrups {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintPutLegIntoStirrupData, m_leftLeg, m_leftLeg, 288);
		MAKE_PADDED_VAR(SBehaviorConstraintPutLegIntoStirrupData, m_rightLeg, m_rightLeg, 528);
	};
};

class CBehaviorConstraintRiderInSaddle {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(int32_t, m_bone, m_bone, 288);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 292);
		MAKE_PADDED_VAR(float, m_blendRotation, m_blendRotation, 296);
	};
};

class CBehaviorConstraintStirrups {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintStirrupsCommmonData, m_common, m_common, 288);
		MAKE_PADDED_VAR(SBehaviorConstraintStirrupData, m_left, m_left, 296);
		MAKE_PADDED_VAR(SBehaviorConstraintStirrupData, m_right, m_right, 300);
	};
};

class CBehaviorConstraintUprightSpine {
public:
	union {
	CBehaviorGraphPoseConstraintNode cbehaviorgraphposeconstraintnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintUprightSpineBonesData, m_bones, m_bones, 288);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftHandIK, m_leftHandIK, 320);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightHandIK, m_rightHandIK, 528);
		MAKE_PADDED_VAR(float, m_matchEntityFullSpeed, m_matchEntityFullSpeed, 736);
	};
};

class CBehaviorGraphActorTiltNode {
public:
	union {
	CBehaviorGraphPivotRotationNode cbehaviorgraphpivotrotationnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_boneName, m_boneName, 248);
		MAKE_PADDED_VAR(char*, m_pivotBoneName, m_pivotBoneName, 260);
		MAKE_PADDED_VAR(intptr_t, m_axis, m_axis, 272);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 276);
		MAKE_PADDED_VAR(float, m_biasAngle, m_biasAngle, 280);
		MAKE_PADDED_VAR(float, m_minAngle, m_minAngle, 284);
		MAKE_PADDED_VAR(float, m_maxAngle, m_maxAngle, 288);
		MAKE_PADDED_VAR(bool, m_clampRotation, m_clampRotation, 292);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 344);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleMinNode, m_cachedAngleMinNode, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedAngleMaxNode, m_cachedAngleMaxNode, 360);
		MAKE_PADDED_VAR(float, m_scaleFactor, m_scaleFactor, 368);
		MAKE_PADDED_VAR(intptr_t, m_scaleAxis, m_scaleAxis, 372);
		MAKE_PADDED_VAR(char*, m_leftThighBone, m_leftThighBone, 376);
		MAKE_PADDED_VAR(char*, m_leftShinBone, m_leftShinBone, 388);
		MAKE_PADDED_VAR(char*, m_rightThighBone, m_rightThighBone, 400);
		MAKE_PADDED_VAR(char*, m_rightShinBone, m_rightShinBone, 412);
		MAKE_PADDED_VAR(float, m_leftThighWeight, m_leftThighWeight, 424);
		MAKE_PADDED_VAR(float, m_leftShinWeight, m_leftShinWeight, 428);
		MAKE_PADDED_VAR(float, m_rightThighWeight, m_rightThighWeight, 432);
		MAKE_PADDED_VAR(float, m_rightShinWeight, m_rightShinWeight, 436);
	};
};

class CBehaviorGraphAdjustDirectionNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_animDirectionChange, m_animDirectionChange, 240);
		MAKE_PADDED_VAR(bool, m_updateAnimDirectionChangeFromAnimation, m_updateAnimDirectionChangeFromAnimation, 244);
		MAKE_PADDED_VAR(float, m_maxDirectionDiff, m_maxDirectionDiff, 248);
		MAKE_PADDED_VAR(float, m_maxOppositeDirectionDiff, m_maxOppositeDirectionDiff, 252);
		MAKE_PADDED_VAR(int32_t, m_basedOnEvent, m_basedOnEvent, 256);
		MAKE_PADDED_VAR(bool, m_basedOnEventOverrideAnimation, m_basedOnEventOverrideAnimation, 260);
		MAKE_PADDED_VAR(float, m_adjustmentBlendSpeed, m_adjustmentBlendSpeed, 264);
		MAKE_PADDED_VAR(int32_t, m_requestedMovementDirectionVariableName, m_requestedMovementDirectionVariableName, 268);
		MAKE_PADDED_VAR(intptr_t, m_cachedRequestedMovementDirectionWSValueNode, m_cachedRequestedMovementDirectionWSValueNode, 416);
	};
};

class CBehaviorGraphAlignToGroundNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_groundNormalBlendTime, m_groundNormalBlendTime, 240);
		MAKE_PADDED_VAR(float, m_additionalOffset, m_additionalOffset, 244);
		MAKE_PADDED_VAR(bool, m_eatEvent, m_eatEvent, 248);
	};
};

class CBehaviorGraphAnimationBaseSlotNode {
public:
	union {
	CBehaviorGraphMimicsAnimationNode cbehaviorgraphmimicsanimationnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
	};
};

class CBehaviorGraphAnimationEnumSwitchNode {
public:
	union {
	CBehaviorGraphAnimationSwitchNode cbehaviorgraphanimationswitchnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 232);
		MAKE_PADDED_VAR(uint32_t, m_inputNum, m_inputNum, 236);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_synchronizeOnSwitch, m_synchronizeOnSwitch, 244);
		MAKE_PADDED_VAR(intptr_t, m_syncOnSwitchMethod, m_syncOnSwitchMethod, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 368);
		MAKE_PADDED_VAR(intptr_t, m_cachedBlendTimeValueNode, m_cachedBlendTimeValueNode, 376);
		MAKE_PADDED_VAR(int32_t, m_enum, m_enum, 384);
		MAKE_PADDED_VAR(int32_t, m_firstInputNum, m_firstInputNum, 388);
	};
};

class CBehaviorGraphAnimationExtNode {
public:
	union {
	CBehaviorGraphAnimationNode cbehaviorgraphanimationnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(float, m_animStartOffset, m_animStartOffset, 488);
		MAKE_PADDED_VAR(float, m_fireLoopEventBackOffset, m_fireLoopEventBackOffset, 492);
	};
};

class CBehaviorGraphAnimationInputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphAnimationLipsyncSlotNode {
public:
	union {
	CBehaviorGraphAnimationBaseSlotNode cbehaviorgraphanimationbaseslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseAnimInputNode, m_cachedBaseAnimInputNode, 696);
		MAKE_PADDED_VAR(intptr_t, m_cachedAdditiveAnimInputNode, m_cachedAdditiveAnimInputNode, 704);
	};
};

class CBehaviorGraphAnimationManualSwitchNode {
public:
	union {
	CBehaviorGraphAnimationSwitchNode cbehaviorgraphanimationswitchnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 232);
		MAKE_PADDED_VAR(uint32_t, m_inputNum, m_inputNum, 236);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_synchronizeOnSwitch, m_synchronizeOnSwitch, 244);
		MAKE_PADDED_VAR(intptr_t, m_syncOnSwitchMethod, m_syncOnSwitchMethod, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 368);
		MAKE_PADDED_VAR(intptr_t, m_cachedBlendTimeValueNode, m_cachedBlendTimeValueNode, 376);
	};
};

class CBehaviorGraphAnimationMixerSlotNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(bool, m_bodyOrMimicMode, m_bodyOrMimicMode, 248);
		MAKE_PADDED_VAR(bool, m_canUseIdles, m_canUseIdles, 249);
		MAKE_PADDED_VAR(intptr_t, m_postIdleAdditiveType, m_postIdleAdditiveType, 252);
		MAKE_PADDED_VAR(intptr_t, m_postAllAdditiveType, m_postAllAdditiveType, 256);
		MAKE_PADDED_VAR(int32_t*, m_fullEyesWeightMimicsTracks[2], m_fullEyesWeightMimicsTracks, 260);
		MAKE_PADDED_VAR(intptr_t, m_cachedPostIdleNodeA, m_cachedPostIdleNodeA, 496);
		MAKE_PADDED_VAR(intptr_t, m_cachedPostIdleNodeB, m_cachedPostIdleNodeB, 504);
		MAKE_PADDED_VAR(intptr_t, m_cachedPostAllNodeA, m_cachedPostAllNodeA, 512);
		MAKE_PADDED_VAR(intptr_t, m_cachedPostAllNodeB, m_cachedPostAllNodeB, 520);
	};
};

class CBehaviorGraphAnimationOutputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphAnimationRandomSwitchNode {
public:
	union {
	CBehaviorGraphAnimationManualSwitchNode cbehaviorgraphanimationmanualswitchnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 232);
		MAKE_PADDED_VAR(uint32_t, m_inputNum, m_inputNum, 236);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_synchronizeOnSwitch, m_synchronizeOnSwitch, 244);
		MAKE_PADDED_VAR(intptr_t, m_syncOnSwitchMethod, m_syncOnSwitchMethod, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 368);
		MAKE_PADDED_VAR(intptr_t, m_cachedBlendTimeValueNode, m_cachedBlendTimeValueNode, 376);
		MAKE_PADDED_VAR(bool, m_randOnlyOnce, m_randOnlyOnce, 384);
	};
};

class CBehaviorGraphAnimationSlotNode {
public:
	union {
	CBehaviorGraphAnimationBaseSlotNode cbehaviorgraphanimationbaseslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
	};
};

class CBehaviorGraphAnimationSlotWithCurveNode {
public:
	union {
	CBehaviorGraphAnimationSlotNode cbehaviorgraphanimationslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 920);
	};
};

class CBehaviorGraphBaseMimicNode {
public:
	union {
	CBehaviorGraphBaseNode cbehaviorgraphbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
	};
};

class CBehaviorGraphCameraVerticalDampNode {
public:
	union {
	CBehaviorGraphVectorValueBaseNode cbehaviorgraphvectorvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_length, m_length, 256);
		MAKE_PADDED_VAR(float, m_dampSpeed, m_dampSpeed, 260);
	};
};

class CBehaviorGraphComboStateNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(SBehaviorComboWay*, m_comboWays[2], m_comboWays, 368);
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 380);
		MAKE_PADDED_VAR(float, m_blendForAnim, m_blendForAnim, 384);
		MAKE_PADDED_VAR(float, m_blendInternal, m_blendInternal, 388);
		MAKE_PADDED_VAR(uint32_t, m_maxLevel, m_maxLevel, 392);
		MAKE_PADDED_VAR(bool, m_isConnected, m_isConnected, 396);
		MAKE_PADDED_VAR(int32_t, m_comboEvent, m_comboEvent, 412);
		MAKE_PADDED_VAR(int32_t, m_finishedEvent, m_finishedEvent, 416);
		MAKE_PADDED_VAR(int32_t, m_varComboWay, m_varComboWay, 420);
		MAKE_PADDED_VAR(int32_t, m_varComboDist, m_varComboDist, 424);
		MAKE_PADDED_VAR(int32_t, m_varComboDir, m_varComboDir, 428);
		MAKE_PADDED_VAR(intptr_t, m_slotA, m_slotA, 624);
		MAKE_PADDED_VAR(intptr_t, m_slotB, m_slotB, 632);
	};
};

class CBehaviorGraphCurveDampValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 256);
		MAKE_PADDED_VAR(float, m_abscissaAxisScale, m_abscissaAxisScale, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedDurationValueNode, m_cachedDurationValueNode, 320);
	};
};

class CBehaviorGraphCurveMapValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 256);
		MAKE_PADDED_VAR(float, m_axisXScale, m_axisXScale, 264);
		MAKE_PADDED_VAR(float, m_valueScale, m_valueScale, 268);
		MAKE_PADDED_VAR(float, m_valueOffet, m_valueOffet, 272);
		MAKE_PADDED_VAR(bool, m_mirrorY, m_mirrorY, 276);
	};
};

class CBehaviorGraphCustomDampValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 256);
		MAKE_PADDED_VAR(float, m_directionalAcc_MaxAccDiffFromZero, m_directionalAcc_MaxAccDiffFromZero, 260);
		MAKE_PADDED_VAR(float, m_directionalAcc_MaxAccDiffToZero, m_directionalAcc_MaxAccDiffToZero, 264);
		MAKE_PADDED_VAR(float, m_filterLowPass_RC, m_filterLowPass_RC, 268);
	};
};

class CBehaviorGraphDampAngularValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 256);
		MAKE_PADDED_VAR(bool, m_isDegree, m_isDegree, 260);
	};
};

class CBehaviorGraphDampAngularValueNodeDiff {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 256);
		MAKE_PADDED_VAR(bool, m_isDegree, m_isDegree, 260);
	};
};

class CBehaviorGraphDampValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_increaseSpeed, m_increaseSpeed, 256);
		MAKE_PADDED_VAR(float, m_decreaseSpeed, m_decreaseSpeed, 260);
		MAKE_PADDED_VAR(bool, m_absolute, m_absolute, 264);
		MAKE_PADDED_VAR(bool, m_startFromDefault, m_startFromDefault, 265);
		MAKE_PADDED_VAR(float, m_defaultValue, m_defaultValue, 268);
		MAKE_PADDED_VAR(intptr_t, m_cachedDefaultValNode, m_cachedDefaultValNode, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedIncSpeedNode, m_cachedIncSpeedNode, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedDecSpeedNode, m_cachedDecSpeedNode, 288);
	};
};

class CBehaviorGraphDefaultSelfActAdditiveStateNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
	};
};

class CBehaviorGraphDefaultSelfActStateNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
	};
};

class CBehaviorGraphDefensiveComboStateNode {
public:
	union {
	CBehaviorGraphComboStateNode cbehaviorgraphcombostatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(SBehaviorComboWay*, m_comboWays[2], m_comboWays, 368);
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 380);
		MAKE_PADDED_VAR(float, m_blendForAnim, m_blendForAnim, 384);
		MAKE_PADDED_VAR(float, m_blendInternal, m_blendInternal, 388);
		MAKE_PADDED_VAR(uint32_t, m_maxLevel, m_maxLevel, 392);
		MAKE_PADDED_VAR(bool, m_isConnected, m_isConnected, 396);
		MAKE_PADDED_VAR(int32_t, m_comboEvent, m_comboEvent, 412);
		MAKE_PADDED_VAR(int32_t, m_finishedEvent, m_finishedEvent, 416);
		MAKE_PADDED_VAR(int32_t, m_varComboWay, m_varComboWay, 420);
		MAKE_PADDED_VAR(int32_t, m_varComboDist, m_varComboDist, 424);
		MAKE_PADDED_VAR(int32_t, m_varComboDir, m_varComboDir, 428);
		MAKE_PADDED_VAR(intptr_t, m_slotA, m_slotA, 624);
		MAKE_PADDED_VAR(intptr_t, m_slotB, m_slotB, 632);
		MAKE_PADDED_VAR(int32_t, m_varHitTime, m_varHitTime, 640);
		MAKE_PADDED_VAR(int32_t, m_varLevel, m_varLevel, 644);
		MAKE_PADDED_VAR(int32_t, m_varParry, m_varParry, 648);
		MAKE_PADDED_VAR(int32_t*, m_defaultHits[2], m_defaultHits, 652);
	};
};

class CBehaviorGraphExactlyAnimationInputSocket {
public:
	union {
	CBehaviorGraphAnimationInputSocket cbehaviorgraphanimationinputsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphFlowConnectionNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(int32_t, m_stateID, m_stateID, 360);
		MAKE_PADDED_VAR(intptr_t, m_animNode, m_animNode, 368);
	};
};

class CBehaviorGraphFrozenStateNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
	};
};

class CBehaviorGraphGetCustomTrackNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(int32_t, m_trackIndex, m_trackIndex, 256);
		MAKE_PADDED_VAR(float, m_defaultValue, m_defaultValue, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedAnimInputNode, m_cachedAnimInputNode, 272);
	};
};

class CBehaviorGraphGetFloatTrackNode {
public:
	union {
	CBehaviorGraphGetCustomTrackNode cbehaviorgraphgetcustomtracknode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(int32_t, m_trackIndex, m_trackIndex, 256);
		MAKE_PADDED_VAR(float, m_defaultValue, m_defaultValue, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedAnimInputNode, m_cachedAnimInputNode, 272);
	};
};

class CBehaviorGraphLatchForSomeTimeValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_minTime, m_minTime, 256);
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 260);
	};
};

class CBehaviorGraphLatchValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 256);
	};
};

class CBehaviorGraphLatchVectorValueNode {
public:
	union {
	CBehaviorGraphVectorValueBaseNode cbehaviorgraphvectorvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
	};
};

class CBehaviorGraphLipsyncControlValueCorrectionNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_lipsyncControlTrack, m_lipsyncControlTrack, 240);
		MAKE_PADDED_VAR(float, m_smoothTime, m_smoothTime, 244);
		MAKE_PADDED_VAR(int32_t, m_startCorrEventName, m_startCorrEventName, 248);
	};
};

class CBehaviorGraphLookAtUsingAnimationsCommonBaseNode {
public:
	union {
	CBehaviorGraphLookAtUsingAnimationsProcessingNode cbehaviorgraphlookatusinganimationsprocessingnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(Vector2, m_Angle_limit, m_Angle_limit, 232);
		MAKE_PADDED_VAR(Vector2, m_Animation_angle_range, m_Animation_angle_range, 240);
		MAKE_PADDED_VAR(float, m_Angle_to_stop_looking, m_Angle_to_stop_looking, 248);
		MAKE_PADDED_VAR(float, m_Max__Look_at__speed, m_Max__Look_at__speed, 252);
		MAKE_PADDED_VAR(float, m_Look_at__blend_time, m_Look_at__blend_time, 256);
		MAKE_PADDED_VAR(float, m_On__Off_blend_time, m_On__Off_blend_time, 260);
		MAKE_PADDED_VAR(int32_t, m_Bone_name, m_Bone_name, 268);
		MAKE_PADDED_VAR(bool, m_Use_char__rotation, m_Use_char__rotation, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 424);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtVariableNode, m_cachedLookAtVariableNode, 432);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 440);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtBlendTimeNode, m_cachedLookAtBlendTimeNode, 448);
		MAKE_PADDED_VAR(intptr_t, m_Additive_blend_type, m_Additive_blend_type, 456);
		MAKE_PADDED_VAR(bool, m_Horizontal_blend_is_first, m_Horizontal_blend_is_first, 460);
		MAKE_PADDED_VAR(bool, m_Alternative_additive_mapping, m_Alternative_additive_mapping, 461);
	};
};

class CBehaviorGraphLookAtUsingAnimationsNode {
public:
	union {
	CBehaviorGraphLookAtUsingAnimationsCommonBaseNode cbehaviorgraphlookatusinganimationscommonbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(Vector2, m_Angle_limit, m_Angle_limit, 232);
		MAKE_PADDED_VAR(Vector2, m_Animation_angle_range, m_Animation_angle_range, 240);
		MAKE_PADDED_VAR(float, m_Angle_to_stop_looking, m_Angle_to_stop_looking, 248);
		MAKE_PADDED_VAR(float, m_Max__Look_at__speed, m_Max__Look_at__speed, 252);
		MAKE_PADDED_VAR(float, m_Look_at__blend_time, m_Look_at__blend_time, 256);
		MAKE_PADDED_VAR(float, m_On__Off_blend_time, m_On__Off_blend_time, 260);
		MAKE_PADDED_VAR(int32_t, m_Bone_name, m_Bone_name, 268);
		MAKE_PADDED_VAR(bool, m_Use_char__rotation, m_Use_char__rotation, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 424);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtVariableNode, m_cachedLookAtVariableNode, 432);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 440);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtBlendTimeNode, m_cachedLookAtBlendTimeNode, 448);
		MAKE_PADDED_VAR(intptr_t, m_Additive_blend_type, m_Additive_blend_type, 456);
		MAKE_PADDED_VAR(bool, m_Horizontal_blend_is_first, m_Horizontal_blend_is_first, 460);
		MAKE_PADDED_VAR(bool, m_Alternative_additive_mapping, m_Alternative_additive_mapping, 461);
		MAKE_PADDED_VAR(intptr_t, m_cachedVerticalAdditiveInputNode, m_cachedVerticalAdditiveInputNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedHorizontalAdditiveInputNode, m_cachedHorizontalAdditiveInputNode, 472);
	};
};

class CBehaviorGraphLookAtUsingEmbeddedAnimationsNode {
public:
	union {
	CBehaviorGraphLookAtUsingAnimationsCommonBaseNode cbehaviorgraphlookatusinganimationscommonbasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(Vector2, m_Angle_limit, m_Angle_limit, 232);
		MAKE_PADDED_VAR(Vector2, m_Animation_angle_range, m_Animation_angle_range, 240);
		MAKE_PADDED_VAR(float, m_Angle_to_stop_looking, m_Angle_to_stop_looking, 248);
		MAKE_PADDED_VAR(float, m_Max__Look_at__speed, m_Max__Look_at__speed, 252);
		MAKE_PADDED_VAR(float, m_Look_at__blend_time, m_Look_at__blend_time, 256);
		MAKE_PADDED_VAR(float, m_On__Off_blend_time, m_On__Off_blend_time, 260);
		MAKE_PADDED_VAR(int32_t, m_Bone_name, m_Bone_name, 268);
		MAKE_PADDED_VAR(bool, m_Use_char__rotation, m_Use_char__rotation, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 424);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtVariableNode, m_cachedLookAtVariableNode, 432);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 440);
		MAKE_PADDED_VAR(intptr_t, m_cachedLookAtBlendTimeNode, m_cachedLookAtBlendTimeNode, 448);
		MAKE_PADDED_VAR(intptr_t, m_Additive_blend_type, m_Additive_blend_type, 456);
		MAKE_PADDED_VAR(bool, m_Horizontal_blend_is_first, m_Horizontal_blend_is_first, 460);
		MAKE_PADDED_VAR(bool, m_Alternative_additive_mapping, m_Alternative_additive_mapping, 461);
		MAKE_PADDED_VAR(bool, m_useHorizontalAnimations, m_useHorizontalAnimations, 464);
		MAKE_PADDED_VAR(bool, m_useVerticalAnimations, m_useVerticalAnimations, 465);
		MAKE_PADDED_VAR(SLookAtAnimationPairDefinition, m_Default_pair, m_Default_pair, 468);
		MAKE_PADDED_VAR(SLookAtAnimationPairInputBasedDefinition*, m_Input_based_pairs[2], m_Input_based_pairs, 480);
		MAKE_PADDED_VAR(SLookAtAnimationPairDefinition*, m_Pairs[2], m_Pairs, 492);
	};
};

class CBehaviorGraphMapRangeNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_minInValue, m_minInValue, 256);
		MAKE_PADDED_VAR(float, m_maxInValue, m_maxInValue, 260);
		MAKE_PADDED_VAR(float, m_minOutValue, m_minOutValue, 264);
		MAKE_PADDED_VAR(float, m_maxOutValue, m_maxOutValue, 268);
		MAKE_PADDED_VAR(float, m_base, m_base, 272);
		MAKE_PADDED_VAR(float, m_bias, m_bias, 276);
	};
};

class CBehaviorGraphMapToDiscreteNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(SBehaviorGraphMapToDiscreteMapper*, m_ranges[2], m_ranges, 256);
	};
};

class CBehaviorGraphMapWorldSpaceDirectionToModelSpaceRangeNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_minOutValue, m_minOutValue, 256);
		MAKE_PADDED_VAR(float, m_maxOutValue, m_maxOutValue, 260);
		MAKE_PADDED_VAR(bool, m_leftToRight, m_leftToRight, 264);
	};
};

class CBehaviorGraphMemoryNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(bool, m_resetOnActivation, m_resetOnActivation, 256);
	};
};

class CBehaviorGraphMimicAnimationEnumSwitchNode {
public:
	union {
	CBehaviorGraphAnimationEnumSwitchNode cbehaviorgraphanimationenumswitchnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 232);
		MAKE_PADDED_VAR(uint32_t, m_inputNum, m_inputNum, 236);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_synchronizeOnSwitch, m_synchronizeOnSwitch, 244);
		MAKE_PADDED_VAR(intptr_t, m_syncOnSwitchMethod, m_syncOnSwitchMethod, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 368);
		MAKE_PADDED_VAR(intptr_t, m_cachedBlendTimeValueNode, m_cachedBlendTimeValueNode, 376);
		MAKE_PADDED_VAR(int32_t, m_enum, m_enum, 384);
		MAKE_PADDED_VAR(int32_t, m_firstInputNum, m_firstInputNum, 388);
		MAKE_PADDED_VAR(bool, m_useCurve, m_useCurve, 392);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 400);
	};
};

class CBehaviorGraphMimicAnimationInputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphMimicAnimationManualSwitchNode {
public:
	union {
	CBehaviorGraphAnimationManualSwitchNode cbehaviorgraphanimationmanualswitchnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 232);
		MAKE_PADDED_VAR(uint32_t, m_inputNum, m_inputNum, 236);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_synchronizeOnSwitch, m_synchronizeOnSwitch, 244);
		MAKE_PADDED_VAR(intptr_t, m_syncOnSwitchMethod, m_syncOnSwitchMethod, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 368);
		MAKE_PADDED_VAR(intptr_t, m_cachedBlendTimeValueNode, m_cachedBlendTimeValueNode, 376);
	};
};

class CBehaviorGraphMimicAnimationOutputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphMimicBaseSlotNode {
public:
	union {
	CBehaviorGraphAnimationBaseSlotNode cbehaviorgraphanimationbaseslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
	};
};

class CBehaviorGraphMimicBlinkControllerNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_trackEyeLeft_Down, m_trackEyeLeft_Down, 248);
		MAKE_PADDED_VAR(char*, m_trackEyeRight_Down, m_trackEyeRight_Down, 260);
		MAKE_PADDED_VAR(int32_t, m_variableNameLeft, m_variableNameLeft, 272);
		MAKE_PADDED_VAR(int32_t, m_variableNameRight, m_variableNameRight, 276);
	};
};

class CBehaviorGraphMimicBlinkControllerNode_Setter {
public:
	union {
	CBehaviorGraphMimicBlinkControllerNode cbehaviorgraphmimicblinkcontrollernode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_trackEyeLeft_Down, m_trackEyeLeft_Down, 248);
		MAKE_PADDED_VAR(char*, m_trackEyeRight_Down, m_trackEyeRight_Down, 260);
		MAKE_PADDED_VAR(int32_t, m_variableNameLeft, m_variableNameLeft, 272);
		MAKE_PADDED_VAR(int32_t, m_variableNameRight, m_variableNameRight, 276);
		MAKE_PADDED_VAR(float, m_blinkValueThr, m_blinkValueThr, 312);
		MAKE_PADDED_VAR(float, m_blinkCooldown, m_blinkCooldown, 316);
	};
};

class CBehaviorGraphMimicBlinkControllerNode_Watcher {
public:
	union {
	CBehaviorGraphMimicBlinkControllerNode cbehaviorgraphmimicblinkcontrollernode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_trackEyeLeft_Down, m_trackEyeLeft_Down, 248);
		MAKE_PADDED_VAR(char*, m_trackEyeRight_Down, m_trackEyeRight_Down, 260);
		MAKE_PADDED_VAR(int32_t, m_variableNameLeft, m_variableNameLeft, 272);
		MAKE_PADDED_VAR(int32_t, m_variableNameRight, m_variableNameRight, 276);
	};
};

class CBehaviorGraphMimicEyesCorrectionNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_trackEyeLeft_Left, m_trackEyeLeft_Left, 248);
		MAKE_PADDED_VAR(char*, m_trackEyeLeft_Right, m_trackEyeLeft_Right, 260);
		MAKE_PADDED_VAR(char*, m_trackEyeRight_Left, m_trackEyeRight_Left, 272);
		MAKE_PADDED_VAR(char*, m_trackEyeRight_Right, m_trackEyeRight_Right, 284);
	};
};

class CBehaviorGraphMimicFilterNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(SBehaviorGraphTrackInfo*, m_tracks[2], m_tracks, 248);
	};
};

class CBehaviorGraphMimicFilterNodeInvert {
public:
	union {
	CBehaviorGraphMimicFilterNode cbehaviorgraphmimicfilternode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(SBehaviorGraphTrackInfo*, m_tracks[2], m_tracks, 248);
	};
};

class CBehaviorGraphMimicGainNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(float, m_gain, m_gain, 240);
		MAKE_PADDED_VAR(float, m_max, m_max, 244);
		MAKE_PADDED_VAR(float, m_min, m_min, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedGainValueNode, m_cachedGainValueNode, 256);
	};
};

class CBehaviorGraphMimicLipsyncFilterNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_lipsyncControlTrack, m_lipsyncControlTrack, 240);
		MAKE_PADDED_VAR(int32_t, m_lipsyncTrackBeginA, m_lipsyncTrackBeginA, 244);
		MAKE_PADDED_VAR(int32_t, m_lipsyncTrackEndA, m_lipsyncTrackEndA, 248);
		MAKE_PADDED_VAR(int32_t, m_lipsyncTrackBeginB, m_lipsyncTrackBeginB, 252);
		MAKE_PADDED_VAR(int32_t, m_lipsyncTrackEndB, m_lipsyncTrackEndB, 256);
		MAKE_PADDED_VAR(int32_t, m_lipsyncTrackBeginC, m_lipsyncTrackBeginC, 260);
		MAKE_PADDED_VAR(int32_t, m_lipsyncTrackEndC, m_lipsyncTrackEndC, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedFilterInputNode, m_cachedFilterInputNode, 288);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightValueNode, m_cachedWeightValueNode, 296);
	};
};

class CBehaviorGraphMimicLookAtSystemNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(char*, m_eyeHorLeftTrack, m_eyeHorLeftTrack, 248);
		MAKE_PADDED_VAR(char*, m_eyeHorRightTrack, m_eyeHorRightTrack, 260);
		MAKE_PADDED_VAR(char*, m_eyeVerLeftTrack, m_eyeVerLeftTrack, 272);
		MAKE_PADDED_VAR(char*, m_eyeVerRightTrack, m_eyeVerRightTrack, 284);
		MAKE_PADDED_VAR(char*, m_eyeLeftPlacerBone, m_eyeLeftPlacerBone, 296);
		MAKE_PADDED_VAR(char*, m_eyeRightPlacerBone, m_eyeRightPlacerBone, 308);
		MAKE_PADDED_VAR(float, m_eyeHorMax, m_eyeHorMax, 320);
		MAKE_PADDED_VAR(float, m_eyeVerMax, m_eyeVerMax, 324);
		MAKE_PADDED_VAR(intptr_t, m_dampCurve, m_dampCurve, 328);
		MAKE_PADDED_VAR(float, m_dampTime, m_dampTime, 336);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetNode, m_cachedTargetNode, 552);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlVariableNode, m_cachedControlVariableNode, 560);
		MAKE_PADDED_VAR(intptr_t, m_cachedLevelVariableNode, m_cachedLevelVariableNode, 568);
	};
};

class CBehaviorGraphMimicMathOpNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_mathOp, m_mathOp, 248);
		MAKE_PADDED_VAR(char*, m_trackName, m_trackName, 252);
		MAKE_PADDED_VAR(float, m_value, m_value, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 304);
	};
};

class CBehaviorGraphMimicOutputNode {
public:
	union {
	CBehaviorGraphOutputNode cbehaviorgraphoutputnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t*, m_cachedCustomInputNodes[2], m_cachedCustomInputNodes, 240);
		MAKE_PADDED_VAR(intptr_t*, m_cachedFloatInputNodes[2], m_cachedFloatInputNodes, 252);
	};
};

class CBehaviorGraphMimicParentInputNode {
public:
	union {
	CBehaviorGraphParentInputNode cbehaviorgraphparentinputnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(int32_t, m_parentSocket, m_parentSocket, 240);
	};
};

class CBehaviorGraphMimicPoseNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_poseType, m_poseType, 240);
		MAKE_PADDED_VAR(int32_t, m_poseName, m_poseName, 244);
		MAKE_PADDED_VAR(intptr_t, m_cachedPoseValueNode, m_cachedPoseValueNode, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedPoseWeightNode, m_cachedPoseWeightNode, 288);
	};
};

class CBehaviorGraphMimicSlotNode {
public:
	union {
	CBehaviorGraphAnimationSlotNode cbehaviorgraphanimationslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
	};
};

class CBehaviorGraphMimicSlotWithCurveNode {
public:
	union {
	CBehaviorGraphMimicSlotNode cbehaviorgraphmimicslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 936);
	};
};

class CBehaviorGraphMimicSlotWithSwapingNode {
public:
	union {
	CBehaviorGraphMimicSlotNode cbehaviorgraphmimicslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
		MAKE_PADDED_VAR(uint32_t, m_from, m_from, 936);
		MAKE_PADDED_VAR(uint32_t, m_to, m_to, 940);
	};
};

class CBehaviorGraphMimicsModifierNode {
public:
	union {
	CBehaviorGraphBaseMimicNode cbehaviorgraphbasemimicnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 244);
		MAKE_PADDED_VAR(intptr_t, m_cachedWeightVariableNode, m_cachedWeightVariableNode, 280);
	};
};

class CBehaviorGraphMimicStageNode {
public:
	union {
	CBehaviorGraphStageNode cbehaviorgraphstagenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 296);
		MAKE_PADDED_VAR(bool, m_activeByDefault, m_activeByDefault, 304);
	};
};

class CBehaviorGraphMotionExRotAngleNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(bool, m_worldSpace, m_worldSpace, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedAnimInputNode, m_cachedAnimInputNode, 264);
	};
};

class CBehaviorGraphMotionExToAngleNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(bool, m_worldSpace, m_worldSpace, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedAnimInputNode, m_cachedAnimInputNode, 264);
	};
};

class CBehaviorGraphOffensiveComboStateNode {
public:
	union {
	CBehaviorGraphComboStateNode cbehaviorgraphcombostatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(SBehaviorComboWay*, m_comboWays[2], m_comboWays, 368);
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 380);
		MAKE_PADDED_VAR(float, m_blendForAnim, m_blendForAnim, 384);
		MAKE_PADDED_VAR(float, m_blendInternal, m_blendInternal, 388);
		MAKE_PADDED_VAR(uint32_t, m_maxLevel, m_maxLevel, 392);
		MAKE_PADDED_VAR(bool, m_isConnected, m_isConnected, 396);
		MAKE_PADDED_VAR(int32_t, m_comboEvent, m_comboEvent, 412);
		MAKE_PADDED_VAR(int32_t, m_finishedEvent, m_finishedEvent, 416);
		MAKE_PADDED_VAR(int32_t, m_varComboWay, m_varComboWay, 420);
		MAKE_PADDED_VAR(int32_t, m_varComboDist, m_varComboDist, 424);
		MAKE_PADDED_VAR(int32_t, m_varComboDir, m_varComboDir, 428);
		MAKE_PADDED_VAR(intptr_t, m_slotA, m_slotA, 624);
		MAKE_PADDED_VAR(intptr_t, m_slotB, m_slotB, 632);
		MAKE_PADDED_VAR(int32_t, m_allowAttackEvent, m_allowAttackEvent, 640);
	};
};

class CBehaviorGraphOneMinusNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
	};
};

class CBehaviorGraphOptSpringDampValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_smoothTime, m_smoothTime, 256);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 260);
		MAKE_PADDED_VAR(float, m_maxSpeed, m_maxSpeed, 264);
		MAKE_PADDED_VAR(float, m_maxDiff, m_maxDiff, 268);
		MAKE_PADDED_VAR(float, m_defaultValue, m_defaultValue, 272);
		MAKE_PADDED_VAR(bool, m_forceInputValueOnActivate, m_forceInputValueOnActivate, 276);
		MAKE_PADDED_VAR(bool, m_forceDefaultValueOnActivate, m_forceDefaultValueOnActivate, 277);
		MAKE_PADDED_VAR(intptr_t, m_cachedSmoothTimeNode, m_cachedSmoothTimeNode, 296);
	};
};

class CBehaviorGraphPointerStateNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(char*, m_pointedStateName, m_pointedStateName, 360);
	};
};

class CBehaviorGraphPoseConstraintPoseLookAtNode {
public:
	union {
	CBehaviorGraphPoseConstraintWithTargetNode cbehaviorgraphposeconstraintwithtargetnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetPosValueNode, m_cachedTargetPosValueNode, 312);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetRotValueNode, m_cachedTargetRotValueNode, 320);
		MAKE_PADDED_VAR(SPoseLookAtSegmentData*, m_dataSegments[2], m_dataSegments, 336);
		MAKE_PADDED_VAR(intptr_t*, m_modifiers[2], m_modifiers, 348);
	};
};

class CBehaviorGraphRecentlyUsedAnimsStateNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(float, m_poseBlendOutTime, m_poseBlendOutTime, 360);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 364);
	};
};

class CBehaviorGraphScriptStateNode {
public:
	union {
	CBehaviorGraphStateNode cbehaviorgraphstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(int32_t, m_nameAsName, m_nameAsName, 360);
		MAKE_PADDED_VAR(int32_t, m_activationScriptEvent, m_activationScriptEvent, 364);
		MAKE_PADDED_VAR(int32_t, m_deactivationScriptEvent, m_deactivationScriptEvent, 368);
		MAKE_PADDED_VAR(int32_t, m_becomesCurrentStateScriptEvent, m_becomesCurrentStateScriptEvent, 372);
		MAKE_PADDED_VAR(int32_t, m_noLongerCurrentStateScriptEvent, m_noLongerCurrentStateScriptEvent, 376);
		MAKE_PADDED_VAR(int32_t, m_fullyBlendedInScriptEvent, m_fullyBlendedInScriptEvent, 380);
	};
};

class CBehaviorGraphScriptStateReportingNode {
public:
	union {
	CBehaviorGraphScriptStateNode cbehaviorgraphscriptstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(int32_t, m_nameAsName, m_nameAsName, 360);
		MAKE_PADDED_VAR(int32_t, m_activationScriptEvent, m_activationScriptEvent, 364);
		MAKE_PADDED_VAR(int32_t, m_deactivationScriptEvent, m_deactivationScriptEvent, 368);
		MAKE_PADDED_VAR(int32_t, m_becomesCurrentStateScriptEvent, m_becomesCurrentStateScriptEvent, 372);
		MAKE_PADDED_VAR(int32_t, m_noLongerCurrentStateScriptEvent, m_noLongerCurrentStateScriptEvent, 376);
		MAKE_PADDED_VAR(int32_t, m_fullyBlendedInScriptEvent, m_fullyBlendedInScriptEvent, 380);
		MAKE_PADDED_VAR(int32_t, m_stateName, m_stateName, 384);
	};
};

class CBehaviorGraphSelfActivatingAdditiveStateMachineNode {
public:
	union {
	CBehaviorGraphSelfActivatingStateMachineNode cbehaviorgraphselfactivatingstatemachinenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t*, m_globalTransitions[2], m_globalTransitions, 320);
		MAKE_PADDED_VAR(bool, m_resetStateOnExit, m_resetStateOnExit, 344);
		MAKE_PADDED_VAR(bool, m_applySyncTags, m_applySyncTags, 345);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 432);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 440);
		MAKE_PADDED_VAR(bool, m_mergeEvents, m_mergeEvents, 444);
	};
};

class CBehaviorGraphSelfActivatingOverrideStateMachineNode {
public:
	union {
	CBehaviorGraphSelfActivatingStateMachineNode cbehaviorgraphselfactivatingstatemachinenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t*, m_globalTransitions[2], m_globalTransitions, 320);
		MAKE_PADDED_VAR(bool, m_resetStateOnExit, m_resetStateOnExit, 344);
		MAKE_PADDED_VAR(bool, m_applySyncTags, m_applySyncTags, 345);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 432);
		MAKE_PADDED_VAR(SBehaviorGraphBoneInfo*, m_bones[2], m_bones, 448);
		MAKE_PADDED_VAR(bool, m_overrideFloatTracks, m_overrideFloatTracks, 460);
		MAKE_PADDED_VAR(bool, m_overrideCustomTracks, m_overrideCustomTracks, 461);
		MAKE_PADDED_VAR(bool, m_mergeEvents, m_mergeEvents, 462);
		MAKE_PADDED_VAR(bool, m_overrideDeltaMotion, m_overrideDeltaMotion, 463);
	};
};

class CBehaviorGraphSetInternalVariableFloatInOutNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(int32_t, m_variableName, m_variableName, 256);
		MAKE_PADDED_VAR(intptr_t, m_cachedValueNode, m_cachedValueNode, 264);
	};
};

class CBehaviorGraphSimpleDefensiveComboStateNode {
public:
	union {
	CBehaviorGraphComboStateNode cbehaviorgraphcombostatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(SBehaviorComboWay*, m_comboWays[2], m_comboWays, 368);
		MAKE_PADDED_VAR(float, m_cooldown, m_cooldown, 380);
		MAKE_PADDED_VAR(float, m_blendForAnim, m_blendForAnim, 384);
		MAKE_PADDED_VAR(float, m_blendInternal, m_blendInternal, 388);
		MAKE_PADDED_VAR(uint32_t, m_maxLevel, m_maxLevel, 392);
		MAKE_PADDED_VAR(bool, m_isConnected, m_isConnected, 396);
		MAKE_PADDED_VAR(int32_t, m_comboEvent, m_comboEvent, 412);
		MAKE_PADDED_VAR(int32_t, m_finishedEvent, m_finishedEvent, 416);
		MAKE_PADDED_VAR(int32_t, m_varComboWay, m_varComboWay, 420);
		MAKE_PADDED_VAR(int32_t, m_varComboDist, m_varComboDist, 424);
		MAKE_PADDED_VAR(int32_t, m_varComboDir, m_varComboDir, 428);
		MAKE_PADDED_VAR(intptr_t, m_slotA, m_slotA, 624);
		MAKE_PADDED_VAR(intptr_t, m_slotB, m_slotB, 632);
		MAKE_PADDED_VAR(int32_t, m_varHitTime, m_varHitTime, 640);
		MAKE_PADDED_VAR(int32_t, m_varHitLevel, m_varHitLevel, 644);
		MAKE_PADDED_VAR(int32_t, m_varElemEnum, m_varElemEnum, 648);
		MAKE_PADDED_VAR(int32_t, m_varParry, m_varParry, 652);
		MAKE_PADDED_VAR(int32_t, m_enum, m_enum, 656);
		MAKE_PADDED_VAR(SBehaviorComboElem*, m_animElems[2], m_animElems, 660);
	};
};

class CBehaviorGraphSnapToZeroNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_epsilon, m_epsilon, 256);
	};
};

class CBehaviorGraphSpeedModulationNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_speedThreshold, m_speedThreshold, 256);
		MAKE_PADDED_VAR(float, m_halfAngle, m_halfAngle, 260);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedNode, m_cachedSpeedNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedDirectionNode, m_cachedDirectionNode, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedThresholdNode, m_cachedThresholdNode, 280);
	};
};

class CBehaviorGraphSpringDampValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_factor, m_factor, 256);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 260);
		MAKE_PADDED_VAR(bool, m_forceInputValueOnActivate, m_forceInputValueOnActivate, 264);
	};
};

class CBehaviorGraphStateInSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphStateOutSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphStateTransitionBlendNode {
public:
	union {
	CBehaviorGraphStateTransitionNode cbehaviorgraphstatetransitionnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
	};
};

class CBehaviorGraphStateTransitionFinalStepNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(int32_t, m_locationAdjustmentVar, m_locationAdjustmentVar, 320);
		MAKE_PADDED_VAR(int32_t, m_adjustmentActiveVar, m_adjustmentActiveVar, 324);
	};
};

class CBehaviorGraphStateTransitionGlobalBlendNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(intptr_t, m_includeGroup, m_includeGroup, 328);
		MAKE_PADDED_VAR(intptr_t, m_excludeGroup, m_excludeGroup, 340);
		MAKE_PADDED_VAR(int32_t, m_generateEventForDestState, m_generateEventForDestState, 352);
		MAKE_PADDED_VAR(int32_t, m_generateForcedEventForDestState, m_generateForcedEventForDestState, 356);
		MAKE_PADDED_VAR(bool, m_cachePoseFromPrevSampling, m_cachePoseFromPrevSampling, 360);
		MAKE_PADDED_VAR(bool, m_useProgressiveSampilngForBlending, m_useProgressiveSampilngForBlending, 361);
	};
};

class CBehaviorGraphStateTransitionGlobalBlendStreamingNode {
public:
	union {
	CBehaviorGraphStateTransitionGlobalBlendNode cbehaviorgraphstatetransitionglobalblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(intptr_t, m_includeGroup, m_includeGroup, 328);
		MAKE_PADDED_VAR(intptr_t, m_excludeGroup, m_excludeGroup, 340);
		MAKE_PADDED_VAR(int32_t, m_generateEventForDestState, m_generateEventForDestState, 352);
		MAKE_PADDED_VAR(int32_t, m_generateForcedEventForDestState, m_generateForcedEventForDestState, 356);
		MAKE_PADDED_VAR(bool, m_cachePoseFromPrevSampling, m_cachePoseFromPrevSampling, 360);
		MAKE_PADDED_VAR(bool, m_useProgressiveSampilngForBlending, m_useProgressiveSampilngForBlending, 361);
		MAKE_PADDED_VAR(char*, m_defaultStateName, m_defaultStateName, 400);
		MAKE_PADDED_VAR(intptr_t, m_defaultState, m_defaultState, 416);
	};
};

class CBehaviorGraphStateTransitionMatchFromPoseNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(bool, m_useMathMethod, m_useMathMethod, 320);
	};
};

class CBehaviorGraphStateTransitionMatchToPoseNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(bool, m_useMathMethod, m_useMathMethod, 320);
	};
};

class CBehaviorGraphTimerValueNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 256);
		MAKE_PADDED_VAR(float, m_maxValue, m_maxValue, 260);
		MAKE_PADDED_VAR(float, m_timeScale, m_timeScale, 264);
		MAKE_PADDED_VAR(float, m_threshold, m_threshold, 268);
		MAKE_PADDED_VAR(intptr_t, m_cachedFirstInputNode, m_cachedFirstInputNode, 272);
	};
};

class CBehaviorGraphTransitionSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphValueAccNode {
public:
	union {
	CBehaviorGraphValueBaseNode cbehaviorgraphvaluebasenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(bool, m_resetOnActivation, m_resetOnActivation, 256);
		MAKE_PADDED_VAR(float, m_initValue, m_initValue, 260);
		MAKE_PADDED_VAR(bool, m_wrapValue, m_wrapValue, 264);
		MAKE_PADDED_VAR(float, m_wrapValueThrMax, m_wrapValueThrMax, 268);
		MAKE_PADDED_VAR(float, m_wrapValueThrMin, m_wrapValueThrMin, 272);
	};
};

class CBehaviorGraphVariableInputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphVariableOutputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphVectorVariableInputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehaviorGraphVectorVariableOutputSocket {
public:
	union {
	CGraphSocket cgraphsocket;
		MAKE_PADDED_VAR(intptr_t, m_block, m_block, 16);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 24);
		MAKE_PADDED_VAR(intptr_t*, m_connections[2], m_connections, 28);
	};
};

class CBehTreeAtomicANDCondition {
public:
	union {
	IBehTreeAtomicBinaryCondition ibehtreeatomicbinarycondition;
		MAKE_PADDED_VAR(intptr_t, m_condition1, m_condition1, 88);
		MAKE_PADDED_VAR(intptr_t, m_condition2, m_condition2, 96);
	};
};

class CBehTreeAtomicORCondition {
public:
	union {
	IBehTreeAtomicBinaryCondition ibehtreeatomicbinarycondition;
		MAKE_PADDED_VAR(intptr_t, m_condition1, m_condition1, 88);
		MAKE_PADDED_VAR(intptr_t, m_condition2, m_condition2, 96);
	};
};

class CBehTreeAtomicSteerWithCustomTargetDefinition {
public:
	union {
	CBehTreeNodeCustomSteeringDefinition cbehtreenodecustomsteeringdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
	};
};

class CBehTreeAtomicSteerWithTargetDefinition {
public:
	union {
	CBehTreeNodeCustomSteeringDefinition cbehtreenodecustomsteeringdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 136);
	};
};

class CBehTreeDecoratorActivePriorityDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_evaluateChildWhenActive, m_evaluateChildWhenActive, 112);
	};
};

class CBehTreeDecoratorAfraidDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeDecoratorCarryingItemsBaseDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_carryingAreaName_var, m_carryingAreaName_var, 112);
		MAKE_PADDED_VAR(CBehTreeValCName, m_storeTag, m_storeTag, 116);
	};
};

class CBehTreeDecoratorChangeBehaviorGraphDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_behGraphNameActivate, m_behGraphNameActivate, 112);
		MAKE_PADDED_VAR(CBehTreeValCName, m_behGraphNameDeactivate, m_behGraphNameDeactivate, 120);
		MAKE_PADDED_VAR(bool, m_activateIfBehaviorUnavailable, m_activateIfBehaviorUnavailable, 128);
	};
};

class CBehTreeDecoratorCluePathDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CEntityTemplate, m_clueTemplate, m_clueTemplate, 112);
		MAKE_PADDED_VAR(int32_t, m_clueTemplate_var, m_clueTemplate_var, 120);
		MAKE_PADDED_VAR(CBehTreeValInt, m_maxClues, m_maxClues, 124);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_cluesOffset, m_cluesOffset, 132);
	};
};

class CBehTreeDecoratorDismountCheckDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(intptr_t, m_dismountType, m_dismountType, 112);
	};
};

class CBehTreeDecoratorFindDestinationItemStoreDefinition {
public:
	union {
	CBehTreeDecoratorCarryingItemsBaseDefinition cbehtreedecoratorcarryingitemsbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_carryingAreaName_var, m_carryingAreaName_var, 112);
		MAKE_PADDED_VAR(CBehTreeValCName, m_storeTag, m_storeTag, 116);
	};
};

class CBehTreeDecoratorFindSourceItemStoreDefinition {
public:
	union {
	CBehTreeDecoratorCarryingItemsBaseDefinition cbehtreedecoratorcarryingitemsbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_carryingAreaName_var, m_carryingAreaName_var, 112);
		MAKE_PADDED_VAR(CBehTreeValCName, m_storeTag, m_storeTag, 116);
	};
};

class CBehTreeDecoratorHorsePairWithRiderDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeDecoratorHorseSpeedManagerDefinition {
public:
	union {
	IBehTreeNodeDecoratorSteeringTargeterDefinition ibehtreenodedecoratorsteeringtargeterdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValEHorseMoveType, m_moveType, m_moveType, 112);
	};
};

class CBehTreeDecoratorOverrideBehaviorVariableDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_varName, m_varName, 112);
		MAKE_PADDED_VAR(float, m_value, m_value, 116);
	};
};

class CBehTreeDecoratorRiderHorseReachabilityDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeDecoratorRiderPairingLogicDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_preferedHorseTag, m_preferedHorseTag, 112);
		MAKE_PADDED_VAR(float, m_range, m_range, 120);
	};
};

class CBehTreeDecoratorRiderPairWithHorseDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeDecoratorSelectFleeDestinationDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_fleeRadius, m_fleeRadius, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistanceFromDanger, m_minDistanceFromDanger, 120);
	};
};

class CBehTreeDecoratorSetBehaviorVariableDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_VarName, m_VarName, 112);
		MAKE_PADDED_VAR(float, m_valueActivate, m_valueActivate, 116);
		MAKE_PADDED_VAR(float, m_valueDeactivate, m_valueDeactivate, 120);
		MAKE_PADDED_VAR(bool, m_setVarActivate, m_setVarActivate, 124);
		MAKE_PADDED_VAR(bool, m_setVarDeactivate, m_setVarDeactivate, 125);
	};
};

class CBehTreeDecoratorSteeringGraphDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 112);
	};
};

class CBehTreeDecoratorUninterruptableDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeMetanodeDecorateOnCombatstyle {
public:
	union {
	IBehTreeNodeConditionalBaseNodeDefinition ibehtreenodeconditionalbasenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(uint32_t, m_childNodeToDisableCount, m_childNodeToDisableCount, 112);
		MAKE_PADDED_VAR(bool, m_invertCondition, m_invertCondition, 116);
		MAKE_PADDED_VAR(int32_t, m_behaviorGraphVarName, m_behaviorGraphVarName, 120);
		MAKE_PADDED_VAR(int32_t, m_combatStyleId, m_combatStyleId, 124);
	};
};

class CBehTreeMetanodeScriptOnSpawnDefinition {
public:
	union {
	IBehTreeMetanodeOnSpawnDefinition ibehtreemetanodeonspawndefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 104);
		MAKE_PADDED_VAR(bool, m_runWhenReattachedFromPool, m_runWhenReattachedFromPool, 112);
		MAKE_PADDED_VAR(IBehTreeOnSpawnEffector, m_scriptOnSpawn, m_scriptOnSpawn, 120);
	};
};

class CBehTreeMetanodeSetupCombatReachability {
public:
	union {
	IBehTreeMetanodeOnSpawnDefinition ibehtreemetanodeonspawndefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 104);
		MAKE_PADDED_VAR(bool, m_runWhenReattachedFromPool, m_runWhenReattachedFromPool, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_reachabilityTolerance, m_reachabilityTolerance, 120);
	};
};

class CBehTreeMetanodeSetupGuardDefinition {
public:
	union {
	IBehTreeMetanodeOnSpawnDefinition ibehtreemetanodeonspawndefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 104);
		MAKE_PADDED_VAR(bool, m_runWhenReattachedFromPool, m_runWhenReattachedFromPool, 112);
	};
};

class CBehTreeMetanodeWorkInitializer {
public:
	union {
	IBehTreeMetanodeOnSpawnDefinition ibehtreemetanodeonspawndefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 104);
		MAKE_PADDED_VAR(bool, m_runWhenReattachedFromPool, m_runWhenReattachedFromPool, 112);
	};
};

class CBehTreeNodeActivationDelayDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_delayOnSuccess, m_delayOnSuccess, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_delayOnFailure, m_delayOnFailure, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_delayOnInterruption, m_delayOnInterruption, 128);
	};
};

class CBehTreeNodeAtomicMoveToActionPointDefinition {
public:
	union {
	CBehTreeNodeAtomicMoveToDefinition cbehtreenodeatomicmovetodefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
	};
};

class CBehTreeNodeAtomicMoveToActionTargetDefinition {
public:
	union {
	CBehTreeNodeAtomicMoveToDefinition cbehtreenodeatomicmovetodefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
	};
};

class CBehTreeNodeAtomicMoveToCombatTargetDefinition {
public:
	union {
	CBehTreeNodeAtomicMoveToDefinition cbehtreenodeatomicmovetodefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
	};
};

class CBehTreeNodeAtomicMoveToCustomPointDefinition {
public:
	union {
	CBehTreeNodeAtomicMoveToDefinition cbehtreenodeatomicmovetodefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
	};
};

class CBehTreeNodeAtomicMoveToWanderpointDefinition {
public:
	union {
	CBehTreeNodeAtomicMoveToActionTargetDefinition cbehtreenodeatomicmovetoactiontargetdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 128);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 136);
		MAKE_PADDED_VAR(float, m_angularTolerance, m_angularTolerance, 144);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_pathfindingTolerance, m_pathfindingTolerance, 148);
		MAKE_PADDED_VAR(CBehTreeValBool, m_keepPreviousMoveData, m_keepPreviousMoveData, 156);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rotateAfterwards, m_rotateAfterwards, 164);
		MAKE_PADDED_VAR(CBehTreeValBool, m_preciseArrival, m_preciseArrival, 172);
		MAKE_PADDED_VAR(CBehTreeValBool, m_rightSideMovement, m_rightSideMovement, 184);
	};
};

class CBehTreeNodeAtomicPursueTargetDefinition {
public:
	union {
	CBehTreeNodeBaseAtomicPursueTargetDefinition cbehtreenodebaseatomicpursuetargetdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_moveSpeed, m_moveSpeed, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerance, m_tolerance, 120);
		MAKE_PADDED_VAR(CBehTreeValEMoveType, m_moveType, m_moveType, 128);
		MAKE_PADDED_VAR(CBehTreeValBool, m_moveOutsideNavdata, m_moveOutsideNavdata, 136);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 144);
	};
};

class CBehTreeNodeCasualMovementDecoratorDefinition {
public:
	union {
	CBehTreeDecoratorSteeringGraphDefinition cbehtreedecoratorsteeringgraphdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 112);
	};
};

class CBehTreeNodeConditionalNameNodeDefinition {
public:
	union {
	IBehTreeNodeConditionalBaseNodeDefinition ibehtreenodeconditionalbasenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(uint32_t, m_childNodeToDisableCount, m_childNodeToDisableCount, 112);
		MAKE_PADDED_VAR(bool, m_invertCondition, m_invertCondition, 116);
		MAKE_PADDED_VAR(CBehTreeValCName, m_val, m_val, 120);
		MAKE_PADDED_VAR(CBehTreeValCName, m_nameToCompare, m_nameToCompare, 128);
	};
};

class CBehTreeNodeConditionalNodeDefinition {
public:
	union {
	IBehTreeNodeConditionalBaseNodeDefinition ibehtreenodeconditionalbasenodedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(uint32_t, m_childNodeToDisableCount, m_childNodeToDisableCount, 112);
		MAKE_PADDED_VAR(bool, m_invertCondition, m_invertCondition, 116);
		MAKE_PADDED_VAR(CBehTreeValBool, m_val, m_val, 120);
	};
};

class CBehTreeNodeConditionDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionDistanceToActionTargetDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(bool, m_checkRotation, m_checkRotation, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 136);
	};
};

class CBehTreeNodeConditionDistanceToCombatTargetDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(bool, m_checkRotation, m_checkRotation, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 136);
	};
};

class CBehTreeNodeConditionDistanceToCustomTargetDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(bool, m_checkRotation, m_checkRotation, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 136);
	};
};

class CBehTreeNodeConditionDistanceToNamedTargetDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(bool, m_checkRotation, m_checkRotation, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 136);
		MAKE_PADDED_VAR(CBehTreeValCName, m_targetName, m_targetName, 144);
	};
};

class CBehTreeNodeConditionDistanceToTaggedDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(bool, m_checkRotation, m_checkRotation, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minDistance, m_minDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_maxDistance, m_maxDistance, 136);
		MAKE_PADDED_VAR(CBehTreeValCName, m_tag, m_tag, 144);
		MAKE_PADDED_VAR(bool, m_allowActivationWhenNoTarget, m_allowActivationWhenNoTarget, 152);
	};
};

class CBehTreeNodeConditionExternalToggleDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(int32_t, m_switchName, m_switchName, 120);
		MAKE_PADDED_VAR(CBehTreeValBool, m_initialValue, m_initialValue, 124);
	};
};

class CBehTreeNodeConditionHasAbilityDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(int32_t, m_abilityName, m_abilityName, 120);
	};
};

class CBehTreeNodeConditionHasCombatTargetDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsCarryingItemDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsConsciousAtWorkDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsDeadDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsEnemyAroundDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_maxEnemyDistance, m_maxEnemyDistance, 120);
		MAKE_PADDED_VAR(float, m_updateDelay, m_updateDelay, 124);
	};
};

class CBehTreeNodeConditionIsInAttackRangeDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValCName, m_attackRangeName, m_attackRangeName, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_predictPositionInTime, m_predictPositionInTime, 128);
	};
};

class CBehTreeNodeConditionIsInCameraViewDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsTargetThePlayerDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 120);
	};
};

class CBehTreeNodeConditionIsWorkingDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionLineofSightDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValBool, m_useCombatTarget, m_useCombatTarget, 120);
	};
};

class CBehTreeNodeConditionLineofSightToNamedTargetDefinition {
public:
	union {
	CBehTreeNodeConditionLineofSightDefinition cbehtreenodeconditionlineofsightdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValBool, m_useCombatTarget, m_useCombatTarget, 120);
		MAKE_PADDED_VAR(CBehTreeValCName, m_targetName, m_targetName, 128);
	};
};

class CBehTreeNodeConditionPartyMembersCountDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValCName, m_partyMemberName, m_partyMemberName, 120);
		MAKE_PADDED_VAR(CBehTreeValInt, m_count, m_count, 128);
	};
};

class CBehTreeNodeConditionReactionEventDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValCName, m_eventName, m_eventName, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_cooldownDistance, m_cooldownDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_cooldownTimeout, m_cooldownTimeout, 136);
		MAKE_PADDED_VAR(CBehTreeValBool, m_dontSetActionTargetEdit, m_dontSetActionTargetEdit, 144);
	};
};

class CBehTreeNodeConditionShouldPursueCombatTargetDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_allowPursueInDistance, m_allowPursueInDistance, 120);
		MAKE_PADDED_VAR(bool, m_allowPursueInCombat, m_allowPursueInCombat, 128);
		MAKE_PADDED_VAR(bool, m_testReachability, m_testReachability, 129);
	};
};

class CBehTreeNodeConditionSpeedEngineValDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_speed, m_speed, 120);
	};
};

class CBehTreeNodeConditionTargetNoticedDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionTeleportToWorkDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionTrueDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeDecoratorBruxaDeathDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeDecoratorCarryingItemManagerDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValBool, m_dropOnDeactivation, m_dropOnDeactivation, 112);
	};
};

class CBehTreeNodeDecoratorCompleteInProximityDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_distance, m_distance, 112);
		MAKE_PADDED_VAR(bool, m_useCombatTarget, m_useCombatTarget, 120);
		MAKE_PADDED_VAR(bool, m_3D, m_3D, 121);
	};
};

class CBehTreeNodeDecoratorDisableTalkInteractionDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeDecoratorGlideDefinition {
public:
	union {
	IBehTreeNodeFlightDecoratorDefinition ibehtreenodeflightdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(float, m_minChangeDelay, m_minChangeDelay, 112);
		MAKE_PADDED_VAR(float, m_glideChance, m_glideChance, 116);
		MAKE_PADDED_VAR(float, m_stopGlideChance, m_stopGlideChance, 120);
	};
};

class CBehTreeNodeDecoratorGuardRetreatDefinition {
public:
	union {
	IBehTreeNodeSetupCustomMoveDataDefinition ibehtreenodesetupcustommovedatadefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_setTargetForEvaluation, m_setTargetForEvaluation, 112);
		MAKE_PADDED_VAR(bool, m_isAvailableWhenInPursuitRange, m_isAvailableWhenInPursuitRange, 120);
	};
};

class CBehTreeNodeDecoratorLeadFormationDefinition {
public:
	union {
	CBehTreeDecoratorSteeringGraphDefinition cbehtreedecoratorsteeringgraphdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValSteeringGraph, m_steeringGraph, m_steeringGraph, 112);
		MAKE_PADDED_VAR(CBehTreeValFormation, m_formation, m_formation, 128);
		MAKE_PADDED_VAR(CBehTreeValBool, m_reshapeOnMoveAction, m_reshapeOnMoveAction, 144);
	};
};

class CBehTreeNodeDecoratorLookAtDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(float, m_durationPostDeactivation, m_durationPostDeactivation, 112);
		MAKE_PADDED_VAR(bool, m_player, m_player, 116);
		MAKE_PADDED_VAR(bool, m_actionTarget, m_actionTarget, 117);
		MAKE_PADDED_VAR(bool, m_combatTarget, m_combatTarget, 118);
		MAKE_PADDED_VAR(bool, m_reactionTarget, m_reactionTarget, 119);
		MAKE_PADDED_VAR(int32_t, m_namedTarget, m_namedTarget, 120);
	};
};

class CBehTreeNodeDecoratorPassMetaobstaclesDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeDecoratorPriorityOnSemaphoreDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_counterName, m_counterName, 112);
		MAKE_PADDED_VAR(CBehTreeValInt, m_counterValue, m_counterValue, 120);
		MAKE_PADDED_VAR(intptr_t, m_comparison, m_comparison, 128);
	};
};

class CBehTreeNodeDecoratorRidingCheckDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeDecoratorSelectRandomTerrainPositionInAreaDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(SBehTreeAreaSelection, m_areaSelection, m_areaSelection, 112);
	};
};

class CBehTreeNodeDecoratorSemaphoreDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_semaphoreName, m_semaphoreName, 112);
		MAKE_PADDED_VAR(bool, m_raise, m_raise, 116);
	};
};

class CBehTreeNodeDecoratorSetSteeringCustomPositionDefinition {
public:
	union {
	IBehTreeNodeDecoratorSteeringTargeterDefinition ibehtreenodedecoratorsteeringtargeterdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_steeringParameterName, m_steeringParameterName, 112);
	};
};

class CBehTreeNodeDecoratorSetSteeringNamedTargetNodeDefinition {
public:
	union {
	IBehTreeNodeDecoratorSteeringTargeterDefinition ibehtreenodedecoratorsteeringtargeterdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_targetName, m_targetName, 112);
		MAKE_PADDED_VAR(bool, m_combatTarget, m_combatTarget, 116);
	};
};

class CBehTreeNodeDecoratorSetSteeringTargetNodeDefinition {
public:
	union {
	IBehTreeNodeDecoratorSteeringTargeterDefinition ibehtreenodedecoratorsteeringtargeterdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_combatTarget, m_combatTarget, 112);
	};
};

class CBehTreeNodeDecoratorSetupFormationDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFormation, m_formation, m_formation, 112);
	};
};

class CBehTreeNodeDecoratorSnapToNavigationDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_performActivation, m_performActivation, 112);
		MAKE_PADDED_VAR(bool, m_snapOnActivation, m_snapOnActivation, 113);
		MAKE_PADDED_VAR(bool, m_performDeactivation, m_performDeactivation, 114);
		MAKE_PADDED_VAR(bool, m_snapOnDeactivation, m_snapOnDeactivation, 115);
	};
};

class CBehTreeNodeDelayActivationDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_delay, m_delay, 112);
		MAKE_PADDED_VAR(float, m_activationWindow, m_activationWindow, 120);
	};
};

class CBehTreeNodeDurationDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_duration, m_duration, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_chance, m_chance, 120);
		MAKE_PADDED_VAR(bool, m_endWithFailure, m_endWithFailure, 128);
	};
};

class CBehTreeNodeDurationRangeDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_durationMin, m_durationMin, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_durationMax, m_durationMax, 120);
		MAKE_PADDED_VAR(bool, m_endWithFailure, m_endWithFailure, 128);
	};
};

class CBehTreeNodeExplorationQueueRegisterDefinition {
public:
	union {
	IBehTreeNodeExplorationQueueDecoratorDefinition ibehtreenodeexplorationqueuedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(float, m_timePriority, m_timePriority, 112);
		MAKE_PADDED_VAR(float, m_distancePriority, m_distancePriority, 116);
		MAKE_PADDED_VAR(float, m_maxTime, m_maxTime, 120);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 124);
	};
};

class CBehTreeNodeExplorationQueueUseDefinition {
public:
	union {
	IBehTreeNodeExplorationQueueDecoratorDefinition ibehtreenodeexplorationqueuedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeExternalListenerDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeIgnoreInteriorsDuringPathfindingDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeLandingDecoratorDefinition {
public:
	union {
	IBehTreeNodeFlightDecoratorDefinition ibehtreenodeflightdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_landingMaxHeight, m_landingMaxHeight, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_landingForwardOffset, m_landingForwardOffset, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_tolerationDistance, m_tolerationDistance, 128);
	};
};

class CBehTreeNodeLoopDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(intptr_t, m_onCompleted, m_onCompleted, 112);
		MAKE_PADDED_VAR(intptr_t, m_onFailed, m_onFailed, 116);
		MAKE_PADDED_VAR(CBehTreeValInt, m_maxIterations, m_maxIterations, 120);
		MAKE_PADDED_VAR(float, m_reactivationDelay, m_reactivationDelay, 128);
	};
};

class CBehTreeNodeLoopWithTimelimitDecoratorDefinition {
public:
	union {
	CBehTreeNodeLoopDecoratorDefinition cbehtreenodeloopdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(intptr_t, m_onCompleted, m_onCompleted, 112);
		MAKE_PADDED_VAR(intptr_t, m_onFailed, m_onFailed, 116);
		MAKE_PADDED_VAR(CBehTreeValInt, m_maxIterations, m_maxIterations, 120);
		MAKE_PADDED_VAR(float, m_reactivationDelay, m_reactivationDelay, 128);
		MAKE_PADDED_VAR(float, m_timeLimit, m_timeLimit, 136);
	};
};

class CBehTreeNodeNotifyCombatActivationDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeNotifyDoorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodePartyWorkSynchronizerDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodePCLockControlDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodePlayVoicesetDecoratorDefinition {
public:
	union {
	IBehTreeNodeSpeechDecoratorDefinition ibehtreenodespeechdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValString, m_voiceSet, m_voiceSet, 112);
		MAKE_PADDED_VAR(CBehTreeValInt, m_voicePriority, m_voicePriority, 128);
		MAKE_PADDED_VAR(float, m_minSpeechDelay, m_minSpeechDelay, 136);
		MAKE_PADDED_VAR(float, m_maxSpeechDelay, m_maxSpeechDelay, 140);
		MAKE_PADDED_VAR(bool, m_waitUntilSpeechIsFinished, m_waitUntilSpeechIsFinished, 144);
		MAKE_PADDED_VAR(bool, m_dontActivateWhileSpeaking, m_dontActivateWhileSpeaking, 145);
	};
};

class CBehTreeNodePlayVoicesetOnDeactivationDecoratorDefinition {
public:
	union {
	IBehTreeNodeSpeechDecoratorDefinition ibehtreenodespeechdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValString, m_voiceSet, m_voiceSet, 112);
		MAKE_PADDED_VAR(CBehTreeValInt, m_voicePriority, m_voicePriority, 128);
		MAKE_PADDED_VAR(uint16_t, m_playAfterXTimes, m_playAfterXTimes, 136);
		MAKE_PADDED_VAR(float, m_chanceToPlay, m_chanceToPlay, 140);
	};
};

class CBehTreeNodePokeDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pokeEvent, m_pokeEvent, 112);
		MAKE_PADDED_VAR(CBehTreeValBool, m_acceptPokeOnlyIfActive, m_acceptPokeOnlyIfActive, 120);
	};
};

class CBehTreeNodeProlongHLCombatDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_requestCombatActivationOnEvent, m_requestCombatActivationOnEvent, 112);
	};
};

class CBehTreeNodeReactionSceneDefinitionDecorator {
public:
	union {
	CBehTreeNodeConditionReactionEventDefinition cbehtreenodeconditionreactioneventdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValCName, m_eventName, m_eventName, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_cooldownDistance, m_cooldownDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_cooldownTimeout, m_cooldownTimeout, 136);
		MAKE_PADDED_VAR(CBehTreeValBool, m_dontSetActionTargetEdit, m_dontSetActionTargetEdit, 144);
		MAKE_PADDED_VAR(int32_t*, m_roles[2], m_roles, 152);
		MAKE_PADDED_VAR(CBehTreeValBool, m_inInWorkBranch, m_inInWorkBranch, 164);
	};
};

class CBehTreeNodeReactionSFlowSynchroDecoratorDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(int32_t, m_allowedRole, m_allowedRole, 120);
		MAKE_PADDED_VAR(bool, m_isBlocikng, m_isBlocikng, 124);
	};
};

class CBehTreeNodeReceiveScaredEventDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeRequestItemsDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_LeftItemType, m_LeftItemType, 112);
		MAKE_PADDED_VAR(CBehTreeValCName, m_RightItemType, m_RightItemType, 120);
		MAKE_PADDED_VAR(CBehTreeValBool, m_chooseSilverIfPossible, m_chooseSilverIfPossible, 128);
		MAKE_PADDED_VAR(int32_t, m_behaviorGraphVarName, m_behaviorGraphVarName, 136);
	};
};

class CBehTreeNodeRiderWaitHorseScriptedActionDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeScriptDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(IBehTreeTaskDefinition, m_taskOrigin, m_taskOrigin, 112);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 120);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 121);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 122);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 123);
		MAKE_PADDED_VAR(bool, m_runMainOnActivation, m_runMainOnActivation, 124);
	};
};

class CBehTreeNodeSelectActionPointDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_delayOnFailure, m_delayOnFailure, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_delayOnSuccess, m_delayOnSuccess, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_delayOnInterruption, m_delayOnInterruption, 128);
	};
};

class CBehTreeNodeSelectPartyMemberDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_partyMemberName, m_partyMemberName, 112);
	};
};

class CBehTreeNodeSelectTargetByTagDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_tag, m_tag, 112);
		MAKE_PADDED_VAR(bool, m_allowActivationWhenNoTarget, m_allowActivationWhenNoTarget, 120);
	};
};

class CBehTreeNodeSelectTargetByTagInAreaDecoratorDefinition {
public:
	union {
	CBehTreeNodeSelectTargetByTagDecoratorDefinition cbehtreenodeselecttargetbytagdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_tag, m_tag, 112);
		MAKE_PADDED_VAR(bool, m_allowActivationWhenNoTarget, m_allowActivationWhenNoTarget, 120);
		MAKE_PADDED_VAR(SBehTreeAreaSelection, m_areaSelection, m_areaSelection, 128);
		MAKE_PADDED_VAR(CBehTreeValBool, m_getClosest, m_getClosest, 144);
		MAKE_PADDED_VAR(CBehTreeValBool, m_reselectOnActivate, m_reselectOnActivate, 152);
	};
};

class CBehTreeNodeSelectTargetOrMountByTagDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_tag, m_tag, 112);
		MAKE_PADDED_VAR(bool, m_allowActivationWhenNoTarget, m_allowActivationWhenNoTarget, 120);
	};
};

class CBehTreeNodeSelectWanderingTargetDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeSetCustomMoveTargetToDestinationPointDefintion {
public:
	union {
	IBehTreeNodeSetupCustomMoveDataDefinition ibehtreenodesetupcustommovedatadefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_setTargetForEvaluation, m_setTargetForEvaluation, 112);
	};
};

class CBehTreeNodeSetCustomMoveTargetToInteractionPointDefintion {
public:
	union {
	IBehTreeNodeSetupCustomMoveDataDefinition ibehtreenodesetupcustommovedatadefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_setTargetForEvaluation, m_setTargetForEvaluation, 112);
	};
};

class CBehTreeNodeSetupCustomMoveTargetToPositionDefinition {
public:
	union {
	IBehTreeNodeSetupCustomMoveDataDefinition ibehtreenodesetupcustommovedatadefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_setTargetForEvaluation, m_setTargetForEvaluation, 112);
		MAKE_PADDED_VAR(CBehTreeValVector, m_target, m_target, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_heading, m_heading, 160);
	};
};

class CBehTreeNodeTakeOffDecoratorDefinition {
public:
	union {
	IBehTreeNodeFlightDecoratorDefinition ibehtreenodeflightdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeVitalSpotActiveDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_VSActivatorNodeName, m_VSActivatorNodeName, 112);
		MAKE_PADDED_VAR(bool, m_activateVitalSpot, m_activateVitalSpot, 116);
	};
};

class CBehTreeNodeWanderingTaggedTargetDecoratorDefinition {
public:
	union {
	CBehTreeNodeSelectWanderingTargetDecoratorDefinition cbehtreenodeselectwanderingtargetdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pointsGroupTag, m_pointsGroupTag, 112);
	};
};

class CBehTreeNodeWorkDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeTicketAlgorithmRandomizeDefinition {
public:
	union {
	IBehTreeTicketAlgorithmDecoratorDefinition ibehtreeticketalgorithmdecoratordefinition;
		MAKE_PADDED_VAR(intptr_t, m_baseAlgorithm, m_baseAlgorithm, 88);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_randMin, m_randMin, 96);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_randMax, m_randMax, 104);
	};
};

class CCharacterEntityTemplate {
public:
	union {
	CEntityTemplate centitytemplate;
		MAKE_PADDED_VAR(intptr_t, m_entityObject, m_entityObject, 104);
		MAKE_PADDED_VAR(int32_t, m_entityClass, m_entityClass, 112);
		MAKE_PADDED_VAR(CEntityBodyPart*, m_bodyParts[2], m_bodyParts, 116);
		MAKE_PADDED_VAR(CEntityAppearance*, m_appearances[2], m_appearances, 128);
		MAKE_PADDED_VAR(int32_t*, m_usedAppearances[2], m_usedAppearances, 140);
		MAKE_PADDED_VAR(VoicetagAppearancePair*, m_voicetagAppearances[2], m_voicetagAppearances, 152);
		MAKE_PADDED_VAR(intptr_t*, m_effects[2], m_effects, 164);
		MAKE_PADDED_VAR(intptr_t*, m_templateParams[2], m_templateParams, 176);
		MAKE_PADDED_VAR(EntitySlot*, m_slots[2], m_slots, 188);
		MAKE_PADDED_VAR(SEntityTemplateColoringEntry*, m_coloringEntries[2], m_coloringEntries, 200);
		MAKE_PADDED_VAR(SComponentInstancePropertyEntry*, m_instancePropEntries[2], m_instancePropEntries, 212);
		MAKE_PADDED_VAR(CEntityTemplateCookedEffect*, m_cookedEffects[2], m_cookedEffects, 224);
		MAKE_PADDED_VAR(uint32_t, m_cookedEffectsVersion, m_cookedEffectsVersion, 248);
		MAKE_PADDED_VAR(CEntityTemplate*, m_includes[2], m_includes, 252);
		MAKE_PADDED_VAR(Vector, m_backgroundOffset, m_backgroundOffset, 288);
		MAKE_PADDED_VAR(bool, m_properOverrides, m_properOverrides, 304);
		MAKE_PADDED_VAR(intptr_t, m_dataCompilationTime, m_dataCompilationTime, 308);
		MAKE_PADDED_VAR(SEntityTemplateOverride*, m_overrides[2], m_overrides, 316);
		MAKE_PADDED_VAR(char*, m_flatCompiledData[2], m_flatCompiledData, 328);
		MAKE_PADDED_VAR(SStreamedAttachment*, m_streamedAttachments[2], m_streamedAttachments, 340);
		MAKE_PADDED_VAR(CEntityTemplate, m_baseEntityOverride, m_baseEntityOverride, 352);
	};
};

class CCommonGame {
public:
	union {
	CGame cgame;
		MAKE_PADDED_VAR(CWorld, m_activeWorld, m_activeWorld, 240);
		MAKE_PADDED_VAR(intptr_t, m_inputManager, m_inputManager, 384);
		MAKE_PADDED_VAR(intptr_t, m_visualDebug, m_visualDebug, 480);
		MAKE_PADDED_VAR(intptr_t, m_timerScriptKeyword, m_timerScriptKeyword, 47504);
		MAKE_PADDED_VAR(CGameResource, m_gameResource, m_gameResource, 47512);
		MAKE_PADDED_VAR(intptr_t, m_player, m_player, 47616);
		MAKE_PADDED_VAR(intptr_t, m_dlcManager, m_dlcManager, 72536);
	};
};

class CCommonGameResource {
public:
	union {
	CGameResource cgameresource;
		MAKE_PADDED_VAR(SWorldDescription*, m_worlds[2], m_worlds, 104);
		MAKE_PADDED_VAR(CEntityTemplate, m_defaultPlayerTemplate, m_defaultPlayerTemplate, 120);
		MAKE_PADDED_VAR(CEntityTemplate, m_defaultCameraTemplate, m_defaultCameraTemplate, 152);
		MAKE_PADDED_VAR(intptr_t, m_startingPoint, m_startingPoint, 184);
		MAKE_PADDED_VAR(char*, m_newGameLoadingVideo, m_newGameLoadingVideo, 192);
		MAKE_PADDED_VAR(int32_t*, m_playGoChunksToActivate[2], m_playGoChunksToActivate, 204);
		MAKE_PADDED_VAR(intptr_t, m_mainQuest, m_mainQuest, 216);
		MAKE_PADDED_VAR(CGuiConfigResource, m_guiConfigOverride, m_guiConfigOverride, 248);
	};
};

class CComponent {
public:
	union {
	CNode cnode;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CCounterUtilityGraphBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_target, m_target, 288);
	};
};

class CCurveComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CCurveControlPointComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CCurveTangentControlPointComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CCustomCameraDefaultPRC {
public:
	union {
	ICustomCameraPivotRotationController icustomcamerapivotrotationcontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minPitch, m_minPitch, 100);
		MAKE_PADDED_VAR(float, m_maxPitch, m_maxPitch, 104);
		MAKE_PADDED_VAR(intptr_t, m_sensitivityPreset, m_sensitivityPreset, 108);
		MAKE_PADDED_VAR(float, m_dampYawFactor, m_dampYawFactor, 112);
		MAKE_PADDED_VAR(float, m_dampPitchFactor, m_dampPitchFactor, 116);
		MAKE_PADDED_VAR(float, m_yawAcceleration, m_yawAcceleration, 200);
		MAKE_PADDED_VAR(float, m_yawMaxVelocity, m_yawMaxVelocity, 204);
		MAKE_PADDED_VAR(float, m_pitchAcceleration, m_pitchAcceleration, 208);
		MAKE_PADDED_VAR(float, m_pitchMaxVelocity, m_pitchMaxVelocity, 212);
	};
};

class CCutsceneTemplate {
public:
	union {
	CSkeletalAnimationSet cskeletalanimationset;
		MAKE_PADDED_VAR(int32_t, m_requiredSfxTag, m_requiredSfxTag, 144);
		MAKE_PADDED_VAR(intptr_t*, m_animations[2], m_animations, 152);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 168);
		MAKE_PADDED_VAR(intptr_t*, m_compressedPoses[2], m_compressedPoses, 176);
		MAKE_PADDED_VAR(CExtAnimEventsFile*, m_extAnimEvents[2], m_extAnimEvents, 188);
		MAKE_PADDED_VAR(intptr_t, m_Streaming_option, m_Streaming_option, 200);
		MAKE_PADDED_VAR(uint32_t, m_Number_of_non_streamable_bones, m_Number_of_non_streamable_bones, 204);
		MAKE_PADDED_VAR(intptr_t*, m_effects[2], m_effects, 208);
		MAKE_PADDED_VAR(intptr_t*, m_modifiers[2], m_modifiers, 220);
		MAKE_PADDED_VAR(SCutsceneActorDef*, m_actorsDef[2], m_actorsDef, 232);
		MAKE_PADDED_VAR(int32_t*, m_entToHideTags[2], m_entToHideTags, 244);
		MAKE_PADDED_VAR(intptr_t, m_point, m_point, 256);
		MAKE_PADDED_VAR(char*, m_lastLevelLoaded, m_lastLevelLoaded, 268);
		MAKE_PADDED_VAR(float, m_fadeBefore, m_fadeBefore, 280);
		MAKE_PADDED_VAR(float, m_fadeAfter, m_fadeAfter, 284);
		MAKE_PADDED_VAR(bool, m_blackscreenWhenLoading, m_blackscreenWhenLoading, 288);
		MAKE_PADDED_VAR(float, m_cameraBlendInTime, m_cameraBlendInTime, 292);
		MAKE_PADDED_VAR(float, m_cameraBlendOutTime, m_cameraBlendOutTime, 296);
		MAKE_PADDED_VAR(bool, m_isValid, m_isValid, 300);
		MAKE_PADDED_VAR(bool, m_streamable, m_streamable, 301);
		MAKE_PADDED_VAR(bool, m_checkActorsPosition, m_checkActorsPosition, 302);
		MAKE_PADDED_VAR(char**, m_usedInFiles[2], m_usedInFiles, 304);
		MAKE_PADDED_VAR(char*, m_reverbName, m_reverbName, 328);
		MAKE_PADDED_VAR(intptr_t, m_burnedAudioTrackName, m_burnedAudioTrackName, 340);
		MAKE_PADDED_VAR(int32_t*, m_banksDependency[2], m_banksDependency, 352);
		MAKE_PADDED_VAR(char**, m_resourcesToPreloadManuallyPaths[2], m_resourcesToPreloadManuallyPaths, 364);
	};
};

class CDeniedAreaBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_entityTag, m_entityTag, 288);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 292);
	};
};

class CDependencyAttachment {
public:
	union {
	IAttachment iattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
	};
};

class CDismembermentComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CDropPhysicsComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(CDropPhysicsSetup*, m_dropSetups[2], m_dropSetups, 300);
	};
};

class CDummyComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CDynamicColliderComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_useInWaterNormal, m_useInWaterNormal, 288);
		MAKE_PADDED_VAR(bool, m_useInWaterDisplacement, m_useInWaterDisplacement, 289);
		MAKE_PADDED_VAR(bool, m_useInGrassDisplacement, m_useInGrassDisplacement, 290);
		MAKE_PADDED_VAR(bool, m_useHideFactor, m_useHideFactor, 291);
	};
};

class CDynamicFoliageComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(CSRTBaseTree, m_baseTree, m_baseTree, 288);
		MAKE_PADDED_VAR(uint32_t, m_minimumStreamingDistance, m_minimumStreamingDistance, 336);
	};
};

class CEnableEncounterAction {
public:
	union {
	IEntityTargetingAction ientitytargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(bool, m_enable, m_enable, 104);
	};
};

class CEntity {
public:
	union {
	CNode cnode;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CEntityGroup {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t*, m_entities[2], m_entities, 368);
		MAKE_PADDED_VAR(bool, m_locked, m_locked, 416);
	};
};

class CEnvProbeComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(uint32_t, m_nestingLevel, m_nestingLevel, 292);
		MAKE_PADDED_VAR(Vector, m_areaMarginFactor, m_areaMarginFactor, 464);
		MAKE_PADDED_VAR(Vector, m_areaDisplace, m_areaDisplace, 480);
		MAKE_PADDED_VAR(float, m_contribution, m_contribution, 496);
		MAKE_PADDED_VAR(float, m_effectIntensity, m_effectIntensity, 500);
		MAKE_PADDED_VAR(bool, m_isParallaxCorrected, m_isParallaxCorrected, 504);
		MAKE_PADDED_VAR(intptr_t, m_parallaxTransform, m_parallaxTransform, 512);
		MAKE_PADDED_VAR(SEnvProbeGenParams, m_genParams, m_genParams, 520);
		MAKE_PADDED_VAR(intptr_t, m_textureCacheHashes, m_textureCacheHashes, 720);
	};
};

class CEvaluatorVectorConst {
public:
	union {
	IEvaluatorVector ievaluatorvector;
		MAKE_PADDED_VAR(intptr_t, m_freeAxes, m_freeAxes, 88);
		MAKE_PADDED_VAR(bool, m_spill, m_spill, 92);
		MAKE_PADDED_VAR(Vector, m_value, m_value, 96);
	};
};

class CEvaluatorVectorCurve {
public:
	union {
	IEvaluatorVector ievaluatorvector;
		MAKE_PADDED_VAR(intptr_t, m_freeAxes, m_freeAxes, 88);
		MAKE_PADDED_VAR(bool, m_spill, m_spill, 92);
	};
};

class CEvaluatorVectorRandomUniform {
public:
	union {
	IEvaluatorVector ievaluatorvector;
		MAKE_PADDED_VAR(intptr_t, m_freeAxes, m_freeAxes, 88);
		MAKE_PADDED_VAR(bool, m_spill, m_spill, 92);
		MAKE_PADDED_VAR(Vector, m_min, m_min, 96);
		MAKE_PADDED_VAR(Vector, m_max, m_max, 112);
	};
};

class CEvaluatorVectorStartEnd {
public:
	union {
	IEvaluatorVector ievaluatorvector;
		MAKE_PADDED_VAR(intptr_t, m_freeAxes, m_freeAxes, 88);
		MAKE_PADDED_VAR(bool, m_spill, m_spill, 92);
		MAKE_PADDED_VAR(Vector, m_start, m_start, 96);
		MAKE_PADDED_VAR(Vector, m_end, m_end, 112);
	};
};

class CExplorationComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(intptr_t, m_explorationId, m_explorationId, 296);
		MAKE_PADDED_VAR(Vector, m_start, m_start, 304);
		MAKE_PADDED_VAR(Vector, m_end, m_end, 320);
		MAKE_PADDED_VAR(char*, m_componentForEvents, m_componentForEvents, 336);
		MAKE_PADDED_VAR(bool, m_internalExploration, m_internalExploration, 348);
	};
};

class CExtAnimFootstepEvent {
public:
	union {
	CExtAnimSoundEvent cextanimsoundevent;
		MAKE_PADDED_VAR(int32_t, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(float, m_startTime, m_startTime, 12);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 16);
		MAKE_PADDED_VAR(float, m_reportToScriptMinWeight, m_reportToScriptMinWeight, 20);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 24);
		MAKE_PADDED_VAR(intptr_t, m_soundEventName, m_soundEventName, 32);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 44);
		MAKE_PADDED_VAR(float, m_filterCooldown, m_filterCooldown, 48);
		MAKE_PADDED_VAR(int32_t, m_bone, m_bone, 52);
		MAKE_PADDED_VAR(intptr_t*, m_switchesToUpdate[2], m_switchesToUpdate, 56);
		MAKE_PADDED_VAR(intptr_t*, m_parametersToUpdate[2], m_parametersToUpdate, 68);
		MAKE_PADDED_VAR(bool, m_filter, m_filter, 80);
		MAKE_PADDED_VAR(bool, m_useDistanceParameter, m_useDistanceParameter, 81);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 84);
		MAKE_PADDED_VAR(float, m_decelDist, m_decelDist, 88);
		MAKE_PADDED_VAR(bool, m_fx, m_fx, 96);
		MAKE_PADDED_VAR(int32_t, m_customFxName, m_customFxName, 100);
	};
};

class CExternalProxyAttachment {
public:
	union {
	IAttachment iattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_originalAttachment, m_originalAttachment, 112);
	};
};

class CExternalProxyComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_originalClassName, m_originalClassName, 288);
	};
};

class CFlashProxyComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CFocusActionComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_actionName, m_actionName, 288);
	};
};

class CForceFieldEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CFXExplosionImplosionPhysicalForce {
public:
	union {
	IFXPhysicalForce ifxphysicalforce;
		MAKE_PADDED_VAR(intptr_t, m_fieldType, m_fieldType, 100);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 104);
		MAKE_PADDED_VAR(bool, m_simulateLocalyInEntity, m_simulateLocalyInEntity, 108);
		MAKE_PADDED_VAR(float, m_forceScale, m_forceScale, 112);
		MAKE_PADDED_VAR(float, m_applyFractureDamage, m_applyFractureDamage, 116);
	};
};

class CFXFractureDesctruction {
public:
	union {
	IFXPhysicalForce ifxphysicalforce;
		MAKE_PADDED_VAR(intptr_t, m_fieldType, m_fieldType, 100);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 104);
		MAKE_PADDED_VAR(bool, m_simulateLocalyInEntity, m_simulateLocalyInEntity, 108);
	};
};

class CGameplayEffectsComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CGameplayFXMedalion {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(float, m_beginRadius, m_beginRadius, 368);
		MAKE_PADDED_VAR(float, m_endRadius, m_endRadius, 372);
		MAKE_PADDED_VAR(float, m_ringRadiusTolerance, m_ringRadiusTolerance, 376);
		MAKE_PADDED_VAR(bool, m_debugLoop, m_debugLoop, 380);
		MAKE_PADDED_VAR(float, m_distPerSec, m_distPerSec, 384);
		MAKE_PADDED_VAR(float, m_sustainTime, m_sustainTime, 388);
		MAKE_PADDED_VAR(int32_t, m_highlightTag, m_highlightTag, 392);
	};
};

class CGameplayWindComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_power, m_power, 288);
	};
};

class CGameWorld {
public:
	union {
	CWorld cworld;
		MAKE_PADDED_VAR(SWorldEnvironmentParameters, m_environmentParameters, m_environmentParameters, 576);
		MAKE_PADDED_VAR(intptr_t, m_pathLib, m_pathLib, 2328);
		MAKE_PADDED_VAR(CUmbraScene, m_umbraScene, m_umbraScene, 2336);
		MAKE_PADDED_VAR(Vector, m_startupCameraPosition, m_startupCameraPosition, 2400);
		MAKE_PADDED_VAR(EulerAngles, m_startupCameraRotation, m_startupCameraRotation, 2416);
		MAKE_PADDED_VAR(float, m_worldDimensions, m_worldDimensions, 2428);
		MAKE_PADDED_VAR(intptr_t, m_terrainClipMap, m_terrainClipMap, 2456);
		MAKE_PADDED_VAR(intptr_t, m_globalWater, m_globalWater, 2464);
		MAKE_PADDED_VAR(CWorldShadowConfig, m_shadowConfig, m_shadowConfig, 2480);
		MAKE_PADDED_VAR(intptr_t, m_foliageScene, m_foliageScene, 2632);
		MAKE_PADDED_VAR(int32_t*, m_soundBanksDependency[2], m_soundBanksDependency, 2672);
		MAKE_PADDED_VAR(intptr_t*, m_soundEventsOnAttach[2], m_soundEventsOnAttach, 2684);
		MAKE_PADDED_VAR(intptr_t*, m_soundEventsOnDetach[2], m_soundEventsOnDetach, 2696);
		MAKE_PADDED_VAR(bool, m_newLayerGroupFormat, m_newLayerGroupFormat, 2708);
		MAKE_PADDED_VAR(C2dArray, m_initialyHidenLayerGroups, m_initialyHidenLayerGroups, 2712);
		MAKE_PADDED_VAR(bool, m_hasEmbeddedLayerInfos, m_hasEmbeddedLayerInfos, 2720);
		MAKE_PADDED_VAR(int32_t*, m_playGoChunks[2], m_playGoChunks, 2752);
		MAKE_PADDED_VAR(char*, m_minimapsPath, m_minimapsPath, 2764);
		MAKE_PADDED_VAR(char*, m_hubmapsPath, m_hubmapsPath, 2776);
		MAKE_PADDED_VAR(intptr_t, m_mergedGeometry, m_mergedGeometry, 2800);
		MAKE_PADDED_VAR(CCookedExplorations, m_cookedExplorations, m_cookedExplorations, 3240);
		MAKE_PADDED_VAR(CWayPointsCollectionsSet, m_cookedWaypoints, m_cookedWaypoints, 3248);
	};
};

class CHardAttachment {
public:
	union {
	IAttachment iattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
	};
};

class CInteractionAreaComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
	};
};

class CInteractionComponent {
public:
	union {
	CInteractionAreaComponent cinteractionareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
		MAKE_PADDED_VAR(char*, m_actionName, m_actionName, 424);
		MAKE_PADDED_VAR(bool, m_checkCameraVisibility, m_checkCameraVisibility, 448);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 449);
		MAKE_PADDED_VAR(bool, m_isEnabledInCombat, m_isEnabledInCombat, 450);
		MAKE_PADDED_VAR(bool, m_shouldIgnoreLocks, m_shouldIgnoreLocks, 451);
	};
};

class CInteractionToComponentComponent {
public:
	union {
	CInteractionComponent cinteractioncomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
		MAKE_PADDED_VAR(char*, m_actionName, m_actionName, 424);
		MAKE_PADDED_VAR(bool, m_checkCameraVisibility, m_checkCameraVisibility, 448);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 449);
		MAKE_PADDED_VAR(bool, m_isEnabledInCombat, m_isEnabledInCombat, 450);
		MAKE_PADDED_VAR(bool, m_shouldIgnoreLocks, m_shouldIgnoreLocks, 451);
		MAKE_PADDED_VAR(char*, m_targetComponentName, m_targetComponentName, 496);
	};
};

class CInteractionTooltipComponent {
public:
	union {
	CInteractionComponent cinteractioncomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
		MAKE_PADDED_VAR(char*, m_actionName, m_actionName, 424);
		MAKE_PADDED_VAR(bool, m_checkCameraVisibility, m_checkCameraVisibility, 448);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 449);
		MAKE_PADDED_VAR(bool, m_isEnabledInCombat, m_isEnabledInCombat, 450);
		MAKE_PADDED_VAR(bool, m_shouldIgnoreLocks, m_shouldIgnoreLocks, 451);
	};
};

class CInterestPointComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_active, m_active, 288);
		MAKE_PADDED_VAR(intptr_t, m_interestPoint, m_interestPoint, 296);
	};
};

class CInventoryComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(CEntityTemplate, m_containerTemplate, m_containerTemplate, 344);
		MAKE_PADDED_VAR(bool, m_turnOffSpawnItemsBudgeting, m_turnOffSpawnItemsBudgeting, 414);
		MAKE_PADDED_VAR(uint32_t, m_rebalanceEveryNSeconds, m_rebalanceEveryNSeconds, 424);
	};
};

class CItemEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(float, m_timeToDespawn, m_timeToDespawn, 368);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 400);
	};
};

class CJobAction {
public:
	union {
	CJobActionBase cjobactionbase;
		MAKE_PADDED_VAR(char*, m_categoryName, m_categoryName, 96);
		MAKE_PADDED_VAR(int32_t, m_animName, m_animName, 108);
		MAKE_PADDED_VAR(float, m_animBlendIn, m_animBlendIn, 112);
		MAKE_PADDED_VAR(float, m_animBlendOut, m_animBlendOut, 116);
		MAKE_PADDED_VAR(bool, m_fireBlendedEvents, m_fireBlendedEvents, 120);
		MAKE_PADDED_VAR(bool, m_isSkippable, m_isSkippable, 121);
		MAKE_PADDED_VAR(intptr_t, m_allowedLookAtLevel, m_allowedLookAtLevel, 124);
		MAKE_PADDED_VAR(int32_t, m_ignoreIfItemMounted, m_ignoreIfItemMounted, 128);
		MAKE_PADDED_VAR(int32_t, m_place, m_place, 136);
		MAKE_PADDED_VAR(int32_t, m_itemName, m_itemName, 140);
	};
};

class CJobBreakerComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_distance, m_distance, 288);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 292);
	};
};

class CJournalBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CJournalPath, m_entry, m_entry, 288);
		MAKE_PADDED_VAR(bool, m_showInfoOnScreen, m_showInfoOnScreen, 296);
	};
};

class CJournalCharacterDescription {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 168);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 172);
	};
};

class CJournalContainer {
public:
	union {
	CJournalContainerEntry cjournalcontainerentry;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
	};
};

class CJournalCreature {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 184);
		MAKE_PADDED_VAR(char*, m_image, m_image, 188);
		MAKE_PADDED_VAR(CEntityTemplate, m_entityTemplate, m_entityTemplate, 200);
		MAKE_PADDED_VAR(int32_t*, m_itemsUsedAgainstCreature[2], m_itemsUsedAgainstCreature, 232);
	};
};

class CJournalCreatureDescriptionGroup {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
	};
};

class CJournalCreatureGameplayHintGroup {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
	};
};

class CJournalCreatureHuntingClueGroup {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
	};
};

class CJournalCreatureVirtualGroup {
public:
	union {
	CJournalLink cjournallink;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(char*, m_linkedObjectPath, m_linkedObjectPath, 128);
	};
};

class CJournalCreatureVitalSpotGroup {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
	};
};

class CJournalGlossary {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(intptr_t, m_title, m_title, 184);
		MAKE_PADDED_VAR(char*, m_image, m_image, 188);
	};
};

class CJournalItem {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(int32_t, m_item, m_item, 184);
		MAKE_PADDED_VAR(char*, m_image, m_image, 188);
		MAKE_PADDED_VAR(intptr_t, m_description, m_description, 200);
	};
};

class CJournalPlace {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 184);
		MAKE_PADDED_VAR(char*, m_image, m_image, 188);
	};
};

class CJournalQuest {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(intptr_t, m_type, m_type, 184);
		MAKE_PADDED_VAR(intptr_t, m_contentType, m_contentType, 188);
		MAKE_PADDED_VAR(uint32_t, m_world, m_world, 192);
		MAKE_PADDED_VAR(CJournalPath, m_huntingQuestPath, m_huntingQuestPath, 200);
		MAKE_PADDED_VAR(intptr_t, m_title, m_title, 208);
		MAKE_PADDED_VAR(CQuestPhase, m_questPhase, m_questPhase, 216);
	};
};

class CJournalQuestBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CJournalPath, m_questEntry, m_questEntry, 288);
		MAKE_PADDED_VAR(bool, m_showInfoOnScreen, m_showInfoOnScreen, 296);
		MAKE_PADDED_VAR(bool, m_track, m_track, 297);
		MAKE_PADDED_VAR(bool, m_enableAutoSave, m_enableAutoSave, 298);
	};
};

class CJournalQuestDescriptionGroup {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
	};
};

class CJournalQuestHuntingBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CJournalPath, m_questHuntingTag, m_questHuntingTag, 288);
		MAKE_PADDED_VAR(CJournalPath, m_creatureHuntingClue, m_creatureHuntingClue, 296);
	};
};

class CJournalQuestMappinStateBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CJournalPath, m_mappinEntry, m_mappinEntry, 288);
		MAKE_PADDED_VAR(bool, m_enableOnlyIfLatest, m_enableOnlyIfLatest, 296);
		MAKE_PADDED_VAR(bool, m_disableAllOtherMapPins, m_disableAllOtherMapPins, 297);
	};
};

class CJournalQuestMonsterKnownGraphBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CJournalPath, m_manualQuest, m_manualQuest, 288);
	};
};

class CJournalQuestObjective {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(intptr_t, m_title, m_title, 184);
		MAKE_PADDED_VAR(char*, m_image, m_image, 188);
		MAKE_PADDED_VAR(uint32_t, m_world, m_world, 200);
		MAKE_PADDED_VAR(intptr_t, m_counterType, m_counterType, 204);
		MAKE_PADDED_VAR(uint32_t, m_count, m_count, 208);
		MAKE_PADDED_VAR(int32_t, m_bookShortcut, m_bookShortcut, 212);
		MAKE_PADDED_VAR(int32_t, m_itemShortcut, m_itemShortcut, 216);
		MAKE_PADDED_VAR(int32_t, m_recipeShortcut, m_recipeShortcut, 220);
		MAKE_PADDED_VAR(CJournalPath, m_monsterShortcut, m_monsterShortcut, 224);
		MAKE_PADDED_VAR(bool, m_mutuallyExclusive, m_mutuallyExclusive, 232);
	};
};

class CJournalQuestObjectiveCounterGraphBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CJournalPath, m_manualObjective, m_manualObjective, 288);
		MAKE_PADDED_VAR(bool, m_showInfoOnScreen, m_showInfoOnScreen, 296);
	};
};

class CJournalQuestPhase {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
	};
};

class CJournalQuestTrackBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CJournalPath, m_questEntry, m_questEntry, 288);
		MAKE_PADDED_VAR(CJournalPath, m_objectiveEntry, m_objectiveEntry, 296);
	};
};

class CJournalStoryBookPage {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(intptr_t, m_title, m_title, 184);
		MAKE_PADDED_VAR(uint32_t, m_world, m_world, 188);
	};
};

class CManageSwitchBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_switchTag, m_switchTag, 288);
		MAKE_PADDED_VAR(intptr_t*, m_operations[2], m_operations, 292);
		MAKE_PADDED_VAR(bool, m_force, m_force, 304);
		MAKE_PADDED_VAR(bool, m_skipEvents, m_skipEvents, 305);
	};
};

class CMaterialOverrideAttachment {
public:
	union {
	IAttachment iattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
	};
};

class CMaterialOverrideAttachmentSelectByChunk {
public:
	union {
	CMaterialOverrideAttachment cmaterialoverrideattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(uint32_t*, m_chunkIndices[2], m_chunkIndices, 112);
	};
};

class CMaterialOverrideComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isGlobalOverride, m_isGlobalOverride, 288);
		MAKE_PADDED_VAR(CMaterialInstance, m_override, m_override, 296);
	};
};

class CMergedWorldGeometryEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(uint64_t, m_sourceDataHash, m_sourceDataHash, 368);
		MAKE_PADDED_VAR(Box, m_worldBounds, m_worldBounds, 384);
		MAKE_PADDED_VAR(CMergedWorldGeometryGridCoordinates, m_gridCoordinates, m_gridCoordinates, 416);
		MAKE_PADDED_VAR(uint32_t, m_statsDataSize, m_statsDataSize, 420);
		MAKE_PADDED_VAR(uint32_t, m_statsNumTriangles, m_statsNumTriangles, 424);
		MAKE_PADDED_VAR(uint32_t, m_statsNumVertices, m_statsNumVertices, 428);
	};
};

class CMorphedMeshManagerComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_Default_morph_ratio, m_Default_morph_ratio, 288);
		MAKE_PADDED_VAR(CCurve, m_morphCurve, m_morphCurve, 296);
		MAKE_PADDED_VAR(float, m_morphRatio, m_morphRatio, 304);
	};
};

class CNavmeshGenerationRootComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CNavmeshInputAttachment {
public:
	union {
	IAttachment iattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
	};
};

class CNormalBlendAttachment {
public:
	union {
	IAttachment iattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
	};
};

class CNormalBlendComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(IMaterial, m_sourceMaterial, m_sourceMaterial, 288);
		MAKE_PADDED_VAR(ITexture, m_sourceNormalTexture, m_sourceNormalTexture, 296);
		MAKE_PADDED_VAR(CMaterialInstance, m_normalBlendMaterial, m_normalBlendMaterial, 304);
		MAKE_PADDED_VAR(Vector*, m_normalBlendAreas[2], m_normalBlendAreas, 312);
		MAKE_PADDED_VAR(intptr_t, m_dataSource, m_dataSource, 328);
		MAKE_PADDED_VAR(bool, m_useMainTick, m_useMainTick, 336);
	};
};

class COverrideStreamingDistanceComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(uint32_t, m_streamingDistanceMinOverride, m_streamingDistanceMinOverride, 288);
	};
};

class CPathComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 288);
		MAKE_PADDED_VAR(SSimpleCurve, m_speedCurve, m_speedCurve, 432);
	};
};

class CPeristentEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
	};
};

class CPhantomAttachment {
public:
	union {
	CHardAttachment chardattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
		MAKE_PADDED_VAR(bool, m_takeVertexSimulationPosition, m_takeVertexSimulationPosition, 136);
	};
};

class CPhantomComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_collisionGroupName, m_collisionGroupName, 304);
		MAKE_PADDED_VAR(int32_t*, m_triggeringCollisionGroupNames[2], m_triggeringCollisionGroupNames, 308);
		MAKE_PADDED_VAR(intptr_t, m_shapeType, m_shapeType, 320);
		MAKE_PADDED_VAR(Vector, m_shapeDimensions, m_shapeDimensions, 336);
		MAKE_PADDED_VAR(int32_t, m_onTriggerEnteredScriptEvent, m_onTriggerEnteredScriptEvent, 364);
		MAKE_PADDED_VAR(int32_t, m_onTriggerExitedScriptEvent, m_onTriggerExitedScriptEvent, 368);
		MAKE_PADDED_VAR(bool, m_eventsCalledOnComponent, m_eventsCalledOnComponent, 372);
		MAKE_PADDED_VAR(bool, m_useInQueries, m_useInQueries, 373);
		MAKE_PADDED_VAR(CMesh, m_meshCollision, m_meshCollision, 392);
	};
};

class CPilotComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CPlayPropertyAnimationAction {
public:
	union {
	IEntityTargetingAction ientitytargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 104);
		MAKE_PADDED_VAR(uint32_t, m_loopCount, m_loopCount, 108);
		MAKE_PADDED_VAR(float, m_lengthScale, m_lengthScale, 112);
		MAKE_PADDED_VAR(intptr_t, m_mode, m_mode, 116);
	};
};

class CPoseCompressionCamera {
public:
	union {
	CPoseCompressionDefault cposecompressiondefault;
		MAKE_PADDED_VAR(char*, m_firstRotBoneName, m_firstRotBoneName, 88);
		MAKE_PADDED_VAR(char*, m_lastRotBoneName, m_lastRotBoneName, 100);
		MAKE_PADDED_VAR(char*, m_firstTransBoneName, m_firstTransBoneName, 112);
		MAKE_PADDED_VAR(char*, m_lastTransBoneName, m_lastTransBoneName, 124);
		MAKE_PADDED_VAR(int32_t, m_firstRotBone, m_firstRotBone, 136);
		MAKE_PADDED_VAR(int32_t, m_lastRotBone, m_lastRotBone, 140);
		MAKE_PADDED_VAR(int32_t, m_firstTransBone, m_firstTransBone, 144);
		MAKE_PADDED_VAR(int32_t, m_lastTransBone, m_lastTransBone, 148);
		MAKE_PADDED_VAR(intptr_t, m_compressTranslationType, m_compressTranslationType, 152);
	};
};

class CPoseCompressionCharacter {
public:
	union {
	CPoseCompressionDefault cposecompressiondefault;
		MAKE_PADDED_VAR(char*, m_firstRotBoneName, m_firstRotBoneName, 88);
		MAKE_PADDED_VAR(char*, m_lastRotBoneName, m_lastRotBoneName, 100);
		MAKE_PADDED_VAR(char*, m_firstTransBoneName, m_firstTransBoneName, 112);
		MAKE_PADDED_VAR(char*, m_lastTransBoneName, m_lastTransBoneName, 124);
		MAKE_PADDED_VAR(int32_t, m_firstRotBone, m_firstRotBone, 136);
		MAKE_PADDED_VAR(int32_t, m_lastRotBone, m_lastRotBone, 140);
		MAKE_PADDED_VAR(int32_t, m_firstTransBone, m_firstTransBone, 144);
		MAKE_PADDED_VAR(int32_t, m_lastTransBone, m_lastTransBone, 148);
		MAKE_PADDED_VAR(intptr_t, m_compressTranslationType, m_compressTranslationType, 152);
		MAKE_PADDED_VAR(char*, m_leftWeaponName, m_leftWeaponName, 160);
		MAKE_PADDED_VAR(char*, m_rightWeaponName, m_rightWeaponName, 172);
		MAKE_PADDED_VAR(int32_t, m_leftWeapon, m_leftWeapon, 184);
		MAKE_PADDED_VAR(int32_t, m_rightWeapon, m_rightWeapon, 188);
	};
};

class CQuest {
public:
	union {
	CQuestPhase cquestphase;
		MAKE_PADDED_VAR(intptr_t, m_graph, m_graph, 104);
	};
};

class CQuestAndBlock {
public:
	union {
	CQuestVariedInputsBlock cquestvariedinputsblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(uint32_t, m_inputsCount, m_inputsCount, 288);
	};
};

class CQuestBehaviorCtrlBlock {
public:
	union {
	CQuestScopeBlock cquestscopeblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CQuestPhase, m_phase, m_phase, 368);
		MAKE_PADDED_VAR(intptr_t, m_embeddedGraph, m_embeddedGraph, 376);
		MAKE_PADDED_VAR(CQuestPhase, m_phaseHandle, m_phaseHandle, 392);
		MAKE_PADDED_VAR(char*, m_requiredWorld, m_requiredWorld, 424);
		MAKE_PADDED_VAR(intptr_t*, m_groups[2], m_groups, 488);
		MAKE_PADDED_VAR(float, m_activationTimeout, m_activationTimeout, 500);
		MAKE_PADDED_VAR(intptr_t, m_saveMode, m_saveMode, 504);
	};
};

class CQuestBehaviorEventBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t*, m_events[2], m_events, 296);
		MAKE_PADDED_VAR(float, m_timeout, m_timeout, 308);
	};
};

class CQuestBehaviorNotificationBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t*, m_notifications[2], m_notifications, 328);
	};
};

class CQuestCameraBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
	};
};

class CQuestChangeWorldBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(char*, m_worldFilePath, m_worldFilePath, 288);
		MAKE_PADDED_VAR(int32_t, m_newWorld, m_newWorld, 300);
		MAKE_PADDED_VAR(char*, m_loadingMovieName, m_loadingMovieName, 304);
		MAKE_PADDED_VAR(intptr_t, m_targetTag, m_targetTag, 316);
	};
};

class CQuestCharacterCustomizerBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_actorTag, m_actorTag, 288);
		MAKE_PADDED_VAR(intptr_t*, m_operations[2], m_operations, 292);
	};
};

class CQuestCheckpointBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(bool, m_enableSaving, m_enableSaving, 288);
		MAKE_PADDED_VAR(bool, m_ignoreSaveLocks, m_ignoreSaveLocks, 289);
	};
};

class CQuestConditionBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t, m_questCondition, m_questCondition, 288);
	};
};

class CQuestContentActivatorBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_playGoChunk, m_playGoChunk, 288);
	};
};

class CQuestContextDialogBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CStoryScene, m_scene, m_scene, 328);
		MAKE_PADDED_VAR(CStoryScene, m_targetScene, m_targetScene, 360);
	};
};

class CQuestCutControlBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(bool, m_permanent, m_permanent, 288);
	};
};

class CQuestDeletionMarkerBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(intptr_t*, m_guids[2], m_guids, 288);
	};
};

class CQuestEncounterActivator {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_encounterTag, m_encounterTag, 288);
		MAKE_PADDED_VAR(bool, m_deactivateEncounter, m_deactivateEncounter, 292);
	};
};

class CQuestEncounterFullRespawn {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_encounterTag, m_encounterTag, 288);
	};
};

class CQuestEncounterManagerBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_encounterTag, m_encounterTag, 296);
		MAKE_PADDED_VAR(bool, m_enableEncounter, m_enableEncounter, 300);
		MAKE_PADDED_VAR(bool, m_forceDespawnDetached, m_forceDespawnDetached, 301);
		MAKE_PADDED_VAR(int32_t, m_encounterSpawnPhase, m_encounterSpawnPhase, 304);
	};
};

class CQuestEncounterPhaseBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_encounterTag, m_encounterTag, 296);
		MAKE_PADDED_VAR(int32_t, m_encounterSpawnPhase, m_encounterSpawnPhase, 300);
	};
};

class CQuestEndBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
	};
};

class CQuestEntityMotionBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_entityTag, m_entityTag, 288);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 292);
		MAKE_PADDED_VAR(intptr_t, m_targetTransform, m_targetTransform, 296);
		MAKE_PADDED_VAR(Vector, m_positionDelta, m_positionDelta, 304);
		MAKE_PADDED_VAR(EulerAngles, m_rotationDelta, m_rotationDelta, 320);
		MAKE_PADDED_VAR(Vector, m_scaleDelta, m_scaleDelta, 336);
		MAKE_PADDED_VAR(SSimpleCurve, m_animationCurve, m_animationCurve, 352);
	};
};

class CQuestFactsDBChangingBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(char*, m_factID, m_factID, 288);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 300);
		MAKE_PADDED_VAR(bool, m_setExactValue, m_setExactValue, 304);
	};
};

class CQuestFactsDBCondition {
public:
	union {
	CQuestFactsDBConditionBase cquestfactsdbconditionbase;
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 88);
		MAKE_PADDED_VAR(bool, m_active, m_active, 92);
		MAKE_PADDED_VAR(char*, m_factId, m_factId, 104);
		MAKE_PADDED_VAR(int32_t, m_value, m_value, 116);
		MAKE_PADDED_VAR(intptr_t, m_compareFunc, m_compareFunc, 120);
		MAKE_PADDED_VAR(intptr_t, m_queryFact, m_queryFact, 124);
	};
};

class CQuestFastForwardCommunitiesBlock {
public:
	union {
	CQuestGraphBlock cquestgraphblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(bool, m_manageBlackscreen, m_manageBlackscreen, 288);
		MAKE_PADDED_VAR(bool, m_respawnEveryone, m_respawnEveryone, 289);
		MAKE_PADDED_VAR(bool, m_dontSpawnHostilesClose, m_dontSpawnHostilesClose, 290);
		MAKE_PADDED_VAR(float, m_timeLimit, m_timeLimit, 292);
	};
};

class CQuestLogStateBlock {
public:
	union {
	CQuestTestBlock cquesttestblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(char*, m_state, m_state, 288);
	};
};

class CQuestMemoryDumpBlock {
public:
	union {
	CQuestTestBlock cquesttestblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(char*, m_tag, m_tag, 288);
	};
};

class CQuestPerformGCBlock {
public:
	union {
	CQuestTestBlock cquesttestblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
	};
};

class CQuestPhaseBlock {
public:
	union {
	CQuestScopeBlock cquestscopeblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(CQuestPhase, m_phase, m_phase, 368);
		MAKE_PADDED_VAR(intptr_t, m_embeddedGraph, m_embeddedGraph, 376);
		MAKE_PADDED_VAR(CQuestPhase, m_phaseHandle, m_phaseHandle, 392);
		MAKE_PADDED_VAR(char*, m_requiredWorld, m_requiredWorld, 424);
		MAKE_PADDED_VAR(char**, m_layersToLoad[2], m_layersToLoad, 520);
		MAKE_PADDED_VAR(bool, m_isBlackscreenPhase, m_isBlackscreenPhase, 532);
		MAKE_PADDED_VAR(float, m_blackscreenFadeDuration, m_blackscreenFadeDuration, 536);
		MAKE_PADDED_VAR(intptr_t, m_saveMode, m_saveMode, 540);
		MAKE_PADDED_VAR(int32_t*, m_soundBanksDependency[2], m_soundBanksDependency, 544);
		MAKE_PADDED_VAR(int32_t, m_playGoChunk, m_playGoChunk, 556);
		MAKE_PADDED_VAR(bool, m_purgeSavedData, m_purgeSavedData, 560);
	};
};

class CQuestPhaseInputBlock {
public:
	union {
	CQuestPhaseIOBlock cquestphaseioblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_socketID, m_socketID, 288);
	};
};

class CQuestRiderScriptedActionsBlock {
public:
	union {
	CBaseQuestScriptedActionsBlock cbasequestscriptedactionsblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 288);
		MAKE_PADDED_VAR(intptr_t, m_actionsPriority, m_actionsPriority, 304);
		MAKE_PADDED_VAR(bool, m_onlyOneActor, m_onlyOneActor, 308);
		MAKE_PADDED_VAR(bool, m_handleBehaviorOutcome, m_handleBehaviorOutcome, 309);
		MAKE_PADDED_VAR(IRiderActionTree, m_ai, m_ai, 344);
	};
};

class CQuestScriptedActionsBlock {
public:
	union {
	CBaseQuestScriptedActionsBlock cbasequestscriptedactionsblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_npcTag, m_npcTag, 288);
		MAKE_PADDED_VAR(intptr_t, m_actionsPriority, m_actionsPriority, 304);
		MAKE_PADDED_VAR(bool, m_onlyOneActor, m_onlyOneActor, 308);
		MAKE_PADDED_VAR(bool, m_handleBehaviorOutcome, m_handleBehaviorOutcome, 309);
		MAKE_PADDED_VAR(IAIActionTree, m_ai, m_ai, 344);
		MAKE_PADDED_VAR(intptr_t*, m_actions[2], m_actions, 352);
	};
};

class CQuestStaticCameraRunBlock {
public:
	union {
	CQuestCameraBlock cquestcamerablock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_cameraTag, m_cameraTag, 288);
	};
};

class CQuestStaticCameraSequenceBlock {
public:
	union {
	CQuestCameraBlock cquestcamerablock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t*, m_cameras[2], m_cameras, 288);
		MAKE_PADDED_VAR(float, m_maxWaitTimePerCamera, m_maxWaitTimePerCamera, 300);
	};
};

class CQuestStaticCameraSwitchBlock {
public:
	union {
	CQuestCameraBlock cquestcamerablock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 116);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 128);
		MAKE_PADDED_VAR(SCachedConnections*, m_cachedConnections[2], m_cachedConnections, 144);
		MAKE_PADDED_VAR(bool, m_hasPatchOutput, m_hasPatchOutput, 156);
		MAKE_PADDED_VAR(bool, m_hasTerminationInput, m_hasTerminationInput, 157);
		MAKE_PADDED_VAR(bool, m_forceKeepLoadingScreen, m_forceKeepLoadingScreen, 158);
		MAKE_PADDED_VAR(int32_t, m_nextCameraTag, m_nextCameraTag, 288);
	};
};

class CR4EffectComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 288);
		MAKE_PADDED_VAR(intptr_t, m_effectTarget, m_effectTarget, 296);
		MAKE_PADDED_VAR(int32_t, m_targetBone, m_targetBone, 304);
	};
};

class CR4Game {
public:
	union {
	CCommonGame ccommongame;
		MAKE_PADDED_VAR(CWorld, m_activeWorld, m_activeWorld, 240);
		MAKE_PADDED_VAR(intptr_t, m_inputManager, m_inputManager, 384);
		MAKE_PADDED_VAR(intptr_t, m_visualDebug, m_visualDebug, 480);
		MAKE_PADDED_VAR(intptr_t, m_timerScriptKeyword, m_timerScriptKeyword, 47504);
		MAKE_PADDED_VAR(CGameResource, m_gameResource, m_gameResource, 47512);
		MAKE_PADDED_VAR(intptr_t, m_player, m_player, 47616);
		MAKE_PADDED_VAR(intptr_t, m_dlcManager, m_dlcManager, 72536);
		MAKE_PADDED_VAR(intptr_t, m_ticketsDefaultConfiguration, m_ticketsDefaultConfiguration, 72784);
		MAKE_PADDED_VAR(CGlabalTicketSourceProvider, m_globalTicketSource, m_globalTicketSource, 72792);
		MAKE_PADDED_VAR(CCarryableItemsRegistry, m_carryableItemsRegistry, m_carryableItemsRegistry, 72800);
		MAKE_PADDED_VAR(intptr_t, m_horseCamera, m_horseCamera, 72808);
		MAKE_PADDED_VAR(intptr_t, m_telemetryScriptProxy, m_telemetryScriptProxy, 72816);
		MAKE_PADDED_VAR(intptr_t, m_secondScreenScriptProxy, m_secondScreenScriptProxy, 72824);
		MAKE_PADDED_VAR(intptr_t, m_kinectSpeechRecognizerListenerScriptProxy, m_kinectSpeechRecognizerListenerScriptProxy, 72856);
		MAKE_PADDED_VAR(intptr_t, m_globalEventsScriptsDispatcher, m_globalEventsScriptsDispatcher, 72864);
		MAKE_PADDED_VAR(W3GameParams, m_params, m_params, 72880);
		MAKE_PADDED_VAR(intptr_t, m_worldDLCExtender, m_worldDLCExtender, 72896);
	};
};

class CR4HumanoidCombatComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CR4InteriorAreaEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(int32_t, m_entranceTag, m_entranceTag, 368);
		MAKE_PADDED_VAR(char*, m_texture, m_texture, 372);
	};
};

class CRainActionPointSelector {
public:
	union {
	CWanderActionPointSelector cwanderactionpointselector;
		MAKE_PADDED_VAR(SEncounterActionPointSelectorPair*, m_categories[2], m_categories, 48);
		MAKE_PADDED_VAR(intptr_t, m_areaTags, m_areaTags, 60);
		MAKE_PADDED_VAR(float, m_delay, m_delay, 72);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 76);
		MAKE_PADDED_VAR(intptr_t, m_apTags, m_apTags, 80);
		MAKE_PADDED_VAR(int32_t, m_apAreaTag, m_apAreaTag, 92);
		MAKE_PADDED_VAR(bool, m_chooseClosestAP, m_chooseClosestAP, 96);
	};
};

class CReactionSceneActorComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_cooldownInterval, m_cooldownInterval, 288);
		MAKE_PADDED_VAR(bool, m_sceneStartedSuccesfully, m_sceneStartedSuccesfully, 308);
	};
};

class CScriptedComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CSeatComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isPilot, m_isPilot, 304);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 308);
	};
};

class CSelfUpdatingComponent {
public:
	union {
	CScriptedComponent cscriptedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_tickedByDefault, m_tickedByDefault, 304);
		MAKE_PADDED_VAR(intptr_t, m_tickGroup, m_tickGroup, 308);
	};
};

class CSimpleBuoyancyComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_waterOffset, m_waterOffset, 288);
		MAKE_PADDED_VAR(float, m_linearDamping, m_linearDamping, 292);
		MAKE_PADDED_VAR(Vector, m_pointFront, m_pointFront, 320);
		MAKE_PADDED_VAR(Vector, m_pointBack, m_pointBack, 336);
		MAKE_PADDED_VAR(Vector, m_pointRight, m_pointRight, 352);
		MAKE_PADDED_VAR(Vector, m_pointLeft, m_pointLeft, 368);
	};
};

class CSkeletalAnimatedComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 328);
		MAKE_PADDED_VAR(CSkeletalAnimationSet, m_animset, m_animset, 336);
		MAKE_PADDED_VAR(intptr_t, m_controller, m_controller, 344);
		MAKE_PADDED_VAR(bool, m_processEvents, m_processEvents, 352);
	};
};

class CSkinningAttachment {
public:
	union {
	CHardAttachment chardattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
	};
};

class CSkyTransformComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(intptr_t, m_transformType, m_transformType, 304);
		MAKE_PADDED_VAR(float, m_cameraDistance, m_cameraDistance, 308);
		MAKE_PADDED_VAR(float, m_uniformScaleDistance, m_uniformScaleDistance, 312);
	};
};

class CSkyTransformEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_transformType, m_transformType, 368);
		MAKE_PADDED_VAR(bool, m_alignToPlayer, m_alignToPlayer, 372);
		MAKE_PADDED_VAR(bool, m_onlyYaw, m_onlyYaw, 373);
	};
};

class CSlotComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SSlotInfo*, m_slots[2], m_slots, 296);
		MAKE_PADDED_VAR(CSkeleton, m_sourceSkeleton, m_sourceSkeleton, 312);
	};
};

class CSoundAmbientEmitter {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_soundEvents, m_soundEvents, 368);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 380);
		MAKE_PADDED_VAR(bool, m_occlusionEnabled, m_occlusionEnabled, 384);
	};
};

class CSoundEmitterComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t*, m_banksDependency[2], m_banksDependency, 324);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 340);
		MAKE_PADDED_VAR(bool, m_occlusionEnabled, m_occlusionEnabled, 344);
		MAKE_PADDED_VAR(intptr_t, m_loopStart, m_loopStart, 488);
		MAKE_PADDED_VAR(intptr_t, m_loopStop, m_loopStop, 500);
		MAKE_PADDED_VAR(intptr_t, m_intensityParameter, m_intensityParameter, 512);
		MAKE_PADDED_VAR(intptr_t*, m_eventsOnAttach[2], m_eventsOnAttach, 524);
		MAKE_PADDED_VAR(intptr_t*, m_eventsOnDetach[2], m_eventsOnDetach, 536);
		MAKE_PADDED_VAR(SSoundSwitch*, m_switchesOnAttach[2], m_switchesOnAttach, 548);
		MAKE_PADDED_VAR(SSoundProperty*, m_rtpcsOnAttach[2], m_rtpcsOnAttach, 560);
		MAKE_PADDED_VAR(bool, m_isInGameMusic, m_isInGameMusic, 657);
		MAKE_PADDED_VAR(bool, m_updateAzimuth, m_updateAzimuth, 658);
		MAKE_PADDED_VAR(char*, m_listenerOverride, m_listenerOverride, 660);
	};
};

class CSoundListenerComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CSpawnTreeDecoratorInitializersList {
public:
	union {
	ISpawnTreeDecorator ispawntreedecorator;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 144);
		MAKE_PADDED_VAR(intptr_t*, m_topInitializers[2], m_topInitializers, 152);
	};
};

class CSpawnTreeVoidDecorator {
public:
	union {
	ISpawnTreeDecorator ispawntreedecorator;
		MAKE_PADDED_VAR(uint64_t, m_id, m_id, 96);
		MAKE_PADDED_VAR(int32_t, m_nodeName, m_nodeName, 104);
		MAKE_PADDED_VAR(intptr_t, m_childNode, m_childNode, 144);
	};
};

class CSpriteComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
	};
};

class CStickerComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(char*, m_text, m_text, 288);
		MAKE_PADDED_VAR(Color, m_textColor, m_textColor, 300);
	};
};

class CStorySceneActorEffectEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 228);
		MAKE_PADDED_VAR(bool, m_startOrStop, m_startOrStop, 232);
		MAKE_PADDED_VAR(bool, m_persistAcrossSections, m_persistAcrossSections, 233);
	};
};

class CStorySceneActorEffectEventDuration {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 252);
	};
};

class CStorySceneAddFactEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(char*, m_factId, m_factId, 224);
		MAKE_PADDED_VAR(int32_t, m_expireTime, m_expireTime, 236);
		MAKE_PADDED_VAR(int32_t, m_factValue, m_factValue, 240);
	};
};

class CStorySceneChoiceLine {
public:
	union {
	CStorySceneLinkElement cstoryscenelinkelement;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(intptr_t, m_choiceLine, m_choiceLine, 120);
		MAKE_PADDED_VAR(intptr_t, m_choiceComment, m_choiceComment, 124);
		MAKE_PADDED_VAR(intptr_t, m_questCondition, m_questCondition, 128);
		MAKE_PADDED_VAR(intptr_t*, m_memo[2], m_memo, 136);
		MAKE_PADDED_VAR(bool, m_singleUseChoice, m_singleUseChoice, 148);
		MAKE_PADDED_VAR(bool, m_emphasisLine, m_emphasisLine, 149);
		MAKE_PADDED_VAR(intptr_t, m_action, m_action, 152);
	};
};

class CStorySceneComponent {
public:
	union {
	CSpriteComponent cspritecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(CStoryScene, m_storyScene, m_storyScene, 304);
	};
};

class CStorySceneControlPart {
public:
	union {
	CStorySceneLinkElement cstoryscenelinkelement;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
	};
};

class CStorySceneCutsceneSectionBlock {
public:
	union {
	CStorySceneSectionBlock cstoryscenesectionblock;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(intptr_t, m_section, m_section, 112);
	};
};

class CStorySceneDanglesShakeEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(float, m_factor, m_factor, 228);
	};
};

class CStorySceneDanglesShakeEventInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(CStorySceneDanglesShakeEventInterpolationKey*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneDisableDangleEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 228);
	};
};

class CStorySceneDisablePhysicsClothEvent {
public:
	union {
	CStorySceneEvent cstorysceneevent;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 224);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 228);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 232);
	};
};

class CStorySceneEventAnimClip {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
	};
};

class CStorySceneEventBlend {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 248);
	};
};

class CStorySceneEventCameraAnim {
public:
	union {
	CStorySceneEventAnimClip cstorysceneeventanimclip;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 336);
		MAKE_PADDED_VAR(bool, m_isIdle, m_isIdle, 340);
	};
};

class CStorySceneEventCameraBlend {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(SStorySceneCameraBlendKey*, m_blendKeys[2], m_blendKeys, 260);
		MAKE_PADDED_VAR(intptr_t, m_interpolationType, m_interpolationType, 272);
	};
};

class CStorySceneEventCameraInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(CStorySceneEventCameraInterpolationKey*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventCameraLightInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(CStorySceneEventCameraLightInterpolationKey*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventChangePose {
public:
	union {
	CStorySceneEventAnimClip cstorysceneeventanimclip;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_stateName, m_stateName, 352);
		MAKE_PADDED_VAR(int32_t, m_status, m_status, 356);
		MAKE_PADDED_VAR(int32_t, m_emotionalState, m_emotionalState, 360);
		MAKE_PADDED_VAR(int32_t, m_poseName, m_poseName, 364);
		MAKE_PADDED_VAR(int32_t, m_transitionAnimation, m_transitionAnimation, 368);
		MAKE_PADDED_VAR(bool, m_useMotionExtraction, m_useMotionExtraction, 372);
		MAKE_PADDED_VAR(int32_t, m_forceBodyIdleAnimation, m_forceBodyIdleAnimation, 376);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 380);
		MAKE_PADDED_VAR(SCurveData, m_weightCurve, m_weightCurve, 384);
		MAKE_PADDED_VAR(intptr_t, m_resetCloth, m_resetCloth, 408);
	};
};

class CStorySceneEventClothDisablingInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(CStorySceneEventClothDisablingInterpolationKey*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventCurveAnimation {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 248);
	};
};

class CStorySceneEventCurveBlend {
public:
	union {
	CStorySceneEventBlend cstorysceneeventblend;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 248);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 264);
	};
};

class CStorySceneEventDangleDisablingInterpolation {
public:
	union {
	CStorySceneEventInterpolation cstorysceneeventinterpolation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(intptr_t*, m_keyGuids[2], m_keyGuids, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolationMethod, m_interpolationMethod, 236);
		MAKE_PADDED_VAR(intptr_t, m_easeInStyle, m_easeInStyle, 240);
		MAKE_PADDED_VAR(float, m_easeInParameter, m_easeInParameter, 244);
		MAKE_PADDED_VAR(intptr_t, m_easeOutStyle, m_easeOutStyle, 248);
		MAKE_PADDED_VAR(float, m_easeOutParameter, m_easeOutParameter, 252);
		MAKE_PADDED_VAR(CStorySceneEventDangleDisablingInterpolationKey*, m_keys[2], m_keys, 256);
	};
};

class CStorySceneEventDebugComment {
public:
	union {
	CStorySceneEventDuration cstorysceneeventduration;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 248);
	};
};

class CStorySceneEventEnhancedCameraBlend {
public:
	union {
	CStorySceneEventCurveBlend cstorysceneeventcurveblend;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 248);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 264);
		MAKE_PADDED_VAR(StorySceneCameraDefinition, m_baseCameraDefinition, m_baseCameraDefinition, 400);
	};
};

class CStorySceneEventEnterActor {
public:
	union {
	CStorySceneEventAnimClip cstorysceneeventanimclip;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_behEvent, m_behEvent, 336);
	};
};

class CStorySceneEventExitActor {
public:
	union {
	CStorySceneEventAnimClip cstorysceneeventanimclip;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_behEvent, m_behEvent, 336);
	};
};

class CStorySceneEventMimics {
public:
	union {
	CStorySceneEventAnimClip cstorysceneeventanimclip;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_stateName, m_stateName, 352);
		MAKE_PADDED_VAR(int32_t, m_mimicsEmotionalState, m_mimicsEmotionalState, 356);
		MAKE_PADDED_VAR(int32_t, m_mimicsLayer_Eyes, m_mimicsLayer_Eyes, 360);
		MAKE_PADDED_VAR(int32_t, m_mimicsLayer_Pose, m_mimicsLayer_Pose, 364);
		MAKE_PADDED_VAR(int32_t, m_mimicsLayer_Animation, m_mimicsLayer_Animation, 368);
		MAKE_PADDED_VAR(int32_t, m_transitionAnimation, m_transitionAnimation, 372);
		MAKE_PADDED_VAR(int32_t, m_forceMimicsIdleAnimation_Eyes, m_forceMimicsIdleAnimation_Eyes, 376);
		MAKE_PADDED_VAR(int32_t, m_forceMimicsIdleAnimation_Pose, m_forceMimicsIdleAnimation_Pose, 380);
		MAKE_PADDED_VAR(int32_t, m_forceMimicsIdleAnimation_Animation, m_forceMimicsIdleAnimation_Animation, 384);
		MAKE_PADDED_VAR(float, m_mimicsPoseWeight, m_mimicsPoseWeight, 388);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 392);
		MAKE_PADDED_VAR(SCurveData, m_weightCurve, m_weightCurve, 396);
	};
};

class CStorySceneEventMimicsAnim {
public:
	union {
	CStorySceneEventAnimClip cstorysceneeventanimclip;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 344);
		MAKE_PADDED_VAR(bool, m_fullEyesWeight, m_fullEyesWeight, 348);
	};
};

class CStorySceneEventOverridePlacementDuration {
public:
	union {
	CStorySceneEventCurveAnimation cstorysceneeventcurveanimation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 248);
		MAKE_PADDED_VAR(int32_t, m_actorName, m_actorName, 376);
	};
};

class CStorySceneEventWalk {
public:
	union {
	CStorySceneEventCurveAnimation cstorysceneeventcurveanimation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 248);
		MAKE_PADDED_VAR(int32_t, m_actorName, m_actorName, 376);
		MAKE_PADDED_VAR(int32_t, m_animationStartName, m_animationStartName, 380);
		MAKE_PADDED_VAR(int32_t, m_animationLoopName, m_animationLoopName, 384);
		MAKE_PADDED_VAR(int32_t, m_animationStopName, m_animationStopName, 388);
	};
};

class CStorySceneFlowCondition {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(intptr_t, m_trueLink, m_trueLink, 128);
		MAKE_PADDED_VAR(intptr_t, m_falseLink, m_falseLink, 136);
		MAKE_PADDED_VAR(intptr_t, m_questCondition, m_questCondition, 144);
	};
};

class CStorySceneFlowSwitch {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(intptr_t*, m_cases[2], m_cases, 128);
		MAKE_PADDED_VAR(intptr_t, m_defaultLink, m_defaultLink, 144);
	};
};

class CStorySceneInput {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(char*, m_inputName, m_inputName, 148);
		MAKE_PADDED_VAR(CStorySceneVoicetagMapping*, m_voicetagMappings[2], m_voicetagMappings, 160);
		MAKE_PADDED_VAR(bool, m_isImportant, m_isImportant, 172);
		MAKE_PADDED_VAR(bool, m_isGameplay, m_isGameplay, 173);
		MAKE_PADDED_VAR(bool, m_dontStopByExternalSystems, m_dontStopByExternalSystems, 174);
		MAKE_PADDED_VAR(intptr_t, m_musicState, m_musicState, 176);
		MAKE_PADDED_VAR(intptr_t, m_ambientsState, m_ambientsState, 180);
		MAKE_PADDED_VAR(intptr_t, m_sceneNearPlane, m_sceneNearPlane, 184);
		MAKE_PADDED_VAR(intptr_t, m_sceneFarPlane, m_sceneFarPlane, 188);
		MAKE_PADDED_VAR(float, m_maxActorsStaryingDistanceFromPlacement, m_maxActorsStaryingDistanceFromPlacement, 192);
		MAKE_PADDED_VAR(float, m_maxActorsStartingDistanceFormPlayer, m_maxActorsStartingDistanceFormPlayer, 196);
		MAKE_PADDED_VAR(bool, m_enableIntroVehicleDismount, m_enableIntroVehicleDismount, 200);
		MAKE_PADDED_VAR(bool, m_enableIntroLookAts, m_enableIntroLookAts, 201);
		MAKE_PADDED_VAR(float, m_introTotalTime, m_introTotalTime, 204);
		MAKE_PADDED_VAR(bool, m_enableIntroFadeOut, m_enableIntroFadeOut, 208);
		MAKE_PADDED_VAR(float, m_introFadeOutStartTime, m_introFadeOutStartTime, 212);
		MAKE_PADDED_VAR(bool, m_blockSceneArea, m_blockSceneArea, 216);
		MAKE_PADDED_VAR(bool, m_enableDestroyDeadActorsAround, m_enableDestroyDeadActorsAround, 217);
		MAKE_PADDED_VAR(int32_t, m_dialogsetPlacementTag, m_dialogsetPlacementTag, 220);
		MAKE_PADDED_VAR(int32_t, m_dialogsetInstanceName, m_dialogsetInstanceName, 224);
	};
};

class CStorySceneLinkHub {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(uint32_t, m_numSockets, m_numSockets, 128);
	};
};

class CStorySceneOutput {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(int32_t, m_name, m_name, 128);
		MAKE_PADDED_VAR(bool, m_questOutput, m_questOutput, 132);
		MAKE_PADDED_VAR(bool, m_endsWithBlackscreen, m_endsWithBlackscreen, 133);
		MAKE_PADDED_VAR(float, m_gameplayCameraBlendTime, m_gameplayCameraBlendTime, 136);
		MAKE_PADDED_VAR(float, m_environmentLightsBlendTime, m_environmentLightsBlendTime, 140);
		MAKE_PADDED_VAR(bool, m_gameplayCameraUseFocusTarget, m_gameplayCameraUseFocusTarget, 144);
		MAKE_PADDED_VAR(Color, m_blackscreenColor, m_blackscreenColor, 145);
	};
};

class CStorySceneOverridePlacementBlend {
public:
	union {
	CStorySceneEventCurveBlend cstorysceneeventcurveblend;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 248);
		MAKE_PADDED_VAR(SMultiCurve, m_curve, m_curve, 264);
		MAKE_PADDED_VAR(int32_t, m_actorName, m_actorName, 392);
		MAKE_PADDED_VAR(int32_t, m_animationStartName, m_animationStartName, 396);
		MAKE_PADDED_VAR(int32_t, m_animationLoopName, m_animationLoopName, 400);
		MAKE_PADDED_VAR(int32_t, m_animationStopName, m_animationStopName, 404);
	};
};

class CStoryScenePlayer {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(uint16_t, m_isPaused, m_isPaused, 1040);
		MAKE_PADDED_VAR(bool, m_isGameplay, m_isGameplay, 1042);
		MAKE_PADDED_VAR(CStoryScene*, m_injectedScenes[2], m_injectedScenes, 1052);
		MAKE_PADDED_VAR(CStoryScene, m_storyScene, m_storyScene, 1472);
	};
};

class CStoryScenePreviewPlayer {
public:
	union {
	CStoryScenePlayer cstorysceneplayer;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(uint16_t, m_isPaused, m_isPaused, 1040);
		MAKE_PADDED_VAR(bool, m_isGameplay, m_isGameplay, 1042);
		MAKE_PADDED_VAR(CStoryScene*, m_injectedScenes[2], m_injectedScenes, 1052);
		MAKE_PADDED_VAR(CStoryScene, m_storyScene, m_storyScene, 1472);
	};
};

class CStorySceneRandomizer {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(intptr_t*, m_outputs[2], m_outputs, 128);
	};
};

class CStorySceneScript {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(int32_t, m_functionName, m_functionName, 136);
		MAKE_PADDED_VAR(intptr_t*, m_links[2], m_links, 152);
	};
};

class CStorySceneSection {
public:
	union {
	CStorySceneControlPart cstoryscenecontrolpart;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(char*, m_sectionName, m_sectionName, 136);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 148);
		MAKE_PADDED_VAR(intptr_t, m_choice, m_choice, 160);
		MAKE_PADDED_VAR(uint32_t, m_sectionId, m_sectionId, 168);
		MAKE_PADDED_VAR(bool, m_isGameplay, m_isGameplay, 172);
		MAKE_PADDED_VAR(bool, m_isImportant, m_isImportant, 173);
		MAKE_PADDED_VAR(bool, m_allowCameraMovement, m_allowCameraMovement, 174);
		MAKE_PADDED_VAR(bool, m_hasCinematicOneliners, m_hasCinematicOneliners, 175);
		MAKE_PADDED_VAR(bool, m_fadeInAtBeginning, m_fadeInAtBeginning, 176);
		MAKE_PADDED_VAR(bool, m_fadeOutAtEnd, m_fadeOutAtEnd, 177);
		MAKE_PADDED_VAR(bool, m_manualFadeIn, m_manualFadeIn, 178);
		MAKE_PADDED_VAR(float, m_interceptRadius, m_interceptRadius, 180);
		MAKE_PADDED_VAR(float, m_interceptTimeout, m_interceptTimeout, 184);
		MAKE_PADDED_VAR(bool, m_pauseInCombat, m_pauseInCombat, 188);
		MAKE_PADDED_VAR(bool, m_canBeSkipped, m_canBeSkipped, 189);
		MAKE_PADDED_VAR(bool, m_canHaveLookats, m_canHaveLookats, 190);
		MAKE_PADDED_VAR(uint32_t, m_numberOfInputPaths, m_numberOfInputPaths, 192);
		MAKE_PADDED_VAR(int32_t, m_dialogsetChangeTo, m_dialogsetChangeTo, 196);
		MAKE_PADDED_VAR(bool, m_forceDialogset, m_forceDialogset, 200);
		MAKE_PADDED_VAR(bool, m_streamingLock, m_streamingLock, 201);
		MAKE_PADDED_VAR(int32_t, m_streamingAreaTag, m_streamingAreaTag, 204);
		MAKE_PADDED_VAR(bool, m_streamingUseCameraPosition, m_streamingUseCameraPosition, 208);
		MAKE_PADDED_VAR(float, m_streamingCameraAllowedJumpDistance, m_streamingCameraAllowedJumpDistance, 212);
		MAKE_PADDED_VAR(intptr_t*, m_inputPathsElements[2], m_inputPathsElements, 216);
		MAKE_PADDED_VAR(intptr_t*, m_interceptSections[2], m_interceptSections, 228);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 240);
		MAKE_PADDED_VAR(uint32_t, m_nextVariantId, m_nextVariantId, 244);
		MAKE_PADDED_VAR(uint32_t, m_defaultVariantId, m_defaultVariantId, 248);
		MAKE_PADDED_VAR(intptr_t*, m_variants[2], m_variants, 252);
		MAKE_PADDED_VAR(intptr_t*, m_events[2], m_events, 312);
		MAKE_PADDED_VAR(intptr_t*, m_eventsInfo[2], m_eventsInfo, 324);
		MAKE_PADDED_VAR(intptr_t*, m_localeVariantMappings[2], m_localeVariantMappings, 384);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnEnd[2], m_soundEventsOnEnd, 448);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnSkip[2], m_soundEventsOnSkip, 460);
		MAKE_PADDED_VAR(bool, m_blockMusicTriggers, m_blockMusicTriggers, 472);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 476);
		MAKE_PADDED_VAR(float, m_maxBoxExtentsToApplyHiResShadows, m_maxBoxExtentsToApplyHiResShadows, 488);
		MAKE_PADDED_VAR(float, m_distantLightStartOverride, m_distantLightStartOverride, 492);
		MAKE_PADDED_VAR(intptr_t*, m_sceneElements[2], m_sceneElements, 496);
	};
};

class CStorySceneVideoSection {
public:
	union {
	CStorySceneSection cstoryscenesection;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(char*, m_sectionName, m_sectionName, 136);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 148);
		MAKE_PADDED_VAR(intptr_t, m_choice, m_choice, 160);
		MAKE_PADDED_VAR(uint32_t, m_sectionId, m_sectionId, 168);
		MAKE_PADDED_VAR(bool, m_isGameplay, m_isGameplay, 172);
		MAKE_PADDED_VAR(bool, m_isImportant, m_isImportant, 173);
		MAKE_PADDED_VAR(bool, m_allowCameraMovement, m_allowCameraMovement, 174);
		MAKE_PADDED_VAR(bool, m_hasCinematicOneliners, m_hasCinematicOneliners, 175);
		MAKE_PADDED_VAR(bool, m_fadeInAtBeginning, m_fadeInAtBeginning, 176);
		MAKE_PADDED_VAR(bool, m_fadeOutAtEnd, m_fadeOutAtEnd, 177);
		MAKE_PADDED_VAR(bool, m_manualFadeIn, m_manualFadeIn, 178);
		MAKE_PADDED_VAR(float, m_interceptRadius, m_interceptRadius, 180);
		MAKE_PADDED_VAR(float, m_interceptTimeout, m_interceptTimeout, 184);
		MAKE_PADDED_VAR(bool, m_pauseInCombat, m_pauseInCombat, 188);
		MAKE_PADDED_VAR(bool, m_canBeSkipped, m_canBeSkipped, 189);
		MAKE_PADDED_VAR(bool, m_canHaveLookats, m_canHaveLookats, 190);
		MAKE_PADDED_VAR(uint32_t, m_numberOfInputPaths, m_numberOfInputPaths, 192);
		MAKE_PADDED_VAR(int32_t, m_dialogsetChangeTo, m_dialogsetChangeTo, 196);
		MAKE_PADDED_VAR(bool, m_forceDialogset, m_forceDialogset, 200);
		MAKE_PADDED_VAR(bool, m_streamingLock, m_streamingLock, 201);
		MAKE_PADDED_VAR(int32_t, m_streamingAreaTag, m_streamingAreaTag, 204);
		MAKE_PADDED_VAR(bool, m_streamingUseCameraPosition, m_streamingUseCameraPosition, 208);
		MAKE_PADDED_VAR(float, m_streamingCameraAllowedJumpDistance, m_streamingCameraAllowedJumpDistance, 212);
		MAKE_PADDED_VAR(intptr_t*, m_inputPathsElements[2], m_inputPathsElements, 216);
		MAKE_PADDED_VAR(intptr_t*, m_interceptSections[2], m_interceptSections, 228);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 240);
		MAKE_PADDED_VAR(uint32_t, m_nextVariantId, m_nextVariantId, 244);
		MAKE_PADDED_VAR(uint32_t, m_defaultVariantId, m_defaultVariantId, 248);
		MAKE_PADDED_VAR(intptr_t*, m_variants[2], m_variants, 252);
		MAKE_PADDED_VAR(intptr_t*, m_events[2], m_events, 312);
		MAKE_PADDED_VAR(intptr_t*, m_eventsInfo[2], m_eventsInfo, 324);
		MAKE_PADDED_VAR(intptr_t*, m_localeVariantMappings[2], m_localeVariantMappings, 384);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnEnd[2], m_soundEventsOnEnd, 448);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnSkip[2], m_soundEventsOnSkip, 460);
		MAKE_PADDED_VAR(bool, m_blockMusicTriggers, m_blockMusicTriggers, 472);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 476);
		MAKE_PADDED_VAR(float, m_maxBoxExtentsToApplyHiResShadows, m_maxBoxExtentsToApplyHiResShadows, 488);
		MAKE_PADDED_VAR(float, m_distantLightStartOverride, m_distantLightStartOverride, 492);
		MAKE_PADDED_VAR(intptr_t*, m_sceneElements[2], m_sceneElements, 496);
		MAKE_PADDED_VAR(char*, m_videoFileName, m_videoFileName, 512);
		MAKE_PADDED_VAR(char*, m_eventDescription, m_eventDescription, 524);
		MAKE_PADDED_VAR(bool, m_suppressRendering, m_suppressRendering, 536);
		MAKE_PADDED_VAR(char**, m_extraVideoFileNames[2], m_extraVideoFileNames, 540);
	};
};

class CStorySceneWaypointComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_dialogsetName, m_dialogsetName, 296);
		MAKE_PADDED_VAR(CStorySceneDialogset, m_dialogset, m_dialogset, 304);
		MAKE_PADDED_VAR(bool, m_showCameras, m_showCameras, 312);
		MAKE_PADDED_VAR(bool, m_useDefaultDialogsetPositions, m_useDefaultDialogsetPositions, 313);
	};
};

class CSwarmSoundEmitterComponent {
public:
	union {
	CSoundEmitterComponent csoundemittercomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t*, m_banksDependency[2], m_banksDependency, 324);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 340);
		MAKE_PADDED_VAR(bool, m_occlusionEnabled, m_occlusionEnabled, 344);
		MAKE_PADDED_VAR(intptr_t, m_loopStart, m_loopStart, 488);
		MAKE_PADDED_VAR(intptr_t, m_loopStop, m_loopStop, 500);
		MAKE_PADDED_VAR(intptr_t, m_intensityParameter, m_intensityParameter, 512);
		MAKE_PADDED_VAR(intptr_t*, m_eventsOnAttach[2], m_eventsOnAttach, 524);
		MAKE_PADDED_VAR(intptr_t*, m_eventsOnDetach[2], m_eventsOnDetach, 536);
		MAKE_PADDED_VAR(SSoundSwitch*, m_switchesOnAttach[2], m_switchesOnAttach, 548);
		MAKE_PADDED_VAR(SSoundProperty*, m_rtpcsOnAttach[2], m_rtpcsOnAttach, 560);
		MAKE_PADDED_VAR(bool, m_isInGameMusic, m_isInGameMusic, 657);
		MAKE_PADDED_VAR(bool, m_updateAzimuth, m_updateAzimuth, 658);
		MAKE_PADDED_VAR(char*, m_listenerOverride, m_listenerOverride, 660);
	};
};

class CSwitchableFoliageComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(CSwitchableFoliageResource, m_resource, m_resource, 288);
		MAKE_PADDED_VAR(uint32_t, m_minimumStreamingDistance, m_minimumStreamingDistance, 312);
	};
};

class CTeleporter {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_destinationNodesTags, m_destinationNodesTags, 368);
		MAKE_PADDED_VAR(intptr_t, m_teleportedActorsTags, m_teleportedActorsTags, 380);
	};
};

class CTriggerActivatorComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 288);
		MAKE_PADDED_VAR(float, m_height, m_height, 292);
		MAKE_PADDED_VAR(intptr_t, m_channels, m_channels, 304);
		MAKE_PADDED_VAR(float, m_maxContinousDistance, m_maxContinousDistance, 308);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 312);
	};
};

class CVehicleComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(intptr_t, m_user, m_user, 296);
	};
};

class CVertexComponent {
public:
	union {
	CSpriteComponent cspritecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
	};
};

class CVertexEditorEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CWayPointComponent {
public:
	union {
	CSpriteComponent cspritecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
	};
};

class CWetnessComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_blendInFromOcean, m_blendInFromOcean, 296);
		MAKE_PADDED_VAR(float, m_blendInFromRain, m_blendInFromRain, 300);
		MAKE_PADDED_VAR(float, m_blendOutFromOcean, m_blendOutFromOcean, 304);
		MAKE_PADDED_VAR(float, m_blendOutFromRain, m_blendOutFromRain, 308);
	};
};

class CWitcherGameResource {
public:
	union {
	CCommonGameResource ccommongameresource;
		MAKE_PADDED_VAR(SWorldDescription*, m_worlds[2], m_worlds, 104);
		MAKE_PADDED_VAR(CEntityTemplate, m_defaultPlayerTemplate, m_defaultPlayerTemplate, 120);
		MAKE_PADDED_VAR(CEntityTemplate, m_defaultCameraTemplate, m_defaultCameraTemplate, 152);
		MAKE_PADDED_VAR(intptr_t, m_startingPoint, m_startingPoint, 184);
		MAKE_PADDED_VAR(char*, m_newGameLoadingVideo, m_newGameLoadingVideo, 192);
		MAKE_PADDED_VAR(int32_t*, m_playGoChunksToActivate[2], m_playGoChunksToActivate, 204);
		MAKE_PADDED_VAR(CQuest, m_mainQuest, m_mainQuest, 216);
		MAKE_PADDED_VAR(CGuiConfigResource, m_guiConfigOverride, m_guiConfigOverride, 248);
		MAKE_PADDED_VAR(SMapPinConfig, m_mapPinConfig, m_mapPinConfig, 280);
		MAKE_PADDED_VAR(C2dArray, m_huntingClueCategoryResource, m_huntingClueCategoryResource, 312);
		MAKE_PADDED_VAR(char*, m_journalRootDirectory, m_journalRootDirectory, 356);
	};
};

class CWitcherSword {
public:
	union {
	CItemEntity citementity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(float, m_timeToDespawn, m_timeToDespawn, 368);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 400);
		MAKE_PADDED_VAR(intptr_t, m_swordType, m_swordType, 416);
	};
};

class IBehTreeDecoratorBaseHLDangerDefinition {
public:
	union {
	IBehTreeNodeHLOffenceBaseDefinition ibehtreenodehloffencebasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeNodeCombatTicketDecoratorBaseDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
	};
};

class IBehTreeNodeConditionCheckRotationDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_rotationTolerance, m_rotationTolerance, 120);
	};
};

class IBehTreeNodeConditionIsInGuardAreaDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class IBehTreeNodeConditionIsInInteriorBaseDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class IBehTreeNodeConditionSpeechDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class IBehTreeNodeConditionWasEventFiredRecentlyBaseDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_activationTimeout, m_activationTimeout, 120);
		MAKE_PADDED_VAR(float, m_executionTimeout, m_executionTimeout, 124);
	};
};

class IBehTreeNodeDecoratorAsyncQueryDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_queryName, m_queryName, 112);
		MAKE_PADDED_VAR(float, m_queryValidFor, m_queryValidFor, 116);
	};
};

class IBehTreeNodeDecoratorAsyncResultDefinition {
public:
	union {
	IBehTreeNodeDecoratorDefinition ibehtreenodedecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_queryName, m_queryName, 112);
	};
};

class IBehTreeNodeDecoratorWalkableSpotQueryDefinition {
public:
	union {
	IBehTreeNodeDecoratorAsyncQueryDefinition ibehtreenodedecoratorasyncquerydefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_queryName, m_queryName, 112);
		MAKE_PADDED_VAR(float, m_queryValidFor, m_queryValidFor, 116);
		MAKE_PADDED_VAR(bool, m_useCombatTargetAsReference, m_useCombatTargetAsReference, 128);
		MAKE_PADDED_VAR(bool, m_useTargetAsSourceSpot, m_useTargetAsSourceSpot, 129);
		MAKE_PADDED_VAR(bool, m_stayInGuardArea, m_stayInGuardArea, 130);
	};
};

class IBehTreeNodeHLCombatBaseDefinition {
public:
	union {
	IBehTreeNodeHLOffenceBaseDefinition ibehtreenodehloffencebasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class IBehTreeNodeWorkRelatedConditionDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class IComponentTargetingAction {
public:
	union {
	IEntityTargetingAction ientitytargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 104);
	};
};

class ICustomCameraScriptedCurveSetPivotRotationController {
public:
	union {
	ICustomCameraScriptedPivotRotationController icustomcamerascriptedpivotrotationcontroller;
		MAKE_PADDED_VAR(int32_t, m_controllerName, m_controllerName, 88);
		MAKE_PADDED_VAR(float, m_minPitch, m_minPitch, 100);
		MAKE_PADDED_VAR(float, m_maxPitch, m_maxPitch, 104);
		MAKE_PADDED_VAR(intptr_t, m_sensitivityPreset, m_sensitivityPreset, 108);
		MAKE_PADDED_VAR(intptr_t*, m_curveSet[2], m_curveSet, 112);
		MAKE_PADDED_VAR(int32_t*, m_curveNames[2], m_curveNames, 124);
	};
};

class IDoorAttachment {
public:
	union {
	CHardAttachment chardattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
		MAKE_PADDED_VAR(SDoorSoundsEvents, m_soundsEvents, m_soundsEvents, 136);
	};
};

class IEffectManagmentPerformableAction {
public:
	union {
	IEntityTargetingAction ientitytargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
	};
};

class RangedWeapon {
public:
	union {
	CItemEntity citementity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(float, m_timeToDespawn, m_timeToDespawn, 368);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 400);
	};
};

class W3HorseComponent {
public:
	union {
	CVehicleComponent cvehiclecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(intptr_t, m_user, m_user, 296);
		MAKE_PADDED_VAR(CHorseRiderSharedParams, m_riderSharedParams, m_riderSharedParams, 320);
	};
};

class CActionAreaBlendActor {
public:
	union {
	CVertexEditorEntity cvertexeditorentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CActionPointActivationSwitcher {
public:
	union {
	IComponentTargetingAction icomponenttargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 104);
		MAKE_PADDED_VAR(bool, m_activate, m_activate, 120);
	};
};

class CActionPointComponent {
public:
	union {
	CWayPointComponent cwaypointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(intptr_t*, m_eventWorkStarted[2], m_eventWorkStarted, 328);
		MAKE_PADDED_VAR(intptr_t*, m_eventWorkEnded[2], m_eventWorkEnded, 340);
		MAKE_PADDED_VAR(CJobTree, m_jobTreeRes, m_jobTreeRes, 352);
		MAKE_PADDED_VAR(intptr_t, m_preferredNextAPs, m_preferredNextAPs, 360);
		MAKE_PADDED_VAR(intptr_t, m_customWorkTree, m_customWorkTree, 376);
		MAKE_PADDED_VAR(intptr_t, m_placementImportance, m_placementImportance, 416);
		MAKE_PADDED_VAR(bool, m_breakableByCutscene, m_breakableByCutscene, 420);
		MAKE_PADDED_VAR(bool, m_actionBreakable, m_actionBreakable, 421);
		MAKE_PADDED_VAR(bool, m_activateOnStart, m_activateOnStart, 422);
		MAKE_PADDED_VAR(bool, m_ignoreCollosions, m_ignoreCollosions, 423);
		MAKE_PADDED_VAR(bool, m_disableSoftReactions, m_disableSoftReactions, 424);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 425);
		MAKE_PADDED_VAR(bool, m_fireSourceDependent, m_fireSourceDependent, 426);
		MAKE_PADDED_VAR(bool, m_forceKeepIKactive, m_forceKeepIKactive, 512);
	};
};

class CAdvancedVehicleComponent {
public:
	union {
	CVehicleComponent cvehiclecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(intptr_t, m_user, m_user, 296);
		MAKE_PADDED_VAR(intptr_t*, m_passengerSeats[2], m_passengerSeats, 336);
		MAKE_PADDED_VAR(int32_t, m_inputContext, m_inputContext, 352);
	};
};

class CAnimatedAttachment {
public:
	union {
	CHardAttachment chardattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
	};
};

class CAnimatedComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_runtimeBehaviorInstanceSlots[2], m_runtimeBehaviorInstanceSlots, 3512);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_behaviorInstanceSlots[2], m_behaviorInstanceSlots, 3524);
		MAKE_PADDED_VAR(CSkeletalAnimationSet*, m_animationSets[2], m_animationSets, 3560);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 3656);
		MAKE_PADDED_VAR(CRagdoll, m_ragdoll, m_ragdoll, 3664);
		MAKE_PADDED_VAR(intptr_t, m_physicsRepresentation, m_physicsRepresentation, 3672);
		MAKE_PADDED_VAR(intptr_t, m_ragdollCollisionType, m_ragdollCollisionType, 3744);
		MAKE_PADDED_VAR(float, m_overrideBudgetedTickDistance, m_overrideBudgetedTickDistance, 4068);
		MAKE_PADDED_VAR(float, m_overrideDisableTickDistance, m_overrideDisableTickDistance, 4072);
		MAKE_PADDED_VAR(int32_t, m_defaultBehaviorAnimationSlotNode, m_defaultBehaviorAnimationSlotNode, 4108);
		MAKE_PADDED_VAR(bool, m_savable, m_savable, 4116);
		MAKE_PADDED_VAR(bool, m_isFrozenOnStart, m_isFrozenOnStart, 4117);
		MAKE_PADDED_VAR(bool, m_includedInAllAppearances, m_includedInAllAppearances, 4118);
		MAKE_PADDED_VAR(bool, m_useExtractedMotion, m_useExtractedMotion, 4121);
		MAKE_PADDED_VAR(bool, m_stickRagdollToCapsule, m_stickRagdollToCapsule, 4124);
		MAKE_PADDED_VAR(int32_t, m_defaultSpeedConfigKey, m_defaultSpeedConfigKey, 4152);
	};
};

class CAnimatedEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CAnimDangleBufferComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 304);
		MAKE_PADDED_VAR(bool, m_debugRender, m_debugRender, 312);
	};
};

class CAnimDangleComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(intptr_t, m_constraint, m_constraint, 304);
		MAKE_PADDED_VAR(int32_t, m_attPrio, m_attPrio, 312);
		MAKE_PADDED_VAR(bool, m_debugRender, m_debugRender, 316);
	};
};

class CAppearanceComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_forcedAppearance, m_forcedAppearance, 292);
		MAKE_PADDED_VAR(SAppearanceAttachments*, m_appearanceAttachments[2], m_appearanceAttachments, 316);
		MAKE_PADDED_VAR(SAttachmentReplacements, m_attachmentReplacements, m_attachmentReplacements, 328);
	};
};

class CAreaTestComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(float, m_traceDistance, m_traceDistance, 288);
		MAKE_PADDED_VAR(Vector, m_extents, m_extents, 304);
		MAKE_PADDED_VAR(float, m_searchRadius, m_searchRadius, 320);
	};
};

class CBehaviorAnimationMultiplyEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(float, m_multiplier, m_multiplier, 368);
	};
};

class CBehaviorConstraintNodeFloorIK {
public:
	union {
	CBehaviorConstraintNodeFloorIKBase cbehaviorconstraintnodefloorikbase;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKCommonData, m_common, m_common, 288);
		MAKE_PADDED_VAR(bool, m_canBeDisabledDueToFrameRate, m_canBeDisabledDueToFrameRate, 312);
		MAKE_PADDED_VAR(int32_t, m_requiredAnimEvent, m_requiredAnimEvent, 316);
		MAKE_PADDED_VAR(int32_t, m_blockAnimEvent, m_blockAnimEvent, 320);
		MAKE_PADDED_VAR(bool, m_useFixedVersion, m_useFixedVersion, 324);
		MAKE_PADDED_VAR(float, m_slopeAngleDamp, m_slopeAngleDamp, 328);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKVerticalBoneData, m_pelvis, m_pelvis, 432);
		MAKE_PADDED_VAR(SBehaviorConstraintNodeFloorIKLegsData, m_legs, m_legs, 456);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_leftLegIK, m_leftLegIK, 512);
		MAKE_PADDED_VAR(STwoBonesIKSolverData, m_rightLegIK, m_rightLegIK, 720);
	};
};

class CBehaviorGraphAnimationAdditiveSlotNode {
public:
	union {
	CBehaviorGraphAnimationSlotNode cbehaviorgraphanimationslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
		MAKE_PADDED_VAR(intptr_t, m_additiveType, m_additiveType, 920);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseAnimInputNode, m_cachedBaseAnimInputNode, 928);
	};
};

class CBehaviorGraphAnimationEnumSequentialSwitchNode {
public:
	union {
	CBehaviorGraphAnimationEnumSwitchNode cbehaviorgraphanimationenumswitchnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_interpolation, m_interpolation, 232);
		MAKE_PADDED_VAR(uint32_t, m_inputNum, m_inputNum, 236);
		MAKE_PADDED_VAR(float, m_blendTime, m_blendTime, 240);
		MAKE_PADDED_VAR(bool, m_synchronizeOnSwitch, m_synchronizeOnSwitch, 244);
		MAKE_PADDED_VAR(intptr_t, m_syncOnSwitchMethod, m_syncOnSwitchMethod, 248);
		MAKE_PADDED_VAR(intptr_t*, m_cachedInputNodes[2], m_cachedInputNodes, 352);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 368);
		MAKE_PADDED_VAR(intptr_t, m_cachedBlendTimeValueNode, m_cachedBlendTimeValueNode, 376);
		MAKE_PADDED_VAR(int32_t, m_enum, m_enum, 384);
		MAKE_PADDED_VAR(int32_t, m_firstInputNum, m_firstInputNum, 388);
	};
};

class CBehaviorGraphAnimationSelAdditiveSlotNode {
public:
	union {
	CBehaviorGraphAnimationAdditiveSlotNode cbehaviorgraphanimationadditiveslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
		MAKE_PADDED_VAR(intptr_t, m_additiveType, m_additiveType, 920);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseAnimInputNode, m_cachedBaseAnimInputNode, 928);
		MAKE_PADDED_VAR(char*, m_firstBone, m_firstBone, 936);
		MAKE_PADDED_VAR(char*, m_lastBone, m_lastBone, 948);
	};
};

class CBehaviorGraphComboTransitionNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(intptr_t, m_comboInterface, m_comboInterface, 320);
	};
};

class CBehaviorGraphFlowTransitionNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
	};
};

class CBehaviorGraphGlobalComboTransitionNode {
public:
	union {
	CBehaviorGraphStateTransitionGlobalBlendNode cbehaviorgraphstatetransitionglobalblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(intptr_t, m_includeGroup, m_includeGroup, 328);
		MAKE_PADDED_VAR(intptr_t, m_excludeGroup, m_excludeGroup, 340);
		MAKE_PADDED_VAR(int32_t, m_generateEventForDestState, m_generateEventForDestState, 352);
		MAKE_PADDED_VAR(int32_t, m_generateForcedEventForDestState, m_generateForcedEventForDestState, 356);
		MAKE_PADDED_VAR(bool, m_cachePoseFromPrevSampling, m_cachePoseFromPrevSampling, 360);
		MAKE_PADDED_VAR(bool, m_useProgressiveSampilngForBlending, m_useProgressiveSampilngForBlending, 361);
		MAKE_PADDED_VAR(intptr_t, m_comboInterface, m_comboInterface, 400);
	};
};

class CBehaviorGraphMimicAdditiveSlotNode {
public:
	union {
	CBehaviorGraphAnimationAdditiveSlotNode cbehaviorgraphanimationadditiveslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
		MAKE_PADDED_VAR(intptr_t, m_additiveType, m_additiveType, 920);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseAnimInputNode, m_cachedBaseAnimInputNode, 928);
	};
};

class CBehaviorGraphMimicEventSlotNode {
public:
	union {
	CBehaviorGraphMimicSlotNode cbehaviorgraphmimicslotnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 240);
		MAKE_PADDED_VAR(bool, m_loopPlayback, m_loopPlayback, 244);
		MAKE_PADDED_VAR(float, m_playbackSpeed, m_playbackSpeed, 248);
		MAKE_PADDED_VAR(bool, m_applyMotion, m_applyMotion, 252);
		MAKE_PADDED_VAR(bool, m_extractMotionTranslation, m_extractMotionTranslation, 253);
		MAKE_PADDED_VAR(bool, m_extractMotionRotation, m_extractMotionRotation, 254);
		MAKE_PADDED_VAR(bool, m_fireLoopEvent, m_fireLoopEvent, 255);
		MAKE_PADDED_VAR(int32_t, m_loopEventName, m_loopEventName, 256);
		MAKE_PADDED_VAR(bool, m_useFovTrack, m_useFovTrack, 260);
		MAKE_PADDED_VAR(bool, m_useDofTrack, m_useDofTrack, 261);
		MAKE_PADDED_VAR(bool, m_gatherEvents, m_gatherEvents, 262);
		MAKE_PADDED_VAR(bool, m_autoFireEffects, m_autoFireEffects, 263);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedForceTimeNode, m_cachedForceTimeNode, 464);
		MAKE_PADDED_VAR(intptr_t, m_cachedSpeedTimeNode, m_cachedSpeedTimeNode, 472);
		MAKE_PADDED_VAR(intptr_t, m_cachedForcePropNode, m_cachedForcePropNode, 480);
		MAKE_PADDED_VAR(int32_t, m_slotName, m_slotName, 488);
		MAKE_PADDED_VAR(char*, m_animPrefix, m_animPrefix, 492);
		MAKE_PADDED_VAR(char*, m_animSufix, m_animSufix, 504);
		MAKE_PADDED_VAR(int32_t, m_stopEvtName, m_stopEvtName, 680);
		MAKE_PADDED_VAR(int32_t, m_startEvtName, m_startEvtName, 684);
		MAKE_PADDED_VAR(intptr_t, m_cachedBaseInputNode, m_cachedBaseInputNode, 912);
		MAKE_PADDED_VAR(SSlotEventAnim*, m_animations[2], m_animations, 936);
	};
};

class CBehaviorGraphPointerTransitionNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
	};
};

class CBehaviorGraphPoseConstraintPoseCurveLookAtNode {
public:
	union {
	CBehaviorGraphPoseConstraintPoseLookAtNode cbehaviorgraphposeconstraintposelookatnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 232);
		MAKE_PADDED_VAR(intptr_t, m_cachedControlValueNode, m_cachedControlValueNode, 272);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetPosValueNode, m_cachedTargetPosValueNode, 312);
		MAKE_PADDED_VAR(intptr_t, m_cachedTargetRotValueNode, m_cachedTargetRotValueNode, 320);
		MAKE_PADDED_VAR(SPoseLookAtSegmentData*, m_dataSegments[2], m_dataSegments, 336);
		MAKE_PADDED_VAR(intptr_t*, m_modifiers[2], m_modifiers, 348);
		MAKE_PADDED_VAR(bool, m_useCurve, m_useCurve, 456);
		MAKE_PADDED_VAR(intptr_t, m_curve, m_curve, 464);
		MAKE_PADDED_VAR(bool, m_doubleDamp, m_doubleDamp, 472);
	};
};

class CBehaviorGraphScriptComponentStateNode {
public:
	union {
	CBehaviorGraphScriptStateNode cbehaviorgraphscriptstatenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(int32_t*, m_vectorValueInputs[2], m_vectorValueInputs, 268);
		MAKE_PADDED_VAR(int32_t*, m_mimicInputs[2], m_mimicInputs, 280);
		MAKE_PADDED_VAR(intptr_t, m_groups, m_groups, 304);
		MAKE_PADDED_VAR(SBehaviorGraphStateBehaviorGraphSyncInfo, m_behaviorGraphSyncInfo, m_behaviorGraphSyncInfo, 316);
		MAKE_PADDED_VAR(intptr_t*, m_cachedStateTransitions[2], m_cachedStateTransitions, 348);
		MAKE_PADDED_VAR(int32_t, m_nameAsName, m_nameAsName, 360);
		MAKE_PADDED_VAR(int32_t, m_activationScriptEvent, m_activationScriptEvent, 364);
		MAKE_PADDED_VAR(int32_t, m_deactivationScriptEvent, m_deactivationScriptEvent, 368);
		MAKE_PADDED_VAR(int32_t, m_becomesCurrentStateScriptEvent, m_becomesCurrentStateScriptEvent, 372);
		MAKE_PADDED_VAR(int32_t, m_noLongerCurrentStateScriptEvent, m_noLongerCurrentStateScriptEvent, 376);
		MAKE_PADDED_VAR(int32_t, m_fullyBlendedInScriptEvent, m_fullyBlendedInScriptEvent, 380);
		MAKE_PADDED_VAR(int32_t, m_componentName, m_componentName, 384);
	};
};

class CBehaviorGraphSpringAngularDampValueNode {
public:
	union {
	CBehaviorGraphSpringDampValueNode cbehaviorgraphspringdampvaluenode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_cachedInputNode, m_cachedInputNode, 248);
		MAKE_PADDED_VAR(float, m_factor, m_factor, 256);
		MAKE_PADDED_VAR(float, m_scale, m_scale, 260);
		MAKE_PADDED_VAR(bool, m_forceInputValueOnActivate, m_forceInputValueOnActivate, 264);
		MAKE_PADDED_VAR(bool, m_isDegree, m_isDegree, 288);
	};
};

class CBehaviorGraphStateAdditiveTransitionNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(intptr_t, m_cachedAdditiveNode, m_cachedAdditiveNode, 320);
	};
};

class CBehaviorGraphStatePelvisTransitionNode {
public:
	union {
	CBehaviorGraphStateTransitionBlendNode cbehaviorgraphstatetransitionblendnode;
		MAKE_PADDED_VAR(intptr_t*, m_sockets[2], m_sockets, 88);
		MAKE_PADDED_VAR(char*, m_name, m_name, 200);
		MAKE_PADDED_VAR(bool, m_generateEditorFragments, m_generateEditorFragments, 212);
		MAKE_PADDED_VAR(int32_t, m_activateNotification, m_activateNotification, 216);
		MAKE_PADDED_VAR(int32_t, m_deactivateNotification, m_deactivateNotification, 220);
		MAKE_PADDED_VAR(uint32_t, m_id, m_id, 224);
		MAKE_PADDED_VAR(intptr_t, m_transitionCondition, m_transitionCondition, 232);
		MAKE_PADDED_VAR(float, m_transitionPriority, m_transitionPriority, 240);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 244);
		MAKE_PADDED_VAR(SBehaviorGraphTransitionSetInternalVariable*, m_setInternalVariables[2], m_setInternalVariables, 248);
		MAKE_PADDED_VAR(intptr_t, m_cachedStartStateNode, m_cachedStartStateNode, 264);
		MAKE_PADDED_VAR(intptr_t, m_cachedEndStateNode, m_cachedEndStateNode, 272);
		MAKE_PADDED_VAR(float, m_transitionTime, m_transitionTime, 280);
		MAKE_PADDED_VAR(bool, m_synchronize, m_synchronize, 284);
		MAKE_PADDED_VAR(intptr_t, m_syncMethod, m_syncMethod, 288);
		MAKE_PADDED_VAR(intptr_t, m_motionBlendType, m_motionBlendType, 296);
		MAKE_PADDED_VAR(bool, m_usePelvisBlendMethod, m_usePelvisBlendMethod, 328);
		MAKE_PADDED_VAR(char*, m_pelvisBoneName, m_pelvisBoneName, 332);
		MAKE_PADDED_VAR(intptr_t, m_pelvisDirectionFwdLS, m_pelvisDirectionFwdLS, 344);
	};
};

class CBehTreeConditionRespondToMusicDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_musicWaitTimeLimit, m_musicWaitTimeLimit, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_syncTimeOffset, m_syncTimeOffset, 128);
		MAKE_PADDED_VAR(CBehTreeValString, m_syncTypes, m_syncTypes, 136);
		MAKE_PADDED_VAR(CBehTreeValString, m_musicEventToTrigger, m_musicEventToTrigger, 152);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_musicEventPreTriggerTime, m_musicEventPreTriggerTime, 168);
		MAKE_PADDED_VAR(CBehTreeValBool, m_alwaysTriggerEvent, m_alwaysTriggerEvent, 176);
	};
};

class CBehTreeDecoratorHLDangerDefinition {
public:
	union {
	IBehTreeDecoratorBaseHLDangerDefinition ibehtreedecoratorbasehldangerdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValBool, m_neutralIsDanger, m_neutralIsDanger, 112);
	};
};

class CBehTreeDecoratorHLDangerTamableDefinition {
public:
	union {
	CBehTreeDecoratorHLDangerDefinition cbehtreedecoratorhldangerdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValBool, m_neutralIsDanger, m_neutralIsDanger, 112);
	};
};

class CBehTreeNodeBroadcastReactionSceneDefinition {
public:
	union {
	IBehTreeNodeCombatTicketDecoratorBaseDefinition ibehtreenodecombatticketdecoratorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
		MAKE_PADDED_VAR(SReactionSceneEvent*, m_reactionScenesToBroadcast[2], m_reactionScenesToBroadcast, 120);
		MAKE_PADDED_VAR(float, m_updateInterval, m_updateInterval, 132);
	};
};

class CBehTreeNodeCanUseChatSceneConditionDefinition {
public:
	union {
	IBehTreeNodeWorkRelatedConditionDefinition ibehtreenodeworkrelatedconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeCombatTicketHasDefinition {
public:
	union {
	IBehTreeNodeCombatTicketDecoratorBaseDefinition ibehtreenodecombatticketdecoratorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
		MAKE_PADDED_VAR(bool, m_lockTicket, m_lockTicket, 120);
		MAKE_PADDED_VAR(bool, m_ifNotHave, m_ifNotHave, 121);
		MAKE_PADDED_VAR(bool, m_failsWhenTicketIsLost, m_failsWhenTicketIsLost, 122);
	};
};

class CBehTreeNodeCombatTicketLockDefinition {
public:
	union {
	IBehTreeNodeCombatTicketDecoratorBaseDefinition ibehtreenodecombatticketdecoratorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
	};
};

class CBehTreeNodeCombatTicketManagerDefinition {
public:
	union {
	IBehTreeNodeCombatTicketDecoratorBaseDefinition ibehtreenodecombatticketdecoratorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
		MAKE_PADDED_VAR(CBehTreeValInt, m_ticketsCount, m_ticketsCount, 120);
		MAKE_PADDED_VAR(float, m_importanceUpdateDelay, m_importanceUpdateDelay, 128);
		MAKE_PADDED_VAR(intptr_t, m_ticketAlgorithm, m_ticketAlgorithm, 136);
	};
};

class CBehTreeNodeCombatTicketReleaseDefinition {
public:
	union {
	IBehTreeNodeCombatTicketDecoratorBaseDefinition ibehtreenodecombatticketdecoratorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
		MAKE_PADDED_VAR(bool, m_releaseOnActivation, m_releaseOnActivation, 120);
		MAKE_PADDED_VAR(bool, m_releaseOnDeactivation, m_releaseOnDeactivation, 121);
		MAKE_PADDED_VAR(bool, m_releaseOnCompletion, m_releaseOnCompletion, 122);
	};
};

class CBehTreeNodeCombatTicketRequestDefinition {
public:
	union {
	IBehTreeNodeCombatTicketDecoratorBaseDefinition ibehtreenodecombatticketdecoratorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
		MAKE_PADDED_VAR(float, m_ticketRequestValidTime, m_ticketRequestValidTime, 120);
		MAKE_PADDED_VAR(bool, m_requestOnCompletion, m_requestOnCompletion, 124);
		MAKE_PADDED_VAR(bool, m_requestOnInterruption, m_requestOnInterruption, 125);
		MAKE_PADDED_VAR(bool, m_requestWhileActive, m_requestWhileActive, 126);
	};
};

class CBehTreeNodeComplexConditionDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(intptr_t, m_condition, m_condition, 120);
	};
};

class CBehTreeNodeConditionAmIInInteriorDefinition {
public:
	union {
	IBehTreeNodeConditionIsInInteriorBaseDefinition ibehtreenodeconditionisininteriorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionAmIOrAPInInteriorDefinition {
public:
	union {
	IBehTreeNodeConditionIsInInteriorBaseDefinition ibehtreenodeconditionisininteriorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionAttackersCountDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(intptr_t, m_compare, m_compare, 120);
		MAKE_PADDED_VAR(CBehTreeValInt, m_count, m_count, 124);
	};
};

class CBehTreeNodeConditionChanceDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_chance, m_chance, 120);
		MAKE_PADDED_VAR(float, m_resultValidFor, m_resultValidFor, 128);
	};
};

class CBehTreeNodeConditionCheckRotationToActionTargetDefinition {
public:
	union {
	IBehTreeNodeConditionCheckRotationDefinition ibehtreenodeconditioncheckrotationdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_rotationTolerance, m_rotationTolerance, 120);
	};
};

class CBehTreeNodeConditionCheckRotationToCombatTargetDefinition {
public:
	union {
	IBehTreeNodeConditionCheckRotationDefinition ibehtreenodeconditioncheckrotationdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_rotationTolerance, m_rotationTolerance, 120);
	};
};

class CBehTreeNodeConditionCheckRotationToNamedTargetDefinition {
public:
	union {
	IBehTreeNodeConditionCheckRotationDefinition ibehtreenodeconditioncheckrotationdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_rotationTolerance, m_rotationTolerance, 120);
		MAKE_PADDED_VAR(CBehTreeValCName, m_targetName, m_targetName, 128);
	};
};

class CBehTreeNodeConditionClearLineToTargetDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(bool, m_combatTarget, m_combatTarget, 120);
		MAKE_PADDED_VAR(bool, m_navTest, m_navTest, 121);
		MAKE_PADDED_VAR(bool, m_creatureTest, m_creatureTest, 122);
		MAKE_PADDED_VAR(bool, m_useAgentRadius, m_useAgentRadius, 123);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_customRadius, m_customRadius, 124);
	};
};

class CBehTreeNodeConditionCombatTargetNoticedDefinition {
public:
	union {
	CBehTreeNodeConditionTargetNoticedDefinition cbehtreenodeconditiontargetnoticeddefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionCounterDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValCName, m_counterName, m_counterName, 120);
		MAKE_PADDED_VAR(CBehTreeValInt, m_counterLowerBound, m_counterLowerBound, 128);
		MAKE_PADDED_VAR(CBehTreeValInt, m_counterUpperBound, m_counterUpperBound, 136);
	};
};

class CBehTreeNodeConditionCounterNewDefinition {
public:
	union {
	CBehTreeNodeConditionDefinition cbehtreenodeconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValCName, m_counterName, m_counterName, 120);
		MAKE_PADDED_VAR(CBehTreeValInt, m_counterValue, m_counterValue, 128);
		MAKE_PADDED_VAR(intptr_t, m_comparison, m_comparison, 136);
	};
};

class CBehTreeNodeConditionHasVoicesetDefintion {
public:
	union {
	IBehTreeNodeConditionSpeechDefinition ibehtreenodeconditionspeechdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValString, m_voiceSet, m_voiceSet, 120);
	};
};

class CBehTreeNodeConditionIsActionTargetInGuardAreaDefinition {
public:
	union {
	IBehTreeNodeConditionIsInGuardAreaDefinition ibehtreenodeconditionisinguardareadefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsCustomTargetInGuardAreaDefinition {
public:
	union {
	IBehTreeNodeConditionIsInGuardAreaDefinition ibehtreenodeconditionisinguardareadefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsInChatSceneDefinition {
public:
	union {
	IBehTreeNodeConditionSpeechDefinition ibehtreenodeconditionspeechdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsPlayerInInteriorDefinition {
public:
	union {
	IBehTreeNodeConditionIsInInteriorBaseDefinition ibehtreenodeconditionisininteriorbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsSpeakingDefinition {
public:
	union {
	CBehTreeNodeConditionIsInChatSceneDefinition cbehtreenodeconditionisinchatscenedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionIsThisActorInGuardAreaDefinition {
public:
	union {
	IBehTreeNodeConditionIsInGuardAreaDefinition ibehtreenodeconditionisinguardareadefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeConditionWasAnyOfEventsFiredRecentlyDefinition {
public:
	union {
	IBehTreeNodeConditionWasEventFiredRecentlyBaseDefinition ibehtreenodeconditionwaseventfiredrecentlybasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_activationTimeout, m_activationTimeout, 120);
		MAKE_PADDED_VAR(float, m_executionTimeout, m_executionTimeout, 124);
		MAKE_PADDED_VAR(int32_t*, m_eventsNames[2], m_eventsNames, 128);
	};
};

class CBehTreeNodeConditionWasEventFiredRecentlyDefinition {
public:
	union {
	IBehTreeNodeConditionWasEventFiredRecentlyBaseDefinition ibehtreenodeconditionwaseventfiredrecentlybasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(float, m_activationTimeout, m_activationTimeout, 120);
		MAKE_PADDED_VAR(float, m_executionTimeout, m_executionTimeout, 124);
		MAKE_PADDED_VAR(CBehTreeValCName, m_eventName, m_eventName, 128);
	};
};

class CBehTreeNodeDecoratorHLWildHorseDangerDefinition {
public:
	union {
	CBehTreeDecoratorHLDangerTamableDefinition cbehtreedecoratorhldangertamabledefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValBool, m_neutralIsDanger, m_neutralIsDanger, 112);
	};
};

class CBehTreeNodeDecoratorWalkableSpotClosestQueryDefinition {
public:
	union {
	IBehTreeNodeDecoratorWalkableSpotQueryDefinition ibehtreenodedecoratorwalkablespotquerydefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_queryName, m_queryName, 112);
		MAKE_PADDED_VAR(float, m_queryValidFor, m_queryValidFor, 116);
		MAKE_PADDED_VAR(bool, m_useCombatTargetAsReference, m_useCombatTargetAsReference, 128);
		MAKE_PADDED_VAR(bool, m_useTargetAsSourceSpot, m_useTargetAsSourceSpot, 129);
		MAKE_PADDED_VAR(bool, m_stayInGuardArea, m_stayInGuardArea, 130);
		MAKE_PADDED_VAR(SClosestSpotFilter, m_filter, m_filter, 136);
	};
};

class CBehTreeNodeDecoratorWalkableSpotResultDefintion {
public:
	union {
	IBehTreeNodeDecoratorAsyncResultDefinition ibehtreenodedecoratorasyncresultdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_queryName, m_queryName, 112);
	};
};

class CBehTreeNodeDecoratorWalkableSpotRingQueryDefinition {
public:
	union {
	IBehTreeNodeDecoratorWalkableSpotQueryDefinition ibehtreenodedecoratorwalkablespotquerydefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_queryName, m_queryName, 112);
		MAKE_PADDED_VAR(float, m_queryValidFor, m_queryValidFor, 116);
		MAKE_PADDED_VAR(bool, m_useCombatTargetAsReference, m_useCombatTargetAsReference, 128);
		MAKE_PADDED_VAR(bool, m_useTargetAsSourceSpot, m_useTargetAsSourceSpot, 129);
		MAKE_PADDED_VAR(bool, m_stayInGuardArea, m_stayInGuardArea, 130);
		MAKE_PADDED_VAR(SPositioningFilter, m_filter, m_filter, 136);
	};
};

class CBehTreeNodeDynamicWanderingTargetDefinition {
public:
	union {
	CBehTreeNodeSelectWanderingTargetDecoratorDefinition cbehtreenodeselectwanderingtargetdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_dynamicWanderAreaName_var, m_dynamicWanderAreaName_var, 112);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_minimalWanderDistance, m_minimalWanderDistance, 116);
		MAKE_PADDED_VAR(CBehTreeValBool, m_useGuardArea, m_useGuardArea, 124);
	};
};

class CBehTreeNodeFindLandingSpotDecoratorDefinition {
public:
	union {
	IBehTreeNodeDecoratorWalkableSpotQueryDefinition ibehtreenodedecoratorwalkablespotquerydefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_queryName, m_queryName, 112);
		MAKE_PADDED_VAR(float, m_queryValidFor, m_queryValidFor, 116);
		MAKE_PADDED_VAR(bool, m_useCombatTargetAsReference, m_useCombatTargetAsReference, 128);
		MAKE_PADDED_VAR(bool, m_useTargetAsSourceSpot, m_useTargetAsSourceSpot, 129);
		MAKE_PADDED_VAR(bool, m_stayInGuardArea, m_stayInGuardArea, 130);
	};
};

class CBehTreeNodeGreetingReactionSceneDecoratorDefinition {
public:
	union {
	CBehTreeNodeReactionSceneDefinitionDecorator cbehtreenodereactionscenedefinitiondecorator;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
		MAKE_PADDED_VAR(CBehTreeValCName, m_eventName, m_eventName, 120);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_cooldownDistance, m_cooldownDistance, 128);
		MAKE_PADDED_VAR(CBehTreeValFloat, m_cooldownTimeout, m_cooldownTimeout, 136);
		MAKE_PADDED_VAR(CBehTreeValBool, m_dontSetActionTargetEdit, m_dontSetActionTargetEdit, 144);
		MAKE_PADDED_VAR(int32_t*, m_roles[2], m_roles, 152);
		MAKE_PADDED_VAR(CBehTreeValBool, m_inInWorkBranch, m_inInWorkBranch, 164);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 176);
		MAKE_PADDED_VAR(float, m_minDistance, m_minDistance, 180);
	};
};

class CBehTreeNodeHistoryWanderingTargetDefinition {
public:
	union {
	CBehTreeNodeWanderingTaggedTargetDecoratorDefinition cbehtreenodewanderingtaggedtargetdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pointsGroupTag, m_pointsGroupTag, 112);
	};
};

class CBehTreeNodeHLAnimalCombatDefinition {
public:
	union {
	IBehTreeNodeHLCombatBaseDefinition ibehtreenodehlcombatbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeHLCombatDefinition {
public:
	union {
	IBehTreeNodeHLCombatBaseDefinition ibehtreenodehlcombatbasedefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
	};
};

class CBehTreeNodeIsAtWorkConditionDefinition {
public:
	union {
	IBehTreeNodeWorkRelatedConditionDefinition ibehtreenodeworkrelatedconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeIsSittingInInteriorConditionDefinition {
public:
	union {
	IBehTreeNodeWorkRelatedConditionDefinition ibehtreenodeworkrelatedconditiondefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 112);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 113);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 114);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 115);
	};
};

class CBehTreeNodeRandomWanderingTargetDefinition {
public:
	union {
	CBehTreeNodeWanderingTaggedTargetDecoratorDefinition cbehtreenodewanderingtaggedtargetdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pointsGroupTag, m_pointsGroupTag, 112);
	};
};

class CBehTreeNodeScriptConditionalDecoratorDefinition {
public:
	union {
	CBehTreeNodeScriptDecoratorDefinition cbehtreenodescriptdecoratordefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(IBehTreeTaskDefinition, m_taskOrigin, m_taskOrigin, 112);
		MAKE_PADDED_VAR(bool, m_forwardAvailability, m_forwardAvailability, 120);
		MAKE_PADDED_VAR(bool, m_forwardTestIfNotAvailable, m_forwardTestIfNotAvailable, 121);
		MAKE_PADDED_VAR(bool, m_invertAvailability, m_invertAvailability, 122);
		MAKE_PADDED_VAR(bool, m_skipIfActive, m_skipIfActive, 123);
		MAKE_PADDED_VAR(bool, m_runMainOnActivation, m_runMainOnActivation, 124);
	};
};

class CBehTreeNodeSelectFormationLeaderDefinition {
public:
	union {
	CBehTreeNodeSelectPartyMemberDefinition cbehtreenodeselectpartymemberdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_partyMemberName, m_partyMemberName, 112);
		MAKE_PADDED_VAR(CBehTreeValFormation, m_formation, m_formation, 120);
	};
};

class CBehTreeNodeSelectPatrolingTargetDecoratorDefinition {
public:
	union {
	CBehTreeNodeRandomWanderingTargetDefinition cbehtreenoderandomwanderingtargetdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(CBehTreeValCName, m_pointsGroupTag, m_pointsGroupTag, 112);
	};
};

class CBezierComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CBezierMovableComponent {
public:
	union {
	CSkeletalAnimatedComponent cskeletalanimatedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 328);
		MAKE_PADDED_VAR(CSkeletalAnimationSet, m_animset, m_animset, 336);
		MAKE_PADDED_VAR(intptr_t, m_controller, m_controller, 344);
		MAKE_PADDED_VAR(bool, m_processEvents, m_processEvents, 352);
		MAKE_PADDED_VAR(float, m_speed, m_speed, 376);
	};
};

class CBgCutsceneEntity {
public:
	union {
	CAnimatedEntity canimatedentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(CCutsceneTemplate, m_csTemplate, m_csTemplate, 432);
	};
};

class CBgInteractionComponent {
public:
	union {
	CInteractionComponent cinteractioncomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
		MAKE_PADDED_VAR(char*, m_actionName, m_actionName, 424);
		MAKE_PADDED_VAR(bool, m_checkCameraVisibility, m_checkCameraVisibility, 448);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 449);
		MAKE_PADDED_VAR(bool, m_isEnabledInCombat, m_isEnabledInCombat, 450);
		MAKE_PADDED_VAR(bool, m_shouldIgnoreLocks, m_shouldIgnoreLocks, 451);
	};
};

class CBgNpc {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(int32_t, m_headBoneIndex, m_headBoneIndex, 404);
		MAKE_PADDED_VAR(intptr_t, m_voiceset, m_voiceset, 408);
		MAKE_PADDED_VAR(int32_t, m_category, m_category, 416);
		MAKE_PADDED_VAR(CJobTree, m_jobTree, m_jobTree, 424);
		MAKE_PADDED_VAR(SBgNpcJobTree*, m_jobTrees[2], m_jobTrees, 456);
		MAKE_PADDED_VAR(bool, m_collisionCapsule, m_collisionCapsule, 468);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 472);
		MAKE_PADDED_VAR(CEntityTemplate, m_originalTemplete, m_originalTemplete, 488);
	};
};

class CBgRootComponent {
public:
	union {
	CAnimatedComponent canimatedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_runtimeBehaviorInstanceSlots[2], m_runtimeBehaviorInstanceSlots, 3512);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_behaviorInstanceSlots[2], m_behaviorInstanceSlots, 3524);
		MAKE_PADDED_VAR(CSkeletalAnimationSet*, m_animationSets[2], m_animationSets, 3560);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 3656);
		MAKE_PADDED_VAR(CRagdoll, m_ragdoll, m_ragdoll, 3664);
		MAKE_PADDED_VAR(intptr_t, m_physicsRepresentation, m_physicsRepresentation, 3672);
		MAKE_PADDED_VAR(intptr_t, m_ragdollCollisionType, m_ragdollCollisionType, 3744);
		MAKE_PADDED_VAR(float, m_overrideBudgetedTickDistance, m_overrideBudgetedTickDistance, 4068);
		MAKE_PADDED_VAR(float, m_overrideDisableTickDistance, m_overrideDisableTickDistance, 4072);
		MAKE_PADDED_VAR(int32_t, m_defaultBehaviorAnimationSlotNode, m_defaultBehaviorAnimationSlotNode, 4108);
		MAKE_PADDED_VAR(bool, m_savable, m_savable, 4116);
		MAKE_PADDED_VAR(bool, m_isFrozenOnStart, m_isFrozenOnStart, 4117);
		MAKE_PADDED_VAR(bool, m_includedInAllAppearances, m_includedInAllAppearances, 4118);
		MAKE_PADDED_VAR(bool, m_useExtractedMotion, m_useExtractedMotion, 4121);
		MAKE_PADDED_VAR(bool, m_stickRagdollToCapsule, m_stickRagdollToCapsule, 4124);
		MAKE_PADDED_VAR(int32_t, m_defaultSpeedConfigKey, m_defaultSpeedConfigKey, 4152);
	};
};

class CBoatComponent {
public:
	union {
	CVehicleComponent cvehiclecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(intptr_t, m_user, m_user, 296);
		MAKE_PADDED_VAR(int32_t*, m_collisionNames[2], m_collisionNames, 352);
		MAKE_PADDED_VAR(bool, m_mountAnimationFinished, m_mountAnimationFinished, 426);
		MAKE_PADDED_VAR(float, m_sailDir, m_sailDir, 472);
	};
};

class CBoatDestructionComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SBoatDestructionVolume*, m_destructionVolumes[2], m_destructionVolumes, 312);
		MAKE_PADDED_VAR(uint32_t, m_autoGeneratedVolumesX, m_autoGeneratedVolumesX, 324);
		MAKE_PADDED_VAR(uint32_t, m_autoGeneratedVolumesY, m_autoGeneratedVolumesY, 328);
		MAKE_PADDED_VAR(float, m_autoGeneratorVolumesResizer, m_autoGeneratorVolumesResizer, 332);
	};
};

class CBoidPointOfInterestComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_params_m_type, m_params_m_type, 288);
		MAKE_PADDED_VAR(float, m_params_m_scale, m_params_m_scale, 296);
		MAKE_PADDED_VAR(float, m_params_m_gravityRangeMin, m_params_m_gravityRangeMin, 300);
		MAKE_PADDED_VAR(float, m_params_m_gravityRangeMax, m_params_m_gravityRangeMax, 304);
		MAKE_PADDED_VAR(float, m_params_m_effectorRadius, m_params_m_effectorRadius, 308);
		MAKE_PADDED_VAR(int32_t, m_params_m_shapeType, m_params_m_shapeType, 312);
		MAKE_PADDED_VAR(bool, m_params_m_useReachCallBack, m_params_m_useReachCallBack, 316);
		MAKE_PADDED_VAR(bool, m_params_m_closestOnly, m_params_m_closestOnly, 317);
		MAKE_PADDED_VAR(float, m_params_m_coneMinOpeningAngle, m_params_m_coneMinOpeningAngle, 320);
		MAKE_PADDED_VAR(float, m_params_m_coneMaxOpeningAngle, m_params_m_coneMaxOpeningAngle, 324);
		MAKE_PADDED_VAR(float, m_params_m_coneEffectorOpeningAngle, m_params_m_coneEffectorOpeningAngle, 328);
		MAKE_PADDED_VAR(intptr_t, m_acceptor, m_acceptor, 332);
		MAKE_PADDED_VAR(bool, m_crawlingSwarmDebug, m_crawlingSwarmDebug, 348);
	};
};

class CBoidPointOfInterestComponentScript {
public:
	union {
	CBoidPointOfInterestComponent cboidpointofinterestcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(int32_t, m_params_m_type, m_params_m_type, 288);
		MAKE_PADDED_VAR(float, m_params_m_scale, m_params_m_scale, 296);
		MAKE_PADDED_VAR(float, m_params_m_gravityRangeMin, m_params_m_gravityRangeMin, 300);
		MAKE_PADDED_VAR(float, m_params_m_gravityRangeMax, m_params_m_gravityRangeMax, 304);
		MAKE_PADDED_VAR(float, m_params_m_effectorRadius, m_params_m_effectorRadius, 308);
		MAKE_PADDED_VAR(int32_t, m_params_m_shapeType, m_params_m_shapeType, 312);
		MAKE_PADDED_VAR(bool, m_params_m_useReachCallBack, m_params_m_useReachCallBack, 316);
		MAKE_PADDED_VAR(bool, m_params_m_closestOnly, m_params_m_closestOnly, 317);
		MAKE_PADDED_VAR(float, m_params_m_coneMinOpeningAngle, m_params_m_coneMinOpeningAngle, 320);
		MAKE_PADDED_VAR(float, m_params_m_coneMaxOpeningAngle, m_params_m_coneMaxOpeningAngle, 324);
		MAKE_PADDED_VAR(float, m_params_m_coneEffectorOpeningAngle, m_params_m_coneEffectorOpeningAngle, 328);
		MAKE_PADDED_VAR(intptr_t, m_acceptor, m_acceptor, 332);
		MAKE_PADDED_VAR(bool, m_crawlingSwarmDebug, m_crawlingSwarmDebug, 348);
	};
};

class CBoundedComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
	};
};

class CBoxComponent {
public:
	union {
	CBoundedComponent cboundedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Color, m_drawingColor, m_drawingColor, 336);
		MAKE_PADDED_VAR(float, m_width, m_width, 480);
		MAKE_PADDED_VAR(float, m_height, m_height, 484);
		MAKE_PADDED_VAR(float, m_depth, m_depth, 488);
	};
};

class CCamera {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CCameraComponent {
public:
	union {
	CSpriteComponent cspritecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(float, m_aspect, m_aspect, 312);
		MAKE_PADDED_VAR(bool, m_lockAspect, m_lockAspect, 316);
		MAKE_PADDED_VAR(float, m_fov, m_fov, 320);
		MAKE_PADDED_VAR(intptr_t, m_nearPlane, m_nearPlane, 324);
		MAKE_PADDED_VAR(intptr_t, m_farPlane, m_farPlane, 328);
		MAKE_PADDED_VAR(SCustomClippingPlanes, m_customClippingPlanes, m_customClippingPlanes, 332);
		MAKE_PADDED_VAR(bool, m_defaultCamera, m_defaultCamera, 340);
	};
};

class CCameraOrientedComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CCarryableItemStorePointComponent {
public:
	union {
	CWayPointComponent cwaypointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(char*, m_storedItemType, m_storedItemType, 328);
		MAKE_PADDED_VAR(bool, m_randomPrespawn, m_randomPrespawn, 340);
	};
};

class CCombatDataComponent {
public:
	union {
	CComponent ccomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
	};
};

class CCommunityArea {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_communityAreaType, m_communityAreaType, 376);
	};
};

class CCookedMeshEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CCurveControlPointEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CCurveEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_curveComponent, m_curveComponent, 376);
		MAKE_PADDED_VAR(intptr_t*, m_controlPointEntities[2], m_controlPointEntities, 384);
	};
};

class CCurveTangentControlPointEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CCustomCamera {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t*, m_pivotPositionControllers[2], m_pivotPositionControllers, 376);
		MAKE_PADDED_VAR(intptr_t*, m_pivotRotationControllers[2], m_pivotRotationControllers, 388);
		MAKE_PADDED_VAR(intptr_t*, m_pivotDistanceControllers[2], m_pivotDistanceControllers, 400);
		MAKE_PADDED_VAR(intptr_t, m_blendPivotPositionController, m_blendPivotPositionController, 416);
		MAKE_PADDED_VAR(intptr_t, m_activeCameraPositionController, m_activeCameraPositionController, 576);
		MAKE_PADDED_VAR(float, m_manualRotationHorTimeout, m_manualRotationHorTimeout, 592);
		MAKE_PADDED_VAR(float, m_manualRotationVerTimeout, m_manualRotationVerTimeout, 596);
		MAKE_PADDED_VAR(bool, m_allowAutoRotation, m_allowAutoRotation, 600);
		MAKE_PADDED_VAR(float, m_fov, m_fov, 604);
		MAKE_PADDED_VAR(CSkeletalAnimationSet, m_animSet, m_animSet, 616);
		MAKE_PADDED_VAR(SCustomCameraPreset*, m_presets[2], m_presets, 784);
		MAKE_PADDED_VAR(intptr_t*, m_curveSet[2], m_curveSet, 796);
		MAKE_PADDED_VAR(int32_t*, m_curveNames[2], m_curveNames, 808);
	};
};

class CCutsceneInstance {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
	};
};

class CDaycycleGraphicsEntity {
public:
	union {
	CEntity centity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(float, m_startEmissiveHour, m_startEmissiveHour, 368);
		MAKE_PADDED_VAR(float, m_startEmissiveFadeTime, m_startEmissiveFadeTime, 372);
		MAKE_PADDED_VAR(float, m_endEmissiveHour, m_endEmissiveHour, 376);
		MAKE_PADDED_VAR(float, m_endEmissiveFadeTime, m_endEmissiveFadeTime, 380);
		MAKE_PADDED_VAR(float, m_randomRange, m_randomRange, 384);
		MAKE_PADDED_VAR(float, m_lightBrightnessWhenOnMin, m_lightBrightnessWhenOnMin, 388);
		MAKE_PADDED_VAR(float, m_lightBrightnessWhenOnMax, m_lightBrightnessWhenOnMax, 392);
		MAKE_PADDED_VAR(float, m_lightRandomOffsetX, m_lightRandomOffsetX, 396);
		MAKE_PADDED_VAR(float, m_lightRandomOffsetY, m_lightRandomOffsetY, 400);
		MAKE_PADDED_VAR(float, m_lightRandomOffsetZ, m_lightRandomOffsetZ, 404);
		MAKE_PADDED_VAR(float, m_engineValueXWhenOnMin, m_engineValueXWhenOnMin, 408);
		MAKE_PADDED_VAR(float, m_engineValueXWhenOnMax, m_engineValueXWhenOnMax, 412);
		MAKE_PADDED_VAR(float, m_engineValueXWhenOff, m_engineValueXWhenOff, 416);
		MAKE_PADDED_VAR(float, m_engineValueYWhenOn, m_engineValueYWhenOn, 420);
		MAKE_PADDED_VAR(float, m_engineValueYWhenOff, m_engineValueYWhenOff, 424);
		MAKE_PADDED_VAR(float, m_engineValueZWhenOn, m_engineValueZWhenOn, 428);
		MAKE_PADDED_VAR(float, m_engineValueZWhenOff, m_engineValueZWhenOff, 432);
		MAKE_PADDED_VAR(float, m_engineValueWWhenOn, m_engineValueWWhenOn, 436);
		MAKE_PADDED_VAR(float, m_engineValueWWhenOff, m_engineValueWWhenOff, 440);
		MAKE_PADDED_VAR(Color, m_engineValueColorWhenOn, m_engineValueColorWhenOn, 444);
		MAKE_PADDED_VAR(Color, m_engineValueColorWhenOff, m_engineValueColorWhenOff, 448);
		MAKE_PADDED_VAR(float, m_particleAlphaWhenOnMin, m_particleAlphaWhenOnMin, 452);
		MAKE_PADDED_VAR(float, m_particleAlphaWhenOnMax, m_particleAlphaWhenOnMax, 456);
		MAKE_PADDED_VAR(float, m_particleAlphaWhenOff, m_particleAlphaWhenOff, 460);
		MAKE_PADDED_VAR(float, m_flickeringPeriod, m_flickeringPeriod, 464);
		MAKE_PADDED_VAR(float, m_lightRadius, m_lightRadius, 468);
		MAKE_PADDED_VAR(float, m_lightAutoHideDistance, m_lightAutoHideDistance, 472);
		MAKE_PADDED_VAR(float, m_lightAutoHideRange, m_lightAutoHideRange, 476);
		MAKE_PADDED_VAR(bool, m_overrideRadius, m_overrideRadius, 480);
		MAKE_PADDED_VAR(bool, m_startStopLightsAndEngineValues, m_startStopLightsAndEngineValues, 481);
		MAKE_PADDED_VAR(bool, m_startStopEffects, m_startStopEffects, 482);
	};
};

class CDoorAttachment_AngleAnimation {
public:
	union {
	IDoorAttachment idoorattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
		MAKE_PADDED_VAR(SDoorSoundsEvents, m_soundsEvents, m_soundsEvents, 136);
		MAKE_PADDED_VAR(float, m_originalAngle, m_originalAngle, 236);
		MAKE_PADDED_VAR(float, m_openTime, m_openTime, 252);
	};
};

class CDoorAttachment_GameplayPush {
public:
	union {
	IDoorAttachment idoorattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
		MAKE_PADDED_VAR(SDoorSoundsEvents, m_soundsEvents, m_soundsEvents, 136);
		MAKE_PADDED_VAR(float, m_autoCloseForce, m_autoCloseForce, 260);
		MAKE_PADDED_VAR(float, m_openingSpeed, m_openingSpeed, 264);
		MAKE_PADDED_VAR(bool, m_invertedPivot, m_invertedPivot, 270);
	};
};

class CDoorAttachment_PropertyAnimation {
public:
	union {
	IDoorAttachment idoorattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
		MAKE_PADDED_VAR(SDoorSoundsEvents, m_soundsEvents, m_soundsEvents, 136);
	};
};

class CDoorComponent {
public:
	union {
	CInteractionComponent cinteractioncomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
		MAKE_PADDED_VAR(char*, m_actionName, m_actionName, 424);
		MAKE_PADDED_VAR(bool, m_checkCameraVisibility, m_checkCameraVisibility, 448);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 449);
		MAKE_PADDED_VAR(bool, m_isEnabledInCombat, m_isEnabledInCombat, 450);
		MAKE_PADDED_VAR(bool, m_shouldIgnoreLocks, m_shouldIgnoreLocks, 451);
		MAKE_PADDED_VAR(intptr_t, m_initialState, m_initialState, 496);
		MAKE_PADDED_VAR(bool, m_doorsEnebled, m_doorsEnebled, 508);
		MAKE_PADDED_VAR(bool, m_isTrapdoor, m_isTrapdoor, 509);
		MAKE_PADDED_VAR(char*, m_openName, m_openName, 512);
		MAKE_PADDED_VAR(char*, m_closeName, m_closeName, 524);
	};
};

class CDrawableComponent {
public:
	union {
	CBoundedComponent cboundedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
	};
};

class CEffectDummyComponent {
public:
	union {
	CSpriteComponent cspritecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
	};
};

class CEffectEntity {
public:
	union {
	CPeristentEntity cperistententity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
	};
};

class CEnableComponentsPerformableAction {
public:
	union {
	IComponentTargetingAction icomponenttargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 104);
		MAKE_PADDED_VAR(bool, m_enable, m_enable, 120);
	};
};

class CEnabledDeniedAreaAction {
public:
	union {
	IComponentTargetingAction icomponenttargetingaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(char*, m_componentName, m_componentName, 104);
		MAKE_PADDED_VAR(bool, m_enable, m_enable, 120);
	};
};

class CEntityUpdaterComponent {
public:
	union {
	CSelfUpdatingComponent cselfupdatingcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_tickedByDefault, m_tickedByDefault, 304);
		MAKE_PADDED_VAR(intptr_t, m_tickGroup, m_tickGroup, 308);
	};
};

class CFlareComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CMaterialInstance, m_material, m_material, 368);
		MAKE_PADDED_VAR(SFlareParameters, m_parameters, m_parameters, 376);
	};
};

class CFoundExplorationComponent {
public:
	union {
	CSpriteComponent cspritecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(bool, m_ignore, m_ignore, 304);
	};
};

class CGameplayEntity {
public:
	union {
	CPeristentEntity cperistententity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
	};
};

class CGameplayLightComponent {
public:
	union {
	CInteractionComponent cinteractioncomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
		MAKE_PADDED_VAR(char*, m_actionName, m_actionName, 424);
		MAKE_PADDED_VAR(bool, m_checkCameraVisibility, m_checkCameraVisibility, 448);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 449);
		MAKE_PADDED_VAR(bool, m_isEnabledInCombat, m_isEnabledInCombat, 450);
		MAKE_PADDED_VAR(bool, m_shouldIgnoreLocks, m_shouldIgnoreLocks, 451);
		MAKE_PADDED_VAR(bool, m_isLightOn, m_isLightOn, 512);
		MAKE_PADDED_VAR(bool, m_isCityLight, m_isCityLight, 513);
		MAKE_PADDED_VAR(bool, m_isInteractive, m_isInteractive, 514);
		MAKE_PADDED_VAR(bool, m_isAffectedByWeather, m_isAffectedByWeather, 515);
	};
};

class CHeadManagerComponent {
public:
	union {
	CSelfUpdatingComponent cselfupdatingcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_tickedByDefault, m_tickedByDefault, 304);
		MAKE_PADDED_VAR(intptr_t, m_tickGroup, m_tickGroup, 308);
		MAKE_PADDED_VAR(GameTime, m_timePeriod, m_timePeriod, 328);
		MAKE_PADDED_VAR(GameTime, m_lastChangeGameTime, m_lastChangeGameTime, 332);
		MAKE_PADDED_VAR(bool, m_hasTattoo, m_hasTattoo, 336);
		MAKE_PADDED_VAR(bool, m_hasDemonMark, m_hasDemonMark, 337);
		MAKE_PADDED_VAR(int32_t, m_initHeadIndex, m_initHeadIndex, 340);
		MAKE_PADDED_VAR(uint32_t, m_curIndex, m_curIndex, 344);
		MAKE_PADDED_VAR(int32_t*, m_heads[2], m_heads, 348);
		MAKE_PADDED_VAR(int32_t*, m_headsWithTattoo[2], m_headsWithTattoo, 360);
		MAKE_PADDED_VAR(int32_t*, m_headsDemon[2], m_headsDemon, 372);
		MAKE_PADDED_VAR(int32_t*, m_headsDemonWithTattoo[2], m_headsDemonWithTattoo, 384);
		MAKE_PADDED_VAR(SItemUniqueId, m_curHeadId, m_curHeadId, 396);
		MAKE_PADDED_VAR(bool, m_blockGrowing, m_blockGrowing, 400);
	};
};

class CJournalCharacter {
public:
	union {
	CJournalContainer cjournalcontainer;
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 88);
		MAKE_PADDED_VAR(char*, m_baseName, m_baseName, 104);
		MAKE_PADDED_VAR(uint32_t, m_order, m_order, 116);
		MAKE_PADDED_VAR(int32_t, m_uniqueScriptIdentifier, m_uniqueScriptIdentifier, 120);
		MAKE_PADDED_VAR(bool, m_active, m_active, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentGuid, m_parentGuid, 128);
		MAKE_PADDED_VAR(intptr_t, m_linkedParentGuid, m_linkedParentGuid, 144);
		MAKE_PADDED_VAR(char, m_index, m_index, 160);
		MAKE_PADDED_VAR(intptr_t*, m_children[2], m_children, 168);
		MAKE_PADDED_VAR(intptr_t, m_name, m_name, 184);
		MAKE_PADDED_VAR(char*, m_image, m_image, 188);
		MAKE_PADDED_VAR(intptr_t, m_importance, m_importance, 200);
		MAKE_PADDED_VAR(CEntityTemplate, m_entityTemplate, m_entityTemplate, 208);
	};
};

class CLightComponent {
public:
	union {
	CSpriteComponent cspritecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(Color, m_color, m_color, 304);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 308);
		MAKE_PADDED_VAR(float, m_brightness, m_brightness, 312);
		MAKE_PADDED_VAR(float, m_attenuation, m_attenuation, 316);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 320);
		MAKE_PADDED_VAR(float, m_autoHideRange, m_autoHideRange, 324);
		MAKE_PADDED_VAR(SLightFlickering, m_lightFlickering, m_lightFlickering, 336);
		MAKE_PADDED_VAR(bool, m_allowDistantFade, m_allowDistantFade, 348);
		MAKE_PADDED_VAR(intptr_t, m_envColorGroup, m_envColorGroup, 352);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 356);
		MAKE_PADDED_VAR(intptr_t, m_lightUsageMask, m_lightUsageMask, 360);
		MAKE_PADDED_VAR(float, m_shadowBlendFactor, m_shadowBlendFactor, 364);
		MAKE_PADDED_VAR(intptr_t, m_shadowCastingMode, m_shadowCastingMode, 368);
		MAKE_PADDED_VAR(float, m_shadowFadeDistance, m_shadowFadeDistance, 372);
		MAKE_PADDED_VAR(float, m_shadowFadeRange, m_shadowFadeRange, 376);
	};
};

class CMeshSkinningAttachment {
public:
	union {
	CSkinningAttachment cskinningattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
	};
};

class CMeshTypeComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
	};
};

class CMetalinDestinationComponent {
public:
	union {
	CWayPointComponent cwaypointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
	};
};

class CMetalinkComponent {
public:
	union {
	CWayPointComponent cwaypointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(IAIExplorationTree, m_aiAction, m_aiAction, 328);
		MAKE_PADDED_VAR(float, m_pathfindingCostMultiplier, m_pathfindingCostMultiplier, 336);
		MAKE_PADDED_VAR(int32_t, m_destinationEntityTag, m_destinationEntityTag, 340);
		MAKE_PADDED_VAR(char*, m_destinationWaypointComponent, m_destinationWaypointComponent, 344);
		MAKE_PADDED_VAR(intptr_t, m_internalObstacleEntity, m_internalObstacleEntity, 360);
		MAKE_PADDED_VAR(char*, m_internalObstacleComponent, m_internalObstacleComponent, 368);
		MAKE_PADDED_VAR(bool, m_useInternalObstacle, m_useInternalObstacle, 380);
		MAKE_PADDED_VAR(bool, m_enabledByDefault, m_enabledByDefault, 381);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 382);
		MAKE_PADDED_VAR(bool, m_isGhostLink, m_isGhostLink, 383);
		MAKE_PADDED_VAR(bool, m_questTrackingPortal, m_questTrackingPortal, 384);
	};
};

class CMetalinkWithAIQueueComponent {
public:
	union {
	CMetalinkComponent cmetalinkcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(IAIExplorationTree, m_aiAction, m_aiAction, 328);
		MAKE_PADDED_VAR(float, m_pathfindingCostMultiplier, m_pathfindingCostMultiplier, 336);
		MAKE_PADDED_VAR(int32_t, m_destinationEntityTag, m_destinationEntityTag, 340);
		MAKE_PADDED_VAR(char*, m_destinationWaypointComponent, m_destinationWaypointComponent, 344);
		MAKE_PADDED_VAR(intptr_t, m_internalObstacleEntity, m_internalObstacleEntity, 360);
		MAKE_PADDED_VAR(char*, m_internalObstacleComponent, m_internalObstacleComponent, 368);
		MAKE_PADDED_VAR(bool, m_useInternalObstacle, m_useInternalObstacle, 380);
		MAKE_PADDED_VAR(bool, m_enabledByDefault, m_enabledByDefault, 381);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 382);
		MAKE_PADDED_VAR(bool, m_isGhostLink, m_isGhostLink, 383);
		MAKE_PADDED_VAR(bool, m_questTrackingPortal, m_questTrackingPortal, 384);
	};
};

class CMimicComponent {
public:
	union {
	CAnimatedComponent canimatedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_runtimeBehaviorInstanceSlots[2], m_runtimeBehaviorInstanceSlots, 3512);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_behaviorInstanceSlots[2], m_behaviorInstanceSlots, 3524);
		MAKE_PADDED_VAR(CSkeletalAnimationSet*, m_animationSets[2], m_animationSets, 3560);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 3656);
		MAKE_PADDED_VAR(CRagdoll, m_ragdoll, m_ragdoll, 3664);
		MAKE_PADDED_VAR(intptr_t, m_physicsRepresentation, m_physicsRepresentation, 3672);
		MAKE_PADDED_VAR(intptr_t, m_ragdollCollisionType, m_ragdollCollisionType, 3744);
		MAKE_PADDED_VAR(float, m_overrideBudgetedTickDistance, m_overrideBudgetedTickDistance, 4068);
		MAKE_PADDED_VAR(float, m_overrideDisableTickDistance, m_overrideDisableTickDistance, 4072);
		MAKE_PADDED_VAR(int32_t, m_defaultBehaviorAnimationSlotNode, m_defaultBehaviorAnimationSlotNode, 4108);
		MAKE_PADDED_VAR(bool, m_savable, m_savable, 4116);
		MAKE_PADDED_VAR(bool, m_isFrozenOnStart, m_isFrozenOnStart, 4117);
		MAKE_PADDED_VAR(bool, m_includedInAllAppearances, m_includedInAllAppearances, 4118);
		MAKE_PADDED_VAR(bool, m_useExtractedMotion, m_useExtractedMotion, 4121);
		MAKE_PADDED_VAR(bool, m_stickRagdollToCapsule, m_stickRagdollToCapsule, 4124);
		MAKE_PADDED_VAR(int32_t, m_defaultSpeedConfigKey, m_defaultSpeedConfigKey, 4152);
		MAKE_PADDED_VAR(CMimicFace, m_mimicFace, m_mimicFace, 4176);
		MAKE_PADDED_VAR(CMimicFace, m_categoryMimics, m_categoryMimics, 4184);
		MAKE_PADDED_VAR(int32_t, m_attachmentSlotName, m_attachmentSlotName, 4192);
	};
};

class CMorphedMeshComponent {
public:
	union {
	CMeshTypeComponent cmeshtypecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_morphSource, m_morphSource, 432);
		MAKE_PADDED_VAR(CMesh, m_morphTarget, m_morphTarget, 440);
		MAKE_PADDED_VAR(CBitmapTexture*, m_morphControlTextures[2], m_morphControlTextures, 448);
		MAKE_PADDED_VAR(bool*, m_useMorphBlendMaterials[2], m_useMorphBlendMaterials, 460);
		MAKE_PADDED_VAR(int32_t, m_morphComponentId, m_morphComponentId, 472);
		MAKE_PADDED_VAR(bool, m_useControlTexturesForMorph, m_useControlTexturesForMorph, 476);
		MAKE_PADDED_VAR(float, m_morphRatio, m_morphRatio, 480);
	};
};

class CMovingAgentComponent {
public:
	union {
	CAnimatedComponent canimatedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_runtimeBehaviorInstanceSlots[2], m_runtimeBehaviorInstanceSlots, 3512);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_behaviorInstanceSlots[2], m_behaviorInstanceSlots, 3524);
		MAKE_PADDED_VAR(CSkeletalAnimationSet*, m_animationSets[2], m_animationSets, 3560);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 3656);
		MAKE_PADDED_VAR(CRagdoll, m_ragdoll, m_ragdoll, 3664);
		MAKE_PADDED_VAR(intptr_t, m_physicsRepresentation, m_physicsRepresentation, 3672);
		MAKE_PADDED_VAR(intptr_t, m_ragdollCollisionType, m_ragdollCollisionType, 3744);
		MAKE_PADDED_VAR(float, m_overrideBudgetedTickDistance, m_overrideBudgetedTickDistance, 4068);
		MAKE_PADDED_VAR(float, m_overrideDisableTickDistance, m_overrideDisableTickDistance, 4072);
		MAKE_PADDED_VAR(int32_t, m_defaultBehaviorAnimationSlotNode, m_defaultBehaviorAnimationSlotNode, 4108);
		MAKE_PADDED_VAR(bool, m_savable, m_savable, 4116);
		MAKE_PADDED_VAR(bool, m_isFrozenOnStart, m_isFrozenOnStart, 4117);
		MAKE_PADDED_VAR(bool, m_includedInAllAppearances, m_includedInAllAppearances, 4118);
		MAKE_PADDED_VAR(bool, m_useExtractedMotion, m_useExtractedMotion, 4121);
		MAKE_PADDED_VAR(bool, m_stickRagdollToCapsule, m_stickRagdollToCapsule, 4124);
		MAKE_PADDED_VAR(int32_t, m_defaultSpeedConfigKey, m_defaultSpeedConfigKey, 4152);
		MAKE_PADDED_VAR(CMoveSteeringBehavior, m_steeringBehavior, m_steeringBehavior, 4184);
		MAKE_PADDED_VAR(intptr_t, m_movementAdjustor, m_movementAdjustor, 4200);
		MAKE_PADDED_VAR(bool, m_triggerAutoActivator, m_triggerAutoActivator, 4253);
		MAKE_PADDED_VAR(bool, m_triggerEnableCCD, m_triggerEnableCCD, 4254);
		MAKE_PADDED_VAR(float, m_triggerActivatorRadius, m_triggerActivatorRadius, 4256);
		MAKE_PADDED_VAR(float, m_triggerActivatorHeight, m_triggerActivatorHeight, 4260);
		MAKE_PADDED_VAR(intptr_t, m_triggerChannels, m_triggerChannels, 4272);
		MAKE_PADDED_VAR(float, m_triggerMaxSingleFrameDistance, m_triggerMaxSingleFrameDistance, 4276);
		MAKE_PADDED_VAR(float, m_ragdollRadius, m_ragdollRadius, 4608);
		MAKE_PADDED_VAR(bool, m_snapToNavigableSpace, m_snapToNavigableSpace, 4661);
		MAKE_PADDED_VAR(bool, m_steeringControlledMovement, m_steeringControlledMovement, 4662);
		MAKE_PADDED_VAR(bool, m_physicalRepresentation, m_physicalRepresentation, 4663);
	};
};

class CMovingPhysicalAgentComponent {
public:
	union {
	CMovingAgentComponent cmovingagentcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_runtimeBehaviorInstanceSlots[2], m_runtimeBehaviorInstanceSlots, 3512);
		MAKE_PADDED_VAR(SBehaviorGraphInstanceSlot*, m_behaviorInstanceSlots[2], m_behaviorInstanceSlots, 3524);
		MAKE_PADDED_VAR(CSkeletalAnimationSet*, m_animationSets[2], m_animationSets, 3560);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 3656);
		MAKE_PADDED_VAR(CRagdoll, m_ragdoll, m_ragdoll, 3664);
		MAKE_PADDED_VAR(intptr_t, m_physicsRepresentation, m_physicsRepresentation, 3672);
		MAKE_PADDED_VAR(intptr_t, m_ragdollCollisionType, m_ragdollCollisionType, 3744);
		MAKE_PADDED_VAR(float, m_overrideBudgetedTickDistance, m_overrideBudgetedTickDistance, 4068);
		MAKE_PADDED_VAR(float, m_overrideDisableTickDistance, m_overrideDisableTickDistance, 4072);
		MAKE_PADDED_VAR(int32_t, m_defaultBehaviorAnimationSlotNode, m_defaultBehaviorAnimationSlotNode, 4108);
		MAKE_PADDED_VAR(bool, m_savable, m_savable, 4116);
		MAKE_PADDED_VAR(bool, m_isFrozenOnStart, m_isFrozenOnStart, 4117);
		MAKE_PADDED_VAR(bool, m_includedInAllAppearances, m_includedInAllAppearances, 4118);
		MAKE_PADDED_VAR(bool, m_useExtractedMotion, m_useExtractedMotion, 4121);
		MAKE_PADDED_VAR(bool, m_stickRagdollToCapsule, m_stickRagdollToCapsule, 4124);
		MAKE_PADDED_VAR(int32_t, m_defaultSpeedConfigKey, m_defaultSpeedConfigKey, 4152);
		MAKE_PADDED_VAR(CMoveSteeringBehavior, m_steeringBehavior, m_steeringBehavior, 4184);
		MAKE_PADDED_VAR(intptr_t, m_movementAdjustor, m_movementAdjustor, 4200);
		MAKE_PADDED_VAR(bool, m_triggerAutoActivator, m_triggerAutoActivator, 4253);
		MAKE_PADDED_VAR(bool, m_triggerEnableCCD, m_triggerEnableCCD, 4254);
		MAKE_PADDED_VAR(float, m_triggerActivatorRadius, m_triggerActivatorRadius, 4256);
		MAKE_PADDED_VAR(float, m_triggerActivatorHeight, m_triggerActivatorHeight, 4260);
		MAKE_PADDED_VAR(intptr_t, m_triggerChannels, m_triggerChannels, 4272);
		MAKE_PADDED_VAR(float, m_triggerMaxSingleFrameDistance, m_triggerMaxSingleFrameDistance, 4276);
		MAKE_PADDED_VAR(float, m_ragdollRadius, m_ragdollRadius, 4608);
		MAKE_PADDED_VAR(bool, m_snapToNavigableSpace, m_snapToNavigableSpace, 4661);
		MAKE_PADDED_VAR(bool, m_steeringControlledMovement, m_steeringControlledMovement, 4662);
		MAKE_PADDED_VAR(bool, m_physicalRepresentation, m_physicalRepresentation, 4663);
	};
};

class CParticleComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CParticleSystem, m_particleSystem, m_particleSystem, 400);
		MAKE_PADDED_VAR(intptr_t, m_transparencySortGroup, m_transparencySortGroup, 440);
		MAKE_PADDED_VAR(intptr_t, m_envAutoHideGroup, m_envAutoHideGroup, 456);
	};
};

class CParticleComponentCooked {
public:
	union {
	CParticleComponent cparticlecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CParticleSystem, m_particleSystem, m_particleSystem, 400);
		MAKE_PADDED_VAR(intptr_t, m_transparencySortGroup, m_transparencySortGroup, 440);
		MAKE_PADDED_VAR(intptr_t, m_envAutoHideGroup, m_envAutoHideGroup, 456);
	};
};

class CPersistentLightComponent {
public:
	union {
	CGameplayLightComponent cgameplaylightcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 288);
		MAKE_PADDED_VAR(float, m_rangeMin, m_rangeMin, 292);
		MAKE_PADDED_VAR(float, m_rangeMax, m_rangeMax, 296);
		MAKE_PADDED_VAR(uint32_t, m_rangeAngle, m_rangeAngle, 300);
		MAKE_PADDED_VAR(float, m_height, m_height, 304);
		MAKE_PADDED_VAR(bool, m_isPlayerOnly, m_isPlayerOnly, 320);
		MAKE_PADDED_VAR(bool, m_manualTestingOnly, m_manualTestingOnly, 321);
		MAKE_PADDED_VAR(bool, m_checkLineOfSight, m_checkLineOfSight, 322);
		MAKE_PADDED_VAR(float, m_alwaysVisibleRange, m_alwaysVisibleRange, 324);
		MAKE_PADDED_VAR(Vector, m_lineOfSightOffset, m_lineOfSightOffset, 336);
		MAKE_PADDED_VAR(bool, m_performScriptedTest, m_performScriptedTest, 352);
		MAKE_PADDED_VAR(char*, m_actionName, m_actionName, 424);
		MAKE_PADDED_VAR(bool, m_checkCameraVisibility, m_checkCameraVisibility, 448);
		MAKE_PADDED_VAR(bool, m_reportToScript, m_reportToScript, 449);
		MAKE_PADDED_VAR(bool, m_isEnabledInCombat, m_isEnabledInCombat, 450);
		MAKE_PADDED_VAR(bool, m_shouldIgnoreLocks, m_shouldIgnoreLocks, 451);
		MAKE_PADDED_VAR(bool, m_isLightOn, m_isLightOn, 512);
		MAKE_PADDED_VAR(bool, m_isCityLight, m_isCityLight, 513);
		MAKE_PADDED_VAR(bool, m_isInteractive, m_isInteractive, 514);
		MAKE_PADDED_VAR(bool, m_isAffectedByWeather, m_isAffectedByWeather, 515);
	};
};

class CPlanarShapeComponent {
public:
	union {
	CBoundedComponent cboundedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
	};
};

class CPlayEffectPerformableAction {
public:
	union {
	IEffectManagmentPerformableAction ieffectmanagmentperformableaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 104);
		MAKE_PADDED_VAR(int32_t, m_boneName, m_boneName, 108);
	};
};

class CPointLightComponent {
public:
	union {
	CLightComponent clightcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(Color, m_color, m_color, 304);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 308);
		MAKE_PADDED_VAR(float, m_brightness, m_brightness, 312);
		MAKE_PADDED_VAR(float, m_attenuation, m_attenuation, 316);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 320);
		MAKE_PADDED_VAR(float, m_autoHideRange, m_autoHideRange, 324);
		MAKE_PADDED_VAR(SLightFlickering, m_lightFlickering, m_lightFlickering, 336);
		MAKE_PADDED_VAR(bool, m_allowDistantFade, m_allowDistantFade, 348);
		MAKE_PADDED_VAR(intptr_t, m_envColorGroup, m_envColorGroup, 352);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 356);
		MAKE_PADDED_VAR(intptr_t, m_lightUsageMask, m_lightUsageMask, 360);
		MAKE_PADDED_VAR(float, m_shadowBlendFactor, m_shadowBlendFactor, 364);
		MAKE_PADDED_VAR(intptr_t, m_shadowCastingMode, m_shadowCastingMode, 368);
		MAKE_PADDED_VAR(float, m_shadowFadeDistance, m_shadowFadeDistance, 372);
		MAKE_PADDED_VAR(float, m_shadowFadeRange, m_shadowFadeRange, 376);
		MAKE_PADDED_VAR(bool, m_cacheStaticShadows, m_cacheStaticShadows, 384);
		MAKE_PADDED_VAR(intptr_t, m_dynamicShadowsFaceMask, m_dynamicShadowsFaceMask, 385);
	};
};

class CProjectileTrajectory {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(CEntity, m_caster, m_caster, 512);
		MAKE_PADDED_VAR(CEntity, m_realCaster, m_realCaster, 520);
		MAKE_PADDED_VAR(int32_t, m_projectileName, m_projectileName, 552);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 580);
		MAKE_PADDED_VAR(float, m_bounceOfVelocityPreserve, m_bounceOfVelocityPreserve, 660);
		MAKE_PADDED_VAR(Vector, m_animatedOffset, m_animatedOffset, 688);
		MAKE_PADDED_VAR(float, m_animatedTimeMultiplier, m_animatedTimeMultiplier, 704);
		MAKE_PADDED_VAR(float, m_overlapAccuracy, m_overlapAccuracy, 708);
		MAKE_PADDED_VAR(bool, m_doWaterLevelTest, m_doWaterLevelTest, 712);
		MAKE_PADDED_VAR(float, m_waterTestAccuracy, m_waterTestAccuracy, 720);
	};
};

class CR4JournalPlaceEntity {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(CJournalPath, m_placeEntry, m_placeEntry, 512);
	};
};

class CR4MapPinEntity {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_entityName, m_entityName, 512);
		MAKE_PADDED_VAR(intptr_t, m_customName, m_customName, 516);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 520);
		MAKE_PADDED_VAR(bool, m_ignoreWhenExportingMapPins, m_ignoreWhenExportingMapPins, 524);
	};
};

class CSpawnPointComponent {
public:
	union {
	CWayPointComponent cwaypointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 320);
	};
};

class CSpotLightComponent {
public:
	union {
	CLightComponent clightcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(Color, m_color, m_color, 304);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 308);
		MAKE_PADDED_VAR(float, m_brightness, m_brightness, 312);
		MAKE_PADDED_VAR(float, m_attenuation, m_attenuation, 316);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 320);
		MAKE_PADDED_VAR(float, m_autoHideRange, m_autoHideRange, 324);
		MAKE_PADDED_VAR(SLightFlickering, m_lightFlickering, m_lightFlickering, 336);
		MAKE_PADDED_VAR(bool, m_allowDistantFade, m_allowDistantFade, 348);
		MAKE_PADDED_VAR(intptr_t, m_envColorGroup, m_envColorGroup, 352);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 356);
		MAKE_PADDED_VAR(intptr_t, m_lightUsageMask, m_lightUsageMask, 360);
		MAKE_PADDED_VAR(float, m_shadowBlendFactor, m_shadowBlendFactor, 364);
		MAKE_PADDED_VAR(intptr_t, m_shadowCastingMode, m_shadowCastingMode, 368);
		MAKE_PADDED_VAR(float, m_shadowFadeDistance, m_shadowFadeDistance, 372);
		MAKE_PADDED_VAR(float, m_shadowFadeRange, m_shadowFadeRange, 376);
		MAKE_PADDED_VAR(float, m_innerAngle, m_innerAngle, 384);
		MAKE_PADDED_VAR(float, m_outerAngle, m_outerAngle, 388);
		MAKE_PADDED_VAR(float, m_softness, m_softness, 392);
		MAKE_PADDED_VAR(float, m_projectionTextureAngle, m_projectionTextureAngle, 396);
		MAKE_PADDED_VAR(float, m_projectionTexureUBias, m_projectionTexureUBias, 400);
		MAKE_PADDED_VAR(float, m_projectionTexureVBias, m_projectionTexureVBias, 404);
		MAKE_PADDED_VAR(CBitmapTexture, m_projectionTexture, m_projectionTexture, 408);
	};
};

class CStaticCamera {
public:
	union {
	CCamera ccamera;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(float, m_activationDuration, m_activationDuration, 464);
		MAKE_PADDED_VAR(float, m_deactivationDuration, m_deactivationDuration, 468);
		MAKE_PADDED_VAR(float, m_timeout, m_timeout, 472);
		MAKE_PADDED_VAR(float, m_zoom, m_zoom, 476);
		MAKE_PADDED_VAR(float, m_fov, m_fov, 480);
		MAKE_PADDED_VAR(int32_t, m_animState, m_animState, 484);
		MAKE_PADDED_VAR(int32_t, m_guiEffect, m_guiEffect, 488);
		MAKE_PADDED_VAR(bool, m_blockPlayer, m_blockPlayer, 492);
		MAKE_PADDED_VAR(bool, m_resetPlayerCamera, m_resetPlayerCamera, 493);
		MAKE_PADDED_VAR(intptr_t, m_solver, m_solver, 496);
		MAKE_PADDED_VAR(float, m_fadeStartDuration, m_fadeStartDuration, 500);
		MAKE_PADDED_VAR(float, m_fadeEndDuration, m_fadeEndDuration, 504);
		MAKE_PADDED_VAR(Color, m_fadeStartColor, m_fadeStartColor, 508);
		MAKE_PADDED_VAR(Color, m_fadeEndColor, m_fadeEndColor, 512);
		MAKE_PADDED_VAR(bool, m_isFadeStartFadeIn, m_isFadeStartFadeIn, 516);
		MAKE_PADDED_VAR(bool, m_isFadeEndFadeIn, m_isFadeEndFadeIn, 517);
	};
};

class CStopAllEffectsPerformableAction {
public:
	union {
	IEffectManagmentPerformableAction ieffectmanagmentperformableaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
	};
};

class CStopEffectPerformableAction {
public:
	union {
	IEffectManagmentPerformableAction ieffectmanagmentperformableaction;
		MAKE_PADDED_VAR(intptr_t, m_entitySelectionType, m_entitySelectionType, 88);
		MAKE_PADDED_VAR(intptr_t, m_entityHandle, m_entityHandle, 96);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 104);
	};
};

class CStorySceneCameraBlendEvent {
public:
	union {
	CStorySceneEventBlend cstorysceneeventblend;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(intptr_t*, m_keys[2], m_keys, 248);
		MAKE_PADDED_VAR(float, m_firstPointOfInterpolation, m_firstPointOfInterpolation, 264);
		MAKE_PADDED_VAR(float, m_lastPointOfInterpolation, m_lastPointOfInterpolation, 268);
		MAKE_PADDED_VAR(intptr_t, m_firstPartInterpolation, m_firstPartInterpolation, 272);
		MAKE_PADDED_VAR(intptr_t, m_lastPartInterpolation, m_lastPartInterpolation, 276);
	};
};

class CStorySceneCutsceneSection {
public:
	union {
	CStorySceneSection cstoryscenesection;
		MAKE_PADDED_VAR(intptr_t*, m_linkedElements[2], m_linkedElements, 88);
		MAKE_PADDED_VAR(intptr_t, m_nextLinkElement, m_nextLinkElement, 104);
		MAKE_PADDED_VAR(char*, m_comment, m_comment, 112);
		MAKE_PADDED_VAR(char*, m_sectionName, m_sectionName, 136);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 148);
		MAKE_PADDED_VAR(intptr_t, m_choice, m_choice, 160);
		MAKE_PADDED_VAR(uint32_t, m_sectionId, m_sectionId, 168);
		MAKE_PADDED_VAR(bool, m_isGameplay, m_isGameplay, 172);
		MAKE_PADDED_VAR(bool, m_isImportant, m_isImportant, 173);
		MAKE_PADDED_VAR(bool, m_allowCameraMovement, m_allowCameraMovement, 174);
		MAKE_PADDED_VAR(bool, m_hasCinematicOneliners, m_hasCinematicOneliners, 175);
		MAKE_PADDED_VAR(bool, m_fadeInAtBeginning, m_fadeInAtBeginning, 176);
		MAKE_PADDED_VAR(bool, m_fadeOutAtEnd, m_fadeOutAtEnd, 177);
		MAKE_PADDED_VAR(bool, m_manualFadeIn, m_manualFadeIn, 178);
		MAKE_PADDED_VAR(float, m_interceptRadius, m_interceptRadius, 180);
		MAKE_PADDED_VAR(float, m_interceptTimeout, m_interceptTimeout, 184);
		MAKE_PADDED_VAR(bool, m_pauseInCombat, m_pauseInCombat, 188);
		MAKE_PADDED_VAR(bool, m_canBeSkipped, m_canBeSkipped, 189);
		MAKE_PADDED_VAR(bool, m_canHaveLookats, m_canHaveLookats, 190);
		MAKE_PADDED_VAR(uint32_t, m_numberOfInputPaths, m_numberOfInputPaths, 192);
		MAKE_PADDED_VAR(int32_t, m_dialogsetChangeTo, m_dialogsetChangeTo, 196);
		MAKE_PADDED_VAR(bool, m_forceDialogset, m_forceDialogset, 200);
		MAKE_PADDED_VAR(bool, m_streamingLock, m_streamingLock, 201);
		MAKE_PADDED_VAR(int32_t, m_streamingAreaTag, m_streamingAreaTag, 204);
		MAKE_PADDED_VAR(bool, m_streamingUseCameraPosition, m_streamingUseCameraPosition, 208);
		MAKE_PADDED_VAR(float, m_streamingCameraAllowedJumpDistance, m_streamingCameraAllowedJumpDistance, 212);
		MAKE_PADDED_VAR(intptr_t*, m_inputPathsElements[2], m_inputPathsElements, 216);
		MAKE_PADDED_VAR(intptr_t*, m_interceptSections[2], m_interceptSections, 228);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 240);
		MAKE_PADDED_VAR(uint32_t, m_nextVariantId, m_nextVariantId, 244);
		MAKE_PADDED_VAR(uint32_t, m_defaultVariantId, m_defaultVariantId, 248);
		MAKE_PADDED_VAR(intptr_t*, m_variants[2], m_variants, 252);
		MAKE_PADDED_VAR(intptr_t*, m_events[2], m_events, 312);
		MAKE_PADDED_VAR(intptr_t*, m_eventsInfo[2], m_eventsInfo, 324);
		MAKE_PADDED_VAR(intptr_t*, m_localeVariantMappings[2], m_localeVariantMappings, 384);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnEnd[2], m_soundEventsOnEnd, 448);
		MAKE_PADDED_VAR(int32_t*, m_soundEventsOnSkip[2], m_soundEventsOnSkip, 460);
		MAKE_PADDED_VAR(bool, m_blockMusicTriggers, m_blockMusicTriggers, 472);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 476);
		MAKE_PADDED_VAR(float, m_maxBoxExtentsToApplyHiResShadows, m_maxBoxExtentsToApplyHiResShadows, 488);
		MAKE_PADDED_VAR(float, m_distantLightStartOverride, m_distantLightStartOverride, 492);
		MAKE_PADDED_VAR(intptr_t*, m_sceneElements[2], m_sceneElements, 496);
		MAKE_PADDED_VAR(CCutsceneTemplate, m_cutscene, m_cutscene, 512);
		MAKE_PADDED_VAR(intptr_t, m_point, m_point, 520);
		MAKE_PADDED_VAR(bool, m_looped, m_looped, 532);
		MAKE_PADDED_VAR(bool, m_clearActorsHands, m_clearActorsHands, 533);
		MAKE_PADDED_VAR(SCutsceneActorOverrideMapping*, m_actorOverrides[2], m_actorOverrides, 536);
	};
};

class CStorySceneEventAnimation {
public:
	union {
	CStorySceneEventAnimClip cstorysceneeventanimclip;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 352);
		MAKE_PADDED_VAR(bool, m_useMotionExtraction, m_useMotionExtraction, 356);
		MAKE_PADDED_VAR(bool, m_useFakeMotion, m_useFakeMotion, 357);
		MAKE_PADDED_VAR(bool, m_disableLookAt, m_disableLookAt, 358);
		MAKE_PADDED_VAR(float, m_disableLookAtSpeed, m_disableLookAtSpeed, 360);
		MAKE_PADDED_VAR(bool, m_useLowerBodyPartsForLookAt, m_useLowerBodyPartsForLookAt, 364);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 365);
		MAKE_PADDED_VAR(bool, m_muteSoundEvents, m_muteSoundEvents, 366);
		MAKE_PADDED_VAR(int32_t*, m_bonesIdx[2], m_bonesIdx, 368);
		MAKE_PADDED_VAR(float*, m_bonesWeight[2], m_bonesWeight, 380);
		MAKE_PADDED_VAR(intptr_t, m_animationType, m_animationType, 392);
		MAKE_PADDED_VAR(bool, m_addConvertToAdditive, m_addConvertToAdditive, 396);
		MAKE_PADDED_VAR(intptr_t, m_addAdditiveType, m_addAdditiveType, 400);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 404);
		MAKE_PADDED_VAR(SCurveData, m_weightCurve, m_weightCurve, 408);
		MAKE_PADDED_VAR(bool, m_weightCurveChanged, m_weightCurveChanged, 432);
		MAKE_PADDED_VAR(bool, m_supportsMotionExClipFront, m_supportsMotionExClipFront, 433);
	};
};

class CStorySceneEventOverrideAnimation {
public:
	union {
	CStorySceneEventAnimation cstorysceneeventanimation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 352);
		MAKE_PADDED_VAR(bool, m_useMotionExtraction, m_useMotionExtraction, 356);
		MAKE_PADDED_VAR(bool, m_useFakeMotion, m_useFakeMotion, 357);
		MAKE_PADDED_VAR(bool, m_disableLookAt, m_disableLookAt, 358);
		MAKE_PADDED_VAR(float, m_disableLookAtSpeed, m_disableLookAtSpeed, 360);
		MAKE_PADDED_VAR(bool, m_useLowerBodyPartsForLookAt, m_useLowerBodyPartsForLookAt, 364);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 365);
		MAKE_PADDED_VAR(bool, m_muteSoundEvents, m_muteSoundEvents, 366);
		MAKE_PADDED_VAR(int32_t*, m_bonesIdx[2], m_bonesIdx, 368);
		MAKE_PADDED_VAR(float*, m_bonesWeight[2], m_bonesWeight, 380);
		MAKE_PADDED_VAR(intptr_t, m_animationType, m_animationType, 392);
		MAKE_PADDED_VAR(bool, m_addConvertToAdditive, m_addConvertToAdditive, 396);
		MAKE_PADDED_VAR(intptr_t, m_addAdditiveType, m_addAdditiveType, 400);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 404);
		MAKE_PADDED_VAR(SCurveData, m_weightCurve, m_weightCurve, 408);
		MAKE_PADDED_VAR(bool, m_weightCurveChanged, m_weightCurveChanged, 432);
		MAKE_PADDED_VAR(bool, m_supportsMotionExClipFront, m_supportsMotionExClipFront, 433);
		MAKE_PADDED_VAR(bool, m_fakeProp, m_fakeProp, 472);
	};
};

class CStorySceneSpawner {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(CStoryScene, m_storyScene, m_storyScene, 512);
		MAKE_PADDED_VAR(char*, m_inputName, m_inputName, 520);
	};
};

class CStripeComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CBitmapTexture, m_diffuseTexture, m_diffuseTexture, 376);
		MAKE_PADDED_VAR(CBitmapTexture, m_diffuseTexture2, m_diffuseTexture2, 384);
		MAKE_PADDED_VAR(CBitmapTexture, m_normalTexture, m_normalTexture, 392);
		MAKE_PADDED_VAR(CBitmapTexture, m_normalTexture2, m_normalTexture2, 400);
		MAKE_PADDED_VAR(CBitmapTexture, m_blendTexture, m_blendTexture, 408);
		MAKE_PADDED_VAR(CBitmapTexture, m_depthTexture, m_depthTexture, 416);
		MAKE_PADDED_VAR(float, m_textureLength, m_textureLength, 424);
		MAKE_PADDED_VAR(float, m_blendTextureLength, m_blendTextureLength, 428);
		MAKE_PADDED_VAR(SStripeControlPoint*, m_points[2], m_points, 432);
		MAKE_PADDED_VAR(float, m_width, m_width, 444);
		MAKE_PADDED_VAR(float, m_alphaScale, m_alphaScale, 448);
		MAKE_PADDED_VAR(float, m_endpointAlpha, m_endpointAlpha, 452);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 456);
		MAKE_PADDED_VAR(Color, m_stripeColor, m_stripeColor, 460);
		MAKE_PADDED_VAR(float, m_density, m_density, 464);
		MAKE_PADDED_VAR(bool, m_rotateTexture, m_rotateTexture, 468);
		MAKE_PADDED_VAR(bool, m_projectToTerrain, m_projectToTerrain, 469);
		MAKE_PADDED_VAR(bool, m_exposedToNavigation, m_exposedToNavigation, 470);
		MAKE_PADDED_VAR(uint32_t, m_cookedVertexCount, m_cookedVertexCount, 480);
		MAKE_PADDED_VAR(uint32_t, m_cookedIndexCount, m_cookedIndexCount, 484);
		MAKE_PADDED_VAR(intptr_t, m_cookedIndices, m_cookedIndices, 488);
		MAKE_PADDED_VAR(intptr_t, m_cookedVertices, m_cookedVertices, 512);
		MAKE_PADDED_VAR(Box, m_cookedBoundingBox, m_cookedBoundingBox, 544);
	};
};

class CSwarmRenderComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CEntityTemplate, m_boidTemplateHandle, m_boidTemplateHandle, 464);
	};
};

class CUmbraSmallestHoleOverrideComponent {
public:
	union {
	CBoundedComponent cboundedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(float, m_smallestHoleOverride, m_smallestHoleOverride, 336);
	};
};

class CVirtualContainerEntity {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(char*, m_characterState[2], m_characterState, 512);
	};
};

class CWanderPointComponent {
public:
	union {
	CWayPointComponent cwaypointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(SWanderPointConnection*, m_connectedPoints[2], m_connectedPoints, 320);
		MAKE_PADDED_VAR(float, m_wanderPointRadius, m_wanderPointRadius, 332);
	};
};

class IBoidLairEntity {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_boidSpeciesName, m_boidSpeciesName, 520);
		MAKE_PADDED_VAR(float, m_spawnFrequency, m_spawnFrequency, 568);
		MAKE_PADDED_VAR(float, m_range, m_range, 572);
		MAKE_PADDED_VAR(float, m_visibilityRange, m_visibilityRange, 576);
		MAKE_PADDED_VAR(int32_t, m_spawnLimit, m_spawnLimit, 580);
		MAKE_PADDED_VAR(int32_t, m_totalLifetimeSpawnLimit, m_totalLifetimeSpawnLimit, 584);
		MAKE_PADDED_VAR(intptr_t, m_lairBoundings, m_lairBoundings, 600);
	};
};

class W3Boat {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(bool, m_teleportedFromOtherHUB, m_teleportedFromOtherHUB, 928);
	};
};

class W3BoatSpawner {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
	};
};

class W3LockableEntity {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(bool, m_isEnabledOnSpawn, m_isEnabledOnSpawn, 512);
		MAKE_PADDED_VAR(bool, m_lockedByKey, m_lockedByKey, 513);
	};
};

class W3ToxicCloud {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
	};
};

class CActionPoint {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(SEntityActionsRouterEntry*, m_events[2], m_events, 520);
		MAKE_PADDED_VAR(bool, m_actionBreakable, m_actionBreakable, 536);
		MAKE_PADDED_VAR(bool, m_overrideActionBreakableInComponent, m_overrideActionBreakableInComponent, 537);
	};
};

class CActor {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(intptr_t, m_actorGroups, m_actorGroups, 644);
		MAKE_PADDED_VAR(int32_t, m_voiceTag, m_voiceTag, 648);
		MAKE_PADDED_VAR(intptr_t*, m_voiceToRandomize[2], m_voiceToRandomize, 672);
		MAKE_PADDED_VAR(float, m_aimOffset, m_aimOffset, 696);
		MAKE_PADDED_VAR(float, m_barOffset, m_barOffset, 700);
		MAKE_PADDED_VAR(int32_t, m_frontPushAnim, m_frontPushAnim, 716);
		MAKE_PADDED_VAR(int32_t, m_backPushAnim, m_backPushAnim, 720);
		MAKE_PADDED_VAR(bool, m_isAttackableByPlayer, m_isAttackableByPlayer, 760);
		MAKE_PADDED_VAR(bool, m_isCollidable, m_isCollidable, 761);
		MAKE_PADDED_VAR(bool, m_isVisibileFromFar, m_isVisibileFromFar, 762);
		MAKE_PADDED_VAR(bool, m_useHiResShadows, m_useHiResShadows, 763);
		MAKE_PADDED_VAR(bool, m_isInFFMiniGame, m_isInFFMiniGame, 765);
		MAKE_PADDED_VAR(bool, m_useAnimationEventFilter, m_useAnimationEventFilter, 767);
		MAKE_PADDED_VAR(int32_t, m_pelvisBoneName, m_pelvisBoneName, 776);
		MAKE_PADDED_VAR(int32_t, m_torsoBoneName, m_torsoBoneName, 780);
		MAKE_PADDED_VAR(int32_t, m_headBoneName, m_headBoneName, 784);
		MAKE_PADDED_VAR(int32_t, m_losTestBoneIndex, m_losTestBoneIndex, 788);
		MAKE_PADDED_VAR(intptr_t, m_behTreeMachine, m_behTreeMachine, 816);
		MAKE_PADDED_VAR(intptr_t, m_attackTarget, m_attackTarget, 2256);
		MAKE_PADDED_VAR(EngineTime, m_attackTargetSetTime, m_attackTargetSetTime, 2264);
		MAKE_PADDED_VAR(int32_t, m_encounterGroupUsedToSpawn, m_encounterGroupUsedToSpawn, 2328);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 2344);
	};
};

class CAreaComponent {
public:
	union {
	CBoundedComponent cboundedcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
	};
};

class CBehTreeNodeCombatTicketManagedGetDefinition {
public:
	union {
	CBehTreeNodeCombatTicketManagerDefinition cbehtreenodecombatticketmanagerdefinition;
		MAKE_PADDED_VAR(CBehTreeValInt, m_priority, m_priority, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 104);
		MAKE_PADDED_VAR(int32_t, m_ticketName, m_ticketName, 112);
		MAKE_PADDED_VAR(intptr_t, m_ticketsProvider, m_ticketsProvider, 116);
		MAKE_PADDED_VAR(CBehTreeValInt, m_ticketsCount, m_ticketsCount, 120);
		MAKE_PADDED_VAR(float, m_importanceUpdateDelay, m_importanceUpdateDelay, 128);
		MAKE_PADDED_VAR(intptr_t, m_ticketAlgorithm, m_ticketAlgorithm, 136);
		MAKE_PADDED_VAR(bool, m_locksTicket, m_locksTicket, 144);
		MAKE_PADDED_VAR(bool, m_freesTicket, m_freesTicket, 145);
		MAKE_PADDED_VAR(bool, m_failsWhenTicketIsLost, m_failsWhenTicketIsLost, 146);
		MAKE_PADDED_VAR(float, m_ticketRequestValidTime, m_ticketRequestValidTime, 148);
	};
};

class CBoidAreaComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(int32_t, m_boidAreaType, m_boidAreaType, 496);
	};
};

class CBrushComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(intptr_t*, m_faces[2], m_faces, 368);
		MAKE_PADDED_VAR(intptr_t, m_csgType, m_csgType, 380);
		MAKE_PADDED_VAR(int32_t, m_brushIndex, m_brushIndex, 384);
	};
};

class CCameraEffectTrigger {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_effectName, m_effectName, 512);
		MAKE_PADDED_VAR(bool, m_isPlayingEffect, m_isPlayingEffect, 516);
		MAKE_PADDED_VAR(bool, m_useSharedEffects, m_useSharedEffects, 517);
		MAKE_PADDED_VAR(intptr_t, m_effectEntityPosition, m_effectEntityPosition, 520);
		MAKE_PADDED_VAR(intptr_t, m_effectEntityRotation, m_effectEntityRotation, 524);
		MAKE_PADDED_VAR(Vector3, m_effectEntityOffset, m_effectEntityOffset, 528);
		MAKE_PADDED_VAR(GameTime, m_playFrom, m_playFrom, 552);
		MAKE_PADDED_VAR(GameTime, m_playTo, m_playTo, 556);
	};
};

class CClothAttachment {
public:
	union {
	CMeshSkinningAttachment cmeshskinningattachment;
		MAKE_PADDED_VAR(intptr_t, m_parent, m_parent, 88);
		MAKE_PADDED_VAR(intptr_t, m_child, m_child, 96);
		MAKE_PADDED_VAR(bool, m_isBroken, m_isBroken, 104);
		MAKE_PADDED_VAR(intptr_t, m_relativeTransform, m_relativeTransform, 112);
		MAKE_PADDED_VAR(int32_t, m_parentSlotName, m_parentSlotName, 120);
		MAKE_PADDED_VAR(intptr_t, m_attachmentFlags, m_attachmentFlags, 124);
		MAKE_PADDED_VAR(intptr_t, m_parentSlot, m_parentSlot, 128);
	};
};

class CClothComponent {
public:
	union {
	CMeshTypeComponent cmeshtypecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CApexResource, m_resource, m_resource, 448);
		MAKE_PADDED_VAR(intptr_t, m_dispacher_selection, m_dispacher_selection, 528);
		MAKE_PADDED_VAR(bool, m_recomputeNormals, m_recomputeNormals, 532);
		MAKE_PADDED_VAR(bool, m_correctSimulationNormals, m_correctSimulationNormals, 533);
		MAKE_PADDED_VAR(bool, m_slowStart, m_slowStart, 534);
		MAKE_PADDED_VAR(bool, m_useStiffSolver, m_useStiffSolver, 535);
		MAKE_PADDED_VAR(float, m_pressure, m_pressure, 536);
		MAKE_PADDED_VAR(float, m_lodWeights_maxDistance, m_lodWeights_maxDistance, 540);
		MAKE_PADDED_VAR(float, m_lodWeights_distanceWeight, m_lodWeights_distanceWeight, 544);
		MAKE_PADDED_VAR(float, m_lodWeights_bias, m_lodWeights_bias, 548);
		MAKE_PADDED_VAR(float, m_lodWeights_benefitsBias, m_lodWeights_benefitsBias, 552);
		MAKE_PADDED_VAR(float, m_maxDistanceBlendTime, m_maxDistanceBlendTime, 556);
		MAKE_PADDED_VAR(uint32_t, m_uvChannelForTangentUpdate, m_uvChannelForTangentUpdate, 560);
		MAKE_PADDED_VAR(bool, m_maxDistanceScale_Multipliable, m_maxDistanceScale_Multipliable, 564);
		MAKE_PADDED_VAR(float, m_maxDistanceScale_Scale, m_maxDistanceScale_Scale, 568);
		MAKE_PADDED_VAR(float, m_collisionResponseCoefficient, m_collisionResponseCoefficient, 572);
		MAKE_PADDED_VAR(bool, m_allowAdaptiveTargetFrequency, m_allowAdaptiveTargetFrequency, 576);
		MAKE_PADDED_VAR(float, m_windScaler, m_windScaler, 580);
		MAKE_PADDED_VAR(intptr_t, m_triggerType, m_triggerType, 592);
		MAKE_PADDED_VAR(Vector, m_triggerDimensions, m_triggerDimensions, 608);
		MAKE_PADDED_VAR(int32_t*, m_triggeringCollisionGroupNames[2], m_triggeringCollisionGroupNames, 624);
		MAKE_PADDED_VAR(Vector, m_triggerLocalOffset_V_3_, m_triggerLocalOffset_V_3_, 688);
		MAKE_PADDED_VAR(float, m_shadowDistanceOverride, m_shadowDistanceOverride, 720);
	};
};

class CDecalComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CBitmapTexture, m_diffuseTexture, m_diffuseTexture, 368);
		MAKE_PADDED_VAR(float, m_normalThreshold, m_normalThreshold, 376);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 380);
		MAKE_PADDED_VAR(bool, m_verticalFlip, m_verticalFlip, 384);
		MAKE_PADDED_VAR(bool, m_horizontalFlip, m_horizontalFlip, 385);
		MAKE_PADDED_VAR(Color, m_specularColor, m_specularColor, 386);
		MAKE_PADDED_VAR(float, m_specularity, m_specularity, 392);
		MAKE_PADDED_VAR(float, m_fadeTime, m_fadeTime, 396);
	};
};

class CDeniedAreaComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_collisionType, m_collisionType, 504);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 508);
		MAKE_PADDED_VAR(bool, m_canBeDisabled, m_canBeDisabled, 509);
	};
};

class CDeniedAreaSaveable {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 512);
	};
};

class CDestructionComponent {
public:
	union {
	CMeshTypeComponent cmeshtypecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CPhysicsDestructionResource, m_m_baseResource, m_m_baseResource, 464);
		MAKE_PADDED_VAR(CPhysicsDestructionResource, m_m_fracturedResource, m_m_fracturedResource, 472);
		MAKE_PADDED_VAR(intptr_t, m_m_physicalCollisionType, m_m_physicalCollisionType, 496);
		MAKE_PADDED_VAR(intptr_t, m_m_fracturedPhysicalCollisionType, m_m_fracturedPhysicalCollisionType, 536);
		MAKE_PADDED_VAR(Matrix, m_parameters_m_pose, m_parameters_m_pose, 576);
		MAKE_PADDED_VAR(bool, m_dynamic, m_dynamic, 640);
		MAKE_PADDED_VAR(bool, m_kinematic, m_kinematic, 641);
		MAKE_PADDED_VAR(bool, m_useWorldSupport, m_useWorldSupport, 642);
		MAKE_PADDED_VAR(bool, m_debrisTimeout, m_debrisTimeout, 643);
		MAKE_PADDED_VAR(float, m_debrisTimeoutMin, m_debrisTimeoutMin, 644);
		MAKE_PADDED_VAR(float, m_debrisTimeoutMax, m_debrisTimeoutMax, 648);
		MAKE_PADDED_VAR(bool, m_hasInitialFractureVelocity, m_hasInitialFractureVelocity, 652);
		MAKE_PADDED_VAR(Vector, m_initialBaseVelocity, m_initialBaseVelocity, 656);
		MAKE_PADDED_VAR(float, m_debrisMaxSeparationDistance, m_debrisMaxSeparationDistance, 672);
		MAKE_PADDED_VAR(float, m_simulationDistance, m_simulationDistance, 676);
		MAKE_PADDED_VAR(float, m_maxVelocity, m_maxVelocity, 680);
		MAKE_PADDED_VAR(float, m_maxAngularFractureVelocity, m_maxAngularFractureVelocity, 684);
		MAKE_PADDED_VAR(float, m_fadeOutTime, m_fadeOutTime, 688);
		MAKE_PADDED_VAR(bool, m_accumulateDamage, m_accumulateDamage, 692);
		MAKE_PADDED_VAR(float, m_forceToDamage, m_forceToDamage, 696);
		MAKE_PADDED_VAR(float, m_damageThreshold, m_damageThreshold, 700);
		MAKE_PADDED_VAR(float, m_damageEndurance, m_damageEndurance, 704);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 736);
		MAKE_PADDED_VAR(bool, m_disableObstacleOnDestruction, m_disableObstacleOnDestruction, 740);
		MAKE_PADDED_VAR(intptr_t*, m_eventOnDestruction[2], m_eventOnDestruction, 776);
		MAKE_PADDED_VAR(intptr_t, m_fractureSoundEvent, m_fractureSoundEvent, 788);
		MAKE_PADDED_VAR(int32_t, m_fxName, m_fxName, 800);
	};
};

class CDestructionSystemComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CApexResource, m_m_resource, m_m_resource, 384);
		MAKE_PADDED_VAR(CMaterialGraph*, m_parameters_m_materials[2], m_parameters_m_materials, 392);
		MAKE_PADDED_VAR(intptr_t, m_m_physicalCollisionType, m_m_physicalCollisionType, 408);
		MAKE_PADDED_VAR(intptr_t, m_m_fracturedPhysicalCollisionType, m_m_fracturedPhysicalCollisionType, 448);
		MAKE_PADDED_VAR(intptr_t, m_dispacher_selection, m_dispacher_selection, 560);
		MAKE_PADDED_VAR(bool, m_dynamic, m_dynamic, 564);
		MAKE_PADDED_VAR(float, m_damageCap, m_damageCap, 592);
		MAKE_PADDED_VAR(float, m_damageThreshold, m_damageThreshold, 596);
		MAKE_PADDED_VAR(float, m_damageToRadius, m_damageToRadius, 600);
		MAKE_PADDED_VAR(int32_t, m_debrisDepth, m_debrisDepth, 604);
		MAKE_PADDED_VAR(float, m_debrisDestructionProbability, m_debrisDestructionProbability, 608);
		MAKE_PADDED_VAR(float, m_debrisLifetimeMin, m_debrisLifetimeMin, 612);
		MAKE_PADDED_VAR(float, m_debrisLifetimeMax, m_debrisLifetimeMax, 616);
		MAKE_PADDED_VAR(float, m_debrisMaxSeparationMin, m_debrisMaxSeparationMin, 620);
		MAKE_PADDED_VAR(float, m_debrisMaxSeparationMax, m_debrisMaxSeparationMax, 624);
		MAKE_PADDED_VAR(float, m_fadeOutTime, m_fadeOutTime, 628);
		MAKE_PADDED_VAR(uint32_t, m_essentialDepth, m_essentialDepth, 632);
		MAKE_PADDED_VAR(float, m_forceToDamage, m_forceToDamage, 636);
		MAKE_PADDED_VAR(float, m_fractureImpulseScale, m_fractureImpulseScale, 640);
		MAKE_PADDED_VAR(int32_t, m_impactDamageDefaultDepth, m_impactDamageDefaultDepth, 644);
		MAKE_PADDED_VAR(float, m_impactVelocityThreshold, m_impactVelocityThreshold, 648);
		MAKE_PADDED_VAR(float, m_materialStrength, m_materialStrength, 652);
		MAKE_PADDED_VAR(float, m_maxChunkSpeed, m_maxChunkSpeed, 656);
		MAKE_PADDED_VAR(uint32_t, m_minimumFractureDepth, m_minimumFractureDepth, 660);
		MAKE_PADDED_VAR(bool, m_useStressSolver, m_useStressSolver, 664);
		MAKE_PADDED_VAR(float, m_stressSolverTimeDelay, m_stressSolverTimeDelay, 668);
		MAKE_PADDED_VAR(float, m_stressSolverMassThreshold, m_stressSolverMassThreshold, 672);
		MAKE_PADDED_VAR(uint32_t, m_supportDepth, m_supportDepth, 676);
		MAKE_PADDED_VAR(bool, m_useAssetDefinedSupport, m_useAssetDefinedSupport, 680);
		MAKE_PADDED_VAR(bool, m_useWorldSupport, m_useWorldSupport, 681);
		MAKE_PADDED_VAR(float, m_sleepVelocityFrameDecayConstant, m_sleepVelocityFrameDecayConstant, 684);
		MAKE_PADDED_VAR(bool, m_useHardSleeping, m_useHardSleeping, 688);
		MAKE_PADDED_VAR(bool, m_accumulateDamage, m_accumulateDamage, 689);
		MAKE_PADDED_VAR(bool, m_debrisTimeout, m_debrisTimeout, 690);
		MAKE_PADDED_VAR(bool, m_debrisMaxSeparation, m_debrisMaxSeparation, 691);
		MAKE_PADDED_VAR(bool, m_crumbleSmallestChunks, m_crumbleSmallestChunks, 692);
		MAKE_PADDED_VAR(intptr_t, m_preset, m_preset, 704);
		MAKE_PADDED_VAR(int32_t, m_targetEntityCollisionScriptName, m_targetEntityCollisionScriptName, 708);
		MAKE_PADDED_VAR(int32_t, m_parentEntityCollisionScriptEventName, m_parentEntityCollisionScriptEventName, 712);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 716);
		MAKE_PADDED_VAR(bool, m_disableObstacleOnDestruction, m_disableObstacleOnDestruction, 720);
		MAKE_PADDED_VAR(intptr_t*, m_eventOnDestruction[2], m_eventOnDestruction, 724);
		MAKE_PADDED_VAR(float, m_shadowDistanceOverride, m_shadowDistanceOverride, 752);
	};
};

class CDimmerComponent {
public:
	union {
	CDrawableComponent cdrawablecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(intptr_t, m_dimmerType, m_dimmerType, 368);
		MAKE_PADDED_VAR(bool, m_isAreaMarker, m_isAreaMarker, 372);
		MAKE_PADDED_VAR(float, m_ambientLevel, m_ambientLevel, 376);
		MAKE_PADDED_VAR(float, m_marginFactor, m_marginFactor, 380);
		MAKE_PADDED_VAR(float, m_autoHideDistance, m_autoHideDistance, 384);
	};
};

class CEncounter {
public:
	union {
	CGameplayEntity cgameplayentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(intptr_t, m_spawnTreeType, m_spawnTreeType, 536);
		MAKE_PADDED_VAR(bool, m_enabled, m_enabled, 544);
		MAKE_PADDED_VAR(bool, m_fullRespawnScheduled, m_fullRespawnScheduled, 546);
		MAKE_PADDED_VAR(bool, m_ignoreAreaTrigger, m_ignoreAreaTrigger, 547);
		MAKE_PADDED_VAR(bool, m_wasRaining, m_wasRaining, 548);
		MAKE_PADDED_VAR(bool, m_isFullRespawnTimeInGameTime, m_isFullRespawnTimeInGameTime, 549);
		MAKE_PADDED_VAR(intptr_t, m_spawnTree, m_spawnTree, 560);
		MAKE_PADDED_VAR(intptr_t*, m_creatureDefinition[2], m_creatureDefinition, 568);
		MAKE_PADDED_VAR(CEncounterParameters, m_encounterParameters, m_encounterParameters, 720);
		MAKE_PADDED_VAR(intptr_t, m_spawnArea, m_spawnArea, 728);
		MAKE_PADDED_VAR(GameTime, m_fullRespawnDelay, m_fullRespawnDelay, 748);
		MAKE_PADDED_VAR(GameTime, m_fullRespawnTime, m_fullRespawnTime, 752);
		MAKE_PADDED_VAR(float, m_conditionRetestTimeout, m_conditionRetestTimeout, 760);
		MAKE_PADDED_VAR(SSpawnTreeDespawnConfiguration, m_defaultImmediateDespawnConfiguration, m_defaultImmediateDespawnConfiguration, 768);
	};
};

class CGameplayDestructionSystemComponent {
public:
	union {
	CDestructionSystemComponent cdestructionsystemcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(CApexResource, m_m_resource, m_m_resource, 384);
		MAKE_PADDED_VAR(CMaterialGraph*, m_parameters_m_materials[2], m_parameters_m_materials, 392);
		MAKE_PADDED_VAR(intptr_t, m_m_physicalCollisionType, m_m_physicalCollisionType, 408);
		MAKE_PADDED_VAR(intptr_t, m_m_fracturedPhysicalCollisionType, m_m_fracturedPhysicalCollisionType, 448);
		MAKE_PADDED_VAR(intptr_t, m_dispacher_selection, m_dispacher_selection, 560);
		MAKE_PADDED_VAR(bool, m_dynamic, m_dynamic, 564);
		MAKE_PADDED_VAR(float, m_damageCap, m_damageCap, 592);
		MAKE_PADDED_VAR(float, m_damageThreshold, m_damageThreshold, 596);
		MAKE_PADDED_VAR(float, m_damageToRadius, m_damageToRadius, 600);
		MAKE_PADDED_VAR(int32_t, m_debrisDepth, m_debrisDepth, 604);
		MAKE_PADDED_VAR(float, m_debrisDestructionProbability, m_debrisDestructionProbability, 608);
		MAKE_PADDED_VAR(float, m_debrisLifetimeMin, m_debrisLifetimeMin, 612);
		MAKE_PADDED_VAR(float, m_debrisLifetimeMax, m_debrisLifetimeMax, 616);
		MAKE_PADDED_VAR(float, m_debrisMaxSeparationMin, m_debrisMaxSeparationMin, 620);
		MAKE_PADDED_VAR(float, m_debrisMaxSeparationMax, m_debrisMaxSeparationMax, 624);
		MAKE_PADDED_VAR(float, m_fadeOutTime, m_fadeOutTime, 628);
		MAKE_PADDED_VAR(uint32_t, m_essentialDepth, m_essentialDepth, 632);
		MAKE_PADDED_VAR(float, m_forceToDamage, m_forceToDamage, 636);
		MAKE_PADDED_VAR(float, m_fractureImpulseScale, m_fractureImpulseScale, 640);
		MAKE_PADDED_VAR(int32_t, m_impactDamageDefaultDepth, m_impactDamageDefaultDepth, 644);
		MAKE_PADDED_VAR(float, m_impactVelocityThreshold, m_impactVelocityThreshold, 648);
		MAKE_PADDED_VAR(float, m_materialStrength, m_materialStrength, 652);
		MAKE_PADDED_VAR(float, m_maxChunkSpeed, m_maxChunkSpeed, 656);
		MAKE_PADDED_VAR(uint32_t, m_minimumFractureDepth, m_minimumFractureDepth, 660);
		MAKE_PADDED_VAR(bool, m_useStressSolver, m_useStressSolver, 664);
		MAKE_PADDED_VAR(float, m_stressSolverTimeDelay, m_stressSolverTimeDelay, 668);
		MAKE_PADDED_VAR(float, m_stressSolverMassThreshold, m_stressSolverMassThreshold, 672);
		MAKE_PADDED_VAR(uint32_t, m_supportDepth, m_supportDepth, 676);
		MAKE_PADDED_VAR(bool, m_useAssetDefinedSupport, m_useAssetDefinedSupport, 680);
		MAKE_PADDED_VAR(bool, m_useWorldSupport, m_useWorldSupport, 681);
		MAKE_PADDED_VAR(float, m_sleepVelocityFrameDecayConstant, m_sleepVelocityFrameDecayConstant, 684);
		MAKE_PADDED_VAR(bool, m_useHardSleeping, m_useHardSleeping, 688);
		MAKE_PADDED_VAR(bool, m_accumulateDamage, m_accumulateDamage, 689);
		MAKE_PADDED_VAR(bool, m_debrisTimeout, m_debrisTimeout, 690);
		MAKE_PADDED_VAR(bool, m_debrisMaxSeparation, m_debrisMaxSeparation, 691);
		MAKE_PADDED_VAR(bool, m_crumbleSmallestChunks, m_crumbleSmallestChunks, 692);
		MAKE_PADDED_VAR(intptr_t, m_preset, m_preset, 704);
		MAKE_PADDED_VAR(int32_t, m_targetEntityCollisionScriptName, m_targetEntityCollisionScriptName, 708);
		MAKE_PADDED_VAR(int32_t, m_parentEntityCollisionScriptEventName, m_parentEntityCollisionScriptEventName, 712);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 716);
		MAKE_PADDED_VAR(bool, m_disableObstacleOnDestruction, m_disableObstacleOnDestruction, 720);
		MAKE_PADDED_VAR(intptr_t*, m_eventOnDestruction[2], m_eventOnDestruction, 724);
		MAKE_PADDED_VAR(float, m_shadowDistanceOverride, m_shadowDistanceOverride, 752);
	};
};

class CMeshComponent {
public:
	union {
	CMeshTypeComponent cmeshtypecomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
	};
};

class CNavmeshBorderAreaComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_lockedToSpecyficNavmesh, m_lockedToSpecyficNavmesh, 496);
		MAKE_PADDED_VAR(bool, m_isDisabled, m_isDisabled, 504);
	};
};

class CNavmeshComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(SNavmeshParams, m_navmeshParams, m_navmeshParams, 504);
		MAKE_PADDED_VAR(uint16_t, m_pathlibAreaId, m_pathlibAreaId, 576);
		MAKE_PADDED_VAR(char*, m_sharedFileName, m_sharedFileName, 580);
		MAKE_PADDED_VAR(Vector*, m_generationRootPoints[2], m_generationRootPoints, 592);
	};
};

class CNegativeAreaComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
	};
};

class CNewNPC {
public:
	union {
	CActor cactor;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(intptr_t, m_actorGroups, m_actorGroups, 644);
		MAKE_PADDED_VAR(int32_t, m_voiceTag, m_voiceTag, 648);
		MAKE_PADDED_VAR(intptr_t*, m_voiceToRandomize[2], m_voiceToRandomize, 672);
		MAKE_PADDED_VAR(float, m_aimOffset, m_aimOffset, 696);
		MAKE_PADDED_VAR(float, m_barOffset, m_barOffset, 700);
		MAKE_PADDED_VAR(int32_t, m_frontPushAnim, m_frontPushAnim, 716);
		MAKE_PADDED_VAR(int32_t, m_backPushAnim, m_backPushAnim, 720);
		MAKE_PADDED_VAR(bool, m_isAttackableByPlayer, m_isAttackableByPlayer, 760);
		MAKE_PADDED_VAR(bool, m_isCollidable, m_isCollidable, 761);
		MAKE_PADDED_VAR(bool, m_isVisibileFromFar, m_isVisibileFromFar, 762);
		MAKE_PADDED_VAR(bool, m_useHiResShadows, m_useHiResShadows, 763);
		MAKE_PADDED_VAR(bool, m_isInFFMiniGame, m_isInFFMiniGame, 765);
		MAKE_PADDED_VAR(bool, m_useAnimationEventFilter, m_useAnimationEventFilter, 767);
		MAKE_PADDED_VAR(int32_t, m_pelvisBoneName, m_pelvisBoneName, 776);
		MAKE_PADDED_VAR(int32_t, m_torsoBoneName, m_torsoBoneName, 780);
		MAKE_PADDED_VAR(int32_t, m_headBoneName, m_headBoneName, 784);
		MAKE_PADDED_VAR(int32_t, m_losTestBoneIndex, m_losTestBoneIndex, 788);
		MAKE_PADDED_VAR(intptr_t, m_behTreeMachine, m_behTreeMachine, 816);
		MAKE_PADDED_VAR(CActor, m_attackTarget, m_attackTarget, 2256);
		MAKE_PADDED_VAR(EngineTime, m_attackTargetSetTime, m_attackTargetSetTime, 2264);
		MAKE_PADDED_VAR(int32_t, m_encounterGroupUsedToSpawn, m_encounterGroupUsedToSpawn, 2328);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 2344);
		MAKE_PADDED_VAR(bool, m_aiEnabled, m_aiEnabled, 2368);
		MAKE_PADDED_VAR(bool, m_suppressBroadcastingReactions, m_suppressBroadcastingReactions, 2371);
		MAKE_PADDED_VAR(EngineTime, m_berserkTime, m_berserkTime, 2440);
		MAKE_PADDED_VAR(intptr_t, m_npcGroupType, m_npcGroupType, 2664);
	};
};

class CPartySpawnPointComponent {
public:
	union {
	CSpawnPointComponent cspawnpointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 320);
		MAKE_PADDED_VAR(SPartyWaypointHandle*, m_partyWaypoints[2], m_partyWaypoints, 336);
	};
};

class CPathLibRoughtTerrainComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(bool, m_isRoughtTerrain, m_isRoughtTerrain, 496);
	};
};

class CPatrolPointComponent {
public:
	union {
	CWanderPointComponent cwanderpointcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(bool, m_isVisible, m_isVisible, 288);
		MAKE_PADDED_VAR(CBitmapTexture, m_icon, m_icon, 296);
		MAKE_PADDED_VAR(SWanderPointConnection*, m_connectedPoints[2], m_connectedPoints, 320);
		MAKE_PADDED_VAR(float, m_wanderPointRadius, m_wanderPointRadius, 332);
	};
};

class CPlayer {
public:
	union {
	CActor cactor;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(intptr_t, m_actorGroups, m_actorGroups, 644);
		MAKE_PADDED_VAR(int32_t, m_voiceTag, m_voiceTag, 648);
		MAKE_PADDED_VAR(intptr_t*, m_voiceToRandomize[2], m_voiceToRandomize, 672);
		MAKE_PADDED_VAR(float, m_aimOffset, m_aimOffset, 696);
		MAKE_PADDED_VAR(float, m_barOffset, m_barOffset, 700);
		MAKE_PADDED_VAR(int32_t, m_frontPushAnim, m_frontPushAnim, 716);
		MAKE_PADDED_VAR(int32_t, m_backPushAnim, m_backPushAnim, 720);
		MAKE_PADDED_VAR(bool, m_isAttackableByPlayer, m_isAttackableByPlayer, 760);
		MAKE_PADDED_VAR(bool, m_isCollidable, m_isCollidable, 761);
		MAKE_PADDED_VAR(bool, m_isVisibileFromFar, m_isVisibileFromFar, 762);
		MAKE_PADDED_VAR(bool, m_useHiResShadows, m_useHiResShadows, 763);
		MAKE_PADDED_VAR(bool, m_isInFFMiniGame, m_isInFFMiniGame, 765);
		MAKE_PADDED_VAR(bool, m_useAnimationEventFilter, m_useAnimationEventFilter, 767);
		MAKE_PADDED_VAR(int32_t, m_pelvisBoneName, m_pelvisBoneName, 776);
		MAKE_PADDED_VAR(int32_t, m_torsoBoneName, m_torsoBoneName, 780);
		MAKE_PADDED_VAR(int32_t, m_headBoneName, m_headBoneName, 784);
		MAKE_PADDED_VAR(int32_t, m_losTestBoneIndex, m_losTestBoneIndex, 788);
		MAKE_PADDED_VAR(intptr_t, m_behTreeMachine, m_behTreeMachine, 816);
		MAKE_PADDED_VAR(CActor, m_attackTarget, m_attackTarget, 2256);
		MAKE_PADDED_VAR(EngineTime, m_attackTargetSetTime, m_attackTargetSetTime, 2264);
		MAKE_PADDED_VAR(int32_t, m_encounterGroupUsedToSpawn, m_encounterGroupUsedToSpawn, 2328);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 2344);
		MAKE_PADDED_VAR(intptr_t, m_presenceInterestPoint, m_presenceInterestPoint, 2384);
		MAKE_PADDED_VAR(intptr_t, m_slowMovementInterestPoint, m_slowMovementInterestPoint, 2392);
		MAKE_PADDED_VAR(intptr_t, m_fastMovementInterestPoint, m_fastMovementInterestPoint, 2400);
		MAKE_PADDED_VAR(intptr_t, m_weaponDrawnInterestPoint, m_weaponDrawnInterestPoint, 2408);
		MAKE_PADDED_VAR(intptr_t, m_weaponDrawMomentInterestPoint, m_weaponDrawMomentInterestPoint, 2416);
		MAKE_PADDED_VAR(intptr_t, m_visionInterestPoint, m_visionInterestPoint, 2424);
		MAKE_PADDED_VAR(float, m_npcVoicesetCooldown, m_npcVoicesetCooldown, 2436);
		MAKE_PADDED_VAR(bool, m_isMovable, m_isMovable, 2448);
		MAKE_PADDED_VAR(bool, m_enemyUpscaling, m_enemyUpscaling, 2449);
	};
};

class CR4FastTravelEntity {
public:
	union {
	CR4MapPinEntity cr4mappinentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_entityName, m_entityName, 512);
		MAKE_PADDED_VAR(intptr_t, m_customName, m_customName, 516);
		MAKE_PADDED_VAR(float, m_radius, m_radius, 520);
		MAKE_PADDED_VAR(bool, m_ignoreWhenExportingMapPins, m_ignoreWhenExportingMapPins, 524);
		MAKE_PADDED_VAR(int32_t, m_spotName, m_spotName, 528);
		MAKE_PADDED_VAR(int32_t, m_groupName, m_groupName, 532);
		MAKE_PADDED_VAR(int32_t, m_teleportWayPointTag, m_teleportWayPointTag, 536);
		MAKE_PADDED_VAR(bool, m_canBeReachedByBoat, m_canBeReachedByBoat, 540);
		MAKE_PADDED_VAR(bool, m_isHubExit, m_isHubExit, 541);
	};
};

class CR4Player {
public:
	union {
	CPlayer cplayer;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(intptr_t, m_actorGroups, m_actorGroups, 644);
		MAKE_PADDED_VAR(int32_t, m_voiceTag, m_voiceTag, 648);
		MAKE_PADDED_VAR(intptr_t*, m_voiceToRandomize[2], m_voiceToRandomize, 672);
		MAKE_PADDED_VAR(float, m_aimOffset, m_aimOffset, 696);
		MAKE_PADDED_VAR(float, m_barOffset, m_barOffset, 700);
		MAKE_PADDED_VAR(int32_t, m_frontPushAnim, m_frontPushAnim, 716);
		MAKE_PADDED_VAR(int32_t, m_backPushAnim, m_backPushAnim, 720);
		MAKE_PADDED_VAR(bool, m_isAttackableByPlayer, m_isAttackableByPlayer, 760);
		MAKE_PADDED_VAR(bool, m_isCollidable, m_isCollidable, 761);
		MAKE_PADDED_VAR(bool, m_isVisibileFromFar, m_isVisibileFromFar, 762);
		MAKE_PADDED_VAR(bool, m_useHiResShadows, m_useHiResShadows, 763);
		MAKE_PADDED_VAR(bool, m_isInFFMiniGame, m_isInFFMiniGame, 765);
		MAKE_PADDED_VAR(bool, m_useAnimationEventFilter, m_useAnimationEventFilter, 767);
		MAKE_PADDED_VAR(int32_t, m_pelvisBoneName, m_pelvisBoneName, 776);
		MAKE_PADDED_VAR(int32_t, m_torsoBoneName, m_torsoBoneName, 780);
		MAKE_PADDED_VAR(int32_t, m_headBoneName, m_headBoneName, 784);
		MAKE_PADDED_VAR(int32_t, m_losTestBoneIndex, m_losTestBoneIndex, 788);
		MAKE_PADDED_VAR(intptr_t, m_behTreeMachine, m_behTreeMachine, 816);
		MAKE_PADDED_VAR(CActor, m_attackTarget, m_attackTarget, 2256);
		MAKE_PADDED_VAR(EngineTime, m_attackTargetSetTime, m_attackTargetSetTime, 2264);
		MAKE_PADDED_VAR(int32_t, m_encounterGroupUsedToSpawn, m_encounterGroupUsedToSpawn, 2328);
		MAKE_PADDED_VAR(char*, m_soundListenerOverride, m_soundListenerOverride, 2344);
		MAKE_PADDED_VAR(intptr_t, m_presenceInterestPoint, m_presenceInterestPoint, 2384);
		MAKE_PADDED_VAR(intptr_t, m_slowMovementInterestPoint, m_slowMovementInterestPoint, 2392);
		MAKE_PADDED_VAR(intptr_t, m_fastMovementInterestPoint, m_fastMovementInterestPoint, 2400);
		MAKE_PADDED_VAR(intptr_t, m_weaponDrawnInterestPoint, m_weaponDrawnInterestPoint, 2408);
		MAKE_PADDED_VAR(intptr_t, m_weaponDrawMomentInterestPoint, m_weaponDrawMomentInterestPoint, 2416);
		MAKE_PADDED_VAR(intptr_t, m_visionInterestPoint, m_visionInterestPoint, 2424);
		MAKE_PADDED_VAR(float, m_npcVoicesetCooldown, m_npcVoicesetCooldown, 2436);
		MAKE_PADDED_VAR(bool, m_isMovable, m_isMovable, 2448);
		MAKE_PADDED_VAR(bool, m_enemyUpscaling, m_enemyUpscaling, 2449);
		MAKE_PADDED_VAR(intptr_t, m_uselessProp, m_uselessProp, 2544);
		MAKE_PADDED_VAR(intptr_t, m_horseWithInventory, m_horseWithInventory, 2552);
	};
};

class CStaticMeshComponent {
public:
	union {
	CMeshComponent cmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(intptr_t, m_physicalCollisionType, m_physicalCollisionType, 464);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 504);
		MAKE_PADDED_VAR(bool, m_fadeOnCameraCollision, m_fadeOnCameraCollision, 508);
	};
};

class CStorySceneEventAdditiveAnimation {
public:
	union {
	CStorySceneEventAnimation cstorysceneeventanimation;
		MAKE_PADDED_VAR(char*, m_eventName, m_eventName, 8);
		MAKE_PADDED_VAR(intptr_t, m_sceneElement, m_sceneElement, 24);
		MAKE_PADDED_VAR(float, m_startPosition, m_startPosition, 32);
		MAKE_PADDED_VAR(bool, m_isMuted, m_isMuted, 48);
		MAKE_PADDED_VAR(int32_t, m_contexID, m_contexID, 52);
		MAKE_PADDED_VAR(intptr_t, m_GUID, m_GUID, 56);
		MAKE_PADDED_VAR(intptr_t, m_interpolationEventGUID, m_interpolationEventGUID, 72);
		MAKE_PADDED_VAR(intptr_t, m_blendParentGUID, m_blendParentGUID, 88);
		MAKE_PADDED_VAR(intptr_t, m_linkParentGUID, m_linkParentGUID, 104);
		MAKE_PADDED_VAR(float, m_linkParentTimeOffset, m_linkParentTimeOffset, 120);
		MAKE_PADDED_VAR(float, m_duration, m_duration, 224);
		MAKE_PADDED_VAR(int32_t, m_actor, m_actor, 248);
		MAKE_PADDED_VAR(float, m_blendIn, m_blendIn, 252);
		MAKE_PADDED_VAR(float, m_blendOut, m_blendOut, 256);
		MAKE_PADDED_VAR(float, m_clipFront, m_clipFront, 260);
		MAKE_PADDED_VAR(float, m_clipEnd, m_clipEnd, 264);
		MAKE_PADDED_VAR(float, m_stretch, m_stretch, 268);
		MAKE_PADDED_VAR(float, m_weight, m_weight, 272);
		MAKE_PADDED_VAR(intptr_t, m_allowLookatsLevel, m_allowLookatsLevel, 276);
		MAKE_PADDED_VAR(bool, m_forceAnimationTimeFlag, m_forceAnimationTimeFlag, 280);
		MAKE_PADDED_VAR(float, m_forceAnimationTime, m_forceAnimationTime, 284);
		MAKE_PADDED_VAR(SVoiceWeightCurve, m_voiceWeightCurve, m_voiceWeightCurve, 288);
		MAKE_PADDED_VAR(bool, m_allowPoseCorrection, m_allowPoseCorrection, 332);
		MAKE_PADDED_VAR(int32_t, m_animationName, m_animationName, 352);
		MAKE_PADDED_VAR(bool, m_useMotionExtraction, m_useMotionExtraction, 356);
		MAKE_PADDED_VAR(bool, m_useFakeMotion, m_useFakeMotion, 357);
		MAKE_PADDED_VAR(bool, m_disableLookAt, m_disableLookAt, 358);
		MAKE_PADDED_VAR(float, m_disableLookAtSpeed, m_disableLookAtSpeed, 360);
		MAKE_PADDED_VAR(bool, m_useLowerBodyPartsForLookAt, m_useLowerBodyPartsForLookAt, 364);
		MAKE_PADDED_VAR(bool, m_gatherSyncTokens, m_gatherSyncTokens, 365);
		MAKE_PADDED_VAR(bool, m_muteSoundEvents, m_muteSoundEvents, 366);
		MAKE_PADDED_VAR(int32_t*, m_bonesIdx[2], m_bonesIdx, 368);
		MAKE_PADDED_VAR(float*, m_bonesWeight[2], m_bonesWeight, 380);
		MAKE_PADDED_VAR(intptr_t, m_animationType, m_animationType, 392);
		MAKE_PADDED_VAR(bool, m_addConvertToAdditive, m_addConvertToAdditive, 396);
		MAKE_PADDED_VAR(intptr_t, m_addAdditiveType, m_addAdditiveType, 400);
		MAKE_PADDED_VAR(bool, m_useWeightCurve, m_useWeightCurve, 404);
		MAKE_PADDED_VAR(SCurveData, m_weightCurve, m_weightCurve, 408);
		MAKE_PADDED_VAR(bool, m_weightCurveChanged, m_weightCurveChanged, 432);
		MAKE_PADDED_VAR(bool, m_supportsMotionExClipFront, m_supportsMotionExClipFront, 433);
		MAKE_PADDED_VAR(bool, m_convertToAdditive, m_convertToAdditive, 472);
		MAKE_PADDED_VAR(intptr_t, m_additiveType, m_additiveType, 476);
	};
};

class CStreamingAreaComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(bool, m_testInEditor, m_testInEditor, 496);
	};
};

class CSwarmLairEntity {
public:
	union {
	IBoidLairEntity iboidlairentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_boidSpeciesName, m_boidSpeciesName, 520);
		MAKE_PADDED_VAR(float, m_spawnFrequency, m_spawnFrequency, 568);
		MAKE_PADDED_VAR(float, m_range, m_range, 572);
		MAKE_PADDED_VAR(float, m_visibilityRange, m_visibilityRange, 576);
		MAKE_PADDED_VAR(int32_t, m_spawnLimit, m_spawnLimit, 580);
		MAKE_PADDED_VAR(int32_t, m_totalLifetimeSpawnLimit, m_totalLifetimeSpawnLimit, 584);
		MAKE_PADDED_VAR(intptr_t, m_lairBoundings, m_lairBoundings, 600);
		MAKE_PADDED_VAR(char*, m_defeatedStateFact, m_defeatedStateFact, 820);
		MAKE_PADDED_VAR(int32_t, m_defeatedStateFactValue, m_defeatedStateFactValue, 832);
		MAKE_PADDED_VAR(bool, m_lairDisabledAtStartup, m_lairDisabledAtStartup, 841);
	};
};

class CTriggerAreaComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
	};
};

class CTriggerAreaEnvironmentVisibilityComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(bool, m_hideTerrain, m_hideTerrain, 544);
		MAKE_PADDED_VAR(bool, m_hideFoliage, m_hideFoliage, 545);
		MAKE_PADDED_VAR(bool, m_hideWater, m_hideWater, 546);
	};
};

class CTriggerAreaExpansionPackComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(int32_t, m_targetTag, m_targetTag, 544);
		MAKE_PADDED_VAR(int32_t, m_deactivateTime, m_deactivateTime, 548);
	};
};

class CWaterComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
	};
};

class CWindAreaComponent {
public:
	union {
	CAreaComponent careacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
	};
};

class CWindowComponent {
public:
	union {
	CMeshComponent cmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(float, m_startEmissiveHour, m_startEmissiveHour, 448);
		MAKE_PADDED_VAR(float, m_startEmissiveFadeTime, m_startEmissiveFadeTime, 452);
		MAKE_PADDED_VAR(float, m_endEmissiveHour, m_endEmissiveHour, 456);
		MAKE_PADDED_VAR(float, m_endEmissiveFadeTime, m_endEmissiveFadeTime, 460);
		MAKE_PADDED_VAR(float, m_randomRange, m_randomRange, 464);
	};
};

class W3Container {
public:
	union {
	W3LockableEntity w3lockableentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(bool, m_isEnabledOnSpawn, m_isEnabledOnSpawn, 512);
		MAKE_PADDED_VAR(bool, m_lockedByKey, m_lockedByKey, 513);
		MAKE_PADDED_VAR(bool, m_shouldBeFullySaved, m_shouldBeFullySaved, 528);
	};
};

class CActionAreaComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(intptr_t, m_allowedGroups, m_allowedGroups, 544);
		MAKE_PADDED_VAR(float, m_walkToSideDistance, m_walkToSideDistance, 548);
		MAKE_PADDED_VAR(float, m_walkToBackDistance, m_walkToBackDistance, 552);
		MAKE_PADDED_VAR(float, m_walkToFrontDistance, m_walkToFrontDistance, 556);
		MAKE_PADDED_VAR(Matrix, m_fullTransformation, m_fullTransformation, 592);
		MAKE_PADDED_VAR(intptr_t*, m_animations[2], m_animations, 656);
		MAKE_PADDED_VAR(Vector, m_totalTransformation, m_totalTransformation, 672);
		MAKE_PADDED_VAR(Vector*, m_animShiftStart[2], m_animShiftStart, 688);
		MAKE_PADDED_VAR(Vector*, m_animShiftLoop[2], m_animShiftLoop, 700);
		MAKE_PADDED_VAR(Vector*, m_animShiftStop[2], m_animShiftStop, 712);
	};
};

class CAreaEnvironmentComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(CEnvironmentDefinition, m_environmentDefinition, m_environmentDefinition, 544);
		MAKE_PADDED_VAR(int32_t, m_priority, m_priority, 564);
		MAKE_PADDED_VAR(float, m_blendingDistance, m_blendingDistance, 568);
		MAKE_PADDED_VAR(float, m_blendingScale, m_blendingScale, 572);
		MAKE_PADDED_VAR(float, m_blendInTime, m_blendInTime, 576);
		MAKE_PADDED_VAR(float, m_blendOutTime, m_blendOutTime, 580);
		MAKE_PADDED_VAR(float, m_terrainBlendingDistance, m_terrainBlendingDistance, 584);
		MAKE_PADDED_VAR(bool, m_blendAboveAndBelow, m_blendAboveAndBelow, 588);
		MAKE_PADDED_VAR(bool, m_blendingCurveEnabled, m_blendingCurveEnabled, 589);
		MAKE_PADDED_VAR(SSimpleCurve, m_blendingCurve, m_blendingCurve, 592);
		MAKE_PADDED_VAR(CParticleSystem, m_rainDropsParticleSystem, m_rainDropsParticleSystem, 640);
		MAKE_PADDED_VAR(CParticleSystem, m_rainSplashesParticleSystem, m_rainSplashesParticleSystem, 648);
		MAKE_PADDED_VAR(CEntityTemplate, m_additionalEnvEntity, m_additionalEnvEntity, 656);
		MAKE_PADDED_VAR(SAreaEnvironmentPoint*, m_points[2], m_points, 664);
	};
};

class CBeehiveEntity {
public:
	union {
	W3Container w3container;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(bool, m_isEnabledOnSpawn, m_isEnabledOnSpawn, 512);
		MAKE_PADDED_VAR(bool, m_lockedByKey, m_lockedByKey, 513);
		MAKE_PADDED_VAR(bool, m_shouldBeFullySaved, m_shouldBeFullySaved, 528);
	};
};

class CBgMeshComponent {
public:
	union {
	CMeshComponent cmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
	};
};

class CBgNpcItemComponent {
public:
	union {
	CBgMeshComponent cbgmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(int32_t, m_itemName, m_itemName, 448);
		MAKE_PADDED_VAR(int32_t, m_itemCategory, m_itemCategory, 452);
		MAKE_PADDED_VAR(intptr_t, m_defaultState, m_defaultState, 456);
		MAKE_PADDED_VAR(int32_t, m_equipSlot, m_equipSlot, 460);
		MAKE_PADDED_VAR(int32_t, m_holdSlot, m_holdSlot, 464);
	};
};

class CBgNpcTriggerComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(intptr_t*, m_actions[2], m_actions, 544);
	};
};

class CBoidActivationTriggerComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(intptr_t, m_lair, m_lair, 544);
	};
};

class CDressMeshComponent {
public:
	union {
	CMeshComponent cmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(CSkeleton, m_skeleton, m_skeleton, 464);
		MAKE_PADDED_VAR(float, m_thighBoneWeight, m_thighBoneWeight, 472);
		MAKE_PADDED_VAR(float, m_shinBoneWeight, m_shinBoneWeight, 476);
		MAKE_PADDED_VAR(float, m_kneeRollBoneWeight, m_kneeRollBoneWeight, 480);
		MAKE_PADDED_VAR(float, m_ofweight, m_ofweight, 484);
		MAKE_PADDED_VAR(Vector, m_p1, m_p1, 496);
		MAKE_PADDED_VAR(Vector, m_p2, m_p2, 512);
		MAKE_PADDED_VAR(Vector, m_p3, m_p3, 528);
		MAKE_PADDED_VAR(Vector, m_r1, m_r1, 544);
		MAKE_PADDED_VAR(Vector, m_r2, m_r2, 560);
		MAKE_PADDED_VAR(Vector, m_r3, m_r3, 576);
	};
};

class CFlyingCrittersLairEntity {
public:
	union {
	CSwarmLairEntity cswarmlairentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_boidSpeciesName, m_boidSpeciesName, 520);
		MAKE_PADDED_VAR(float, m_spawnFrequency, m_spawnFrequency, 568);
		MAKE_PADDED_VAR(float, m_range, m_range, 572);
		MAKE_PADDED_VAR(float, m_visibilityRange, m_visibilityRange, 576);
		MAKE_PADDED_VAR(int32_t, m_spawnLimit, m_spawnLimit, 580);
		MAKE_PADDED_VAR(int32_t, m_totalLifetimeSpawnLimit, m_totalLifetimeSpawnLimit, 584);
		MAKE_PADDED_VAR(intptr_t, m_lairBoundings, m_lairBoundings, 600);
		MAKE_PADDED_VAR(char*, m_defeatedStateFact, m_defeatedStateFact, 820);
		MAKE_PADDED_VAR(int32_t, m_defeatedStateFactValue, m_defeatedStateFactValue, 832);
		MAKE_PADDED_VAR(bool, m_lairDisabledAtStartup, m_lairDisabledAtStartup, 841);
		MAKE_PADDED_VAR(CSwarmCellMap, m_cellMapResourceFile, m_cellMapResourceFile, 856);
		MAKE_PADDED_VAR(float, m_cellMapCellSize, m_cellMapCellSize, 888);
		MAKE_PADDED_VAR(intptr_t, m_scriptInput, m_scriptInput, 928);
	};
};

class CFlyingCrittersLairEntityScript {
public:
	union {
	CFlyingCrittersLairEntity cflyingcritterslairentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_boidSpeciesName, m_boidSpeciesName, 520);
		MAKE_PADDED_VAR(float, m_spawnFrequency, m_spawnFrequency, 568);
		MAKE_PADDED_VAR(float, m_range, m_range, 572);
		MAKE_PADDED_VAR(float, m_visibilityRange, m_visibilityRange, 576);
		MAKE_PADDED_VAR(int32_t, m_spawnLimit, m_spawnLimit, 580);
		MAKE_PADDED_VAR(int32_t, m_totalLifetimeSpawnLimit, m_totalLifetimeSpawnLimit, 584);
		MAKE_PADDED_VAR(intptr_t, m_lairBoundings, m_lairBoundings, 600);
		MAKE_PADDED_VAR(char*, m_defeatedStateFact, m_defeatedStateFact, 820);
		MAKE_PADDED_VAR(int32_t, m_defeatedStateFactValue, m_defeatedStateFactValue, 832);
		MAKE_PADDED_VAR(bool, m_lairDisabledAtStartup, m_lairDisabledAtStartup, 841);
		MAKE_PADDED_VAR(CSwarmCellMap, m_cellMapResourceFile, m_cellMapResourceFile, 856);
		MAKE_PADDED_VAR(float, m_cellMapCellSize, m_cellMapCellSize, 888);
		MAKE_PADDED_VAR(intptr_t, m_scriptInput, m_scriptInput, 928);
	};
};

class CFurComponent {
public:
	union {
	CMeshComponent cmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(CFurMeshResource, m_furMesh, m_furMesh, 448);
	};
};

class CHumbleCrittersLairEntity {
public:
	union {
	CSwarmLairEntity cswarmlairentity;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(intptr_t*, m_components[2], m_components, 240);
		MAKE_PADDED_VAR(CEntityTemplate, m_template, m_template, 264);
		MAKE_PADDED_VAR(int32_t, m_autoPlayEffectName, m_autoPlayEffectName, 300);
		MAKE_PADDED_VAR(intptr_t, m_entityStaticFlags, m_entityStaticFlags, 308);
		MAKE_PADDED_VAR(char, m_entityFlags, m_entityFlags, 312);
		MAKE_PADDED_VAR(char, m_streamingDistance, m_streamingDistance, 313);
		MAKE_PADDED_VAR(intptr_t, m_streamingDataBuffer, m_streamingDataBuffer, 328);
		MAKE_PADDED_VAR(intptr_t, m_idTag, m_idTag, 368);
		MAKE_PADDED_VAR(bool, m_isSaveable, m_isSaveable, 388);
		MAKE_PADDED_VAR(Vector, m_aimVector, m_aimVector, 416);
		MAKE_PADDED_VAR(intptr_t, m_propertyAnimationSet, m_propertyAnimationSet, 440);
		MAKE_PADDED_VAR(intptr_t, m_stats, m_stats, 448);
		MAKE_PADDED_VAR(intptr_t, m_displayName, m_displayName, 456);
		MAKE_PADDED_VAR(uint32_t, m_gameplayFlags, m_gameplayFlags, 460);
		MAKE_PADDED_VAR(bool, m_isInteractionActivator, m_isInteractionActivator, 468);
		MAKE_PADDED_VAR(intptr_t, m_focusModeVisibility, m_focusModeVisibility, 472);
		MAKE_PADDED_VAR(int32_t, m_boidSpeciesName, m_boidSpeciesName, 520);
		MAKE_PADDED_VAR(float, m_spawnFrequency, m_spawnFrequency, 568);
		MAKE_PADDED_VAR(float, m_range, m_range, 572);
		MAKE_PADDED_VAR(float, m_visibilityRange, m_visibilityRange, 576);
		MAKE_PADDED_VAR(int32_t, m_spawnLimit, m_spawnLimit, 580);
		MAKE_PADDED_VAR(int32_t, m_totalLifetimeSpawnLimit, m_totalLifetimeSpawnLimit, 584);
		MAKE_PADDED_VAR(intptr_t, m_lairBoundings, m_lairBoundings, 600);
		MAKE_PADDED_VAR(char*, m_defeatedStateFact, m_defeatedStateFact, 820);
		MAKE_PADDED_VAR(int32_t, m_defeatedStateFactValue, m_defeatedStateFactValue, 832);
		MAKE_PADDED_VAR(bool, m_lairDisabledAtStartup, m_lairDisabledAtStartup, 841);
		MAKE_PADDED_VAR(uint32_t, m_breakCounter, m_breakCounter, 848);
	};
};

class CImpostorMeshComponent {
public:
	union {
	CMeshComponent cmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(char*, m_layerGroupName, m_layerGroupName, 448);
	};
};

class CMergedMeshComponent {
public:
	union {
	CMeshComponent cmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(intptr_t*, m_objects[67], m_objects, 448);
		MAKE_PADDED_VAR(float, m_streamingDistance, m_streamingDistance, 460);
		MAKE_PADDED_VAR(char, m_renderMask, m_renderMask, 464);
	};
};

class CMergedShadowMeshComponent {
public:
	union {
	CMergedMeshComponent cmergedmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(intptr_t*, m_objects[67], m_objects, 448);
		MAKE_PADDED_VAR(float, m_streamingDistance, m_streamingDistance, 460);
		MAKE_PADDED_VAR(char, m_renderMask, m_renderMask, 464);
	};
};

class CR4InteriorAreaComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(int32_t, m_entranceTag, m_entranceTag, 544);
		MAKE_PADDED_VAR(char*, m_texture, m_texture, 548);
	};
};

class CRigidMeshComponent {
public:
	union {
	CStaticMeshComponent cstaticmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(intptr_t, m_physicalCollisionType, m_physicalCollisionType, 464);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 504);
		MAKE_PADDED_VAR(bool, m_fadeOnCameraCollision, m_fadeOnCameraCollision, 508);
		MAKE_PADDED_VAR(intptr_t, m_motionType, m_motionType, 544);
		MAKE_PADDED_VAR(float, m_linearDamping, m_linearDamping, 548);
		MAKE_PADDED_VAR(float, m_angularDamping, m_angularDamping, 552);
		MAKE_PADDED_VAR(float, m_linearVelocityClamp, m_linearVelocityClamp, 556);
	};
};

class CRigidMeshComponentCooked {
public:
	union {
	CRigidMeshComponent crigidmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(intptr_t, m_physicalCollisionType, m_physicalCollisionType, 464);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 504);
		MAKE_PADDED_VAR(bool, m_fadeOnCameraCollision, m_fadeOnCameraCollision, 508);
		MAKE_PADDED_VAR(intptr_t, m_motionType, m_motionType, 544);
		MAKE_PADDED_VAR(float, m_linearDamping, m_linearDamping, 548);
		MAKE_PADDED_VAR(float, m_angularDamping, m_angularDamping, 552);
		MAKE_PADDED_VAR(float, m_linearVelocityClamp, m_linearVelocityClamp, 556);
	};
};

class CSceneAreaComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(intptr_t, m_sceneSelectionMode, m_sceneSelectionMode, 544);
		MAKE_PADDED_VAR(intptr_t, m_scenesPriority, m_scenesPriority, 548);
		MAKE_PADDED_VAR(float, m_intervalBetweenScenes, m_intervalBetweenScenes, 552);
		MAKE_PADDED_VAR(uint32_t, m_maxConcurrentScenes, m_maxConcurrentScenes, 556);
		MAKE_PADDED_VAR(CScenesTableEntry*, m_scenes[2], m_scenes, 560);
		MAKE_PADDED_VAR(intptr_t, m_actorsType, m_actorsType, 572);
	};
};

class CScriptedDestroyableComponent {
public:
	union {
	CRigidMeshComponent crigidmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(intptr_t, m_physicalCollisionType, m_physicalCollisionType, 464);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 504);
		MAKE_PADDED_VAR(bool, m_fadeOnCameraCollision, m_fadeOnCameraCollision, 508);
		MAKE_PADDED_VAR(intptr_t, m_motionType, m_motionType, 544);
		MAKE_PADDED_VAR(float, m_linearDamping, m_linearDamping, 548);
		MAKE_PADDED_VAR(float, m_angularDamping, m_angularDamping, 552);
		MAKE_PADDED_VAR(float, m_linearVelocityClamp, m_linearVelocityClamp, 556);
		MAKE_PADDED_VAR(intptr_t, m_destroyWay, m_destroyWay, 576);
	};
};

class CSoftTriggerAreaComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(intptr_t, m_outerClippingAreaTags, m_outerClippingAreaTags, 560);
		MAKE_PADDED_VAR(bool, m_invertPenetrationFraction, m_invertPenetrationFraction, 572);
		MAKE_PADDED_VAR(intptr_t, m_outerIncludedChannels, m_outerIncludedChannels, 576);
		MAKE_PADDED_VAR(intptr_t, m_outerExcludedChannels, m_outerExcludedChannels, 580);
	};
};

class CSoundAmbientAreaComponent {
public:
	union {
	CSoftTriggerAreaComponent csofttriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(intptr_t, m_outerClippingAreaTags, m_outerClippingAreaTags, 560);
		MAKE_PADDED_VAR(bool, m_invertPenetrationFraction, m_invertPenetrationFraction, 572);
		MAKE_PADDED_VAR(intptr_t, m_outerIncludedChannels, m_outerIncludedChannels, 576);
		MAKE_PADDED_VAR(intptr_t, m_outerExcludedChannels, m_outerExcludedChannels, 580);
		MAKE_PADDED_VAR(int32_t*, m_banksDependency[2], m_banksDependency, 628);
		MAKE_PADDED_VAR(float, m_maxDistance, m_maxDistance, 644);
		MAKE_PADDED_VAR(bool, m_occlusionEnabled, m_occlusionEnabled, 648);
		MAKE_PADDED_VAR(intptr_t, m_soundEvents, m_soundEvents, 688);
		MAKE_PADDED_VAR(SReverbDefinition, m_reverb, m_reverb, 700);
		MAKE_PADDED_VAR(float, m_outerListnerReverbRatio, m_outerListnerReverbRatio, 716);
		MAKE_PADDED_VAR(intptr_t, m_customEventOnEnter, m_customEventOnEnter, 720);
		MAKE_PADDED_VAR(intptr_t*, m_soundEventsOnEnter[2], m_soundEventsOnEnter, 732);
		MAKE_PADDED_VAR(intptr_t*, m_soundEventsOnExit[2], m_soundEventsOnExit, 744);
		MAKE_PADDED_VAR(intptr_t*, m_wallaSoundEvents[2], m_wallaSoundEvents, 756);
		MAKE_PADDED_VAR(float, m_intensityParameter, m_intensityParameter, 1216);
		MAKE_PADDED_VAR(float, m_intensityParameterFadeTime, m_intensityParameterFadeTime, 1220);
		MAKE_PADDED_VAR(bool, m_priorityParameterMusic, m_priorityParameterMusic, 1224);
		MAKE_PADDED_VAR(float, m_parameterEnteringTime, m_parameterEnteringTime, 1228);
		MAKE_PADDED_VAR(intptr_t, m_parameterEnteringCurve, m_parameterEnteringCurve, 1232);
		MAKE_PADDED_VAR(float, m_parameterExitingTime, m_parameterExitingTime, 1236);
		MAKE_PADDED_VAR(intptr_t, m_parameterExitingCurve, m_parameterExitingCurve, 1240);
		MAKE_PADDED_VAR(bool, m_useListernerDistance, m_useListernerDistance, 1244);
		MAKE_PADDED_VAR(bool, m_enterExitEventsUsePosition, m_enterExitEventsUsePosition, 1245);
		MAKE_PADDED_VAR(SSoundGameParameterValue*, m_parameters[2], m_parameters, 1248);
		MAKE_PADDED_VAR(SSoundParameterCullSettings*, m_parameterCulling[2], m_parameterCulling, 1260);
		MAKE_PADDED_VAR(intptr_t*, m_dynamicParameters[2], m_dynamicParameters, 1272);
		MAKE_PADDED_VAR(SSoundAmbientDynamicSoundEvents*, m_dynamicEvents[2], m_dynamicEvents, 1284);
		MAKE_PADDED_VAR(bool, m_fitWaterShore, m_fitWaterShore, 1296);
		MAKE_PADDED_VAR(uint32_t, m_waterGridCellCount, m_waterGridCellCount, 1300);
		MAKE_PADDED_VAR(float, m_waterLevelOffset, m_waterLevelOffset, 1304);
		MAKE_PADDED_VAR(bool, m_fitFoliage, m_fitFoliage, 1308);
		MAKE_PADDED_VAR(float, m_foliageMaxDistance, m_foliageMaxDistance, 1312);
		MAKE_PADDED_VAR(uint32_t, m_foliageStepNeighbors, m_foliageStepNeighbors, 1316);
		MAKE_PADDED_VAR(float, m_foliageVitalAreaRadius, m_foliageVitalAreaRadius, 1320);
		MAKE_PADDED_VAR(uint32_t, m_foliageVitalAreaPoints, m_foliageVitalAreaPoints, 1324);
		MAKE_PADDED_VAR(float, m_wallaEmitterSpread, m_wallaEmitterSpread, 1328);
		MAKE_PADDED_VAR(bool, m_isGate, m_isGate, 1380);
		MAKE_PADDED_VAR(bool, m_isWalla, m_isWalla, 1381);
		MAKE_PADDED_VAR(float, m_gatewayRotation, m_gatewayRotation, 1388);
		MAKE_PADDED_VAR(float, m_wallaOmniFactor, m_wallaOmniFactor, 1392);
		MAKE_PADDED_VAR(float, m_maxDistanceVertical, m_maxDistanceVertical, 1400);
		MAKE_PADDED_VAR(float, m_wallaMinDistance, m_wallaMinDistance, 1584);
		MAKE_PADDED_VAR(float, m_wallaMaxDistance, m_wallaMaxDistance, 1588);
		MAKE_PADDED_VAR(float, m_wallaBoxExtention, m_wallaBoxExtention, 1592);
		MAKE_PADDED_VAR(float, m_wallaRotation, m_wallaRotation, 1596);
		MAKE_PADDED_VAR(float, m_wallaAfraidRetriggerTime, m_wallaAfraidRetriggerTime, 1600);
		MAKE_PADDED_VAR(float, m_wallaAfraidDecreaseRate, m_wallaAfraidDecreaseRate, 1608);
	};
};

class CStandPhysicalMaterialAreaComponent {
public:
	union {
	CTriggerAreaComponent ctriggerareacomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(Vector*, m_localPoints[2], m_localPoints, 336);
		MAKE_PADDED_VAR(Vector*, m_worldPoints[2], m_worldPoints, 348);
		MAKE_PADDED_VAR(float, m_height, m_height, 432);
		MAKE_PADDED_VAR(Color, m_color, m_color, 436);
		MAKE_PADDED_VAR(intptr_t, m_terrainSide, m_terrainSide, 440);
		MAKE_PADDED_VAR(bool, m_saveShapeToLayer, m_saveShapeToLayer, 444);
		MAKE_PADDED_VAR(intptr_t, m_clippingMode, m_clippingMode, 464);
		MAKE_PADDED_VAR(intptr_t, m_clippingAreaTags, m_clippingAreaTags, 468);
		MAKE_PADDED_VAR(intptr_t, m_includedChannels, m_includedChannels, 512);
		MAKE_PADDED_VAR(intptr_t, m_excludedChannels, m_excludedChannels, 516);
		MAKE_PADDED_VAR(bool, m_isEnabled, m_isEnabled, 520);
		MAKE_PADDED_VAR(bool, m_enableCCD, m_enableCCD, 521);
		MAKE_PADDED_VAR(uint32_t, m_triggerPriority, m_triggerPriority, 524);
		MAKE_PADDED_VAR(int32_t, m_physicalMaterialName, m_physicalMaterialName, 544);
	};
};

class CBoatBodyComponent {
public:
	union {
	CRigidMeshComponent crigidmeshcomponent;
		MAKE_PADDED_VAR(intptr_t, m_transform, m_transform, 176);
		MAKE_PADDED_VAR(intptr_t, m_transformParent, m_transformParent, 184);
		MAKE_PADDED_VAR(intptr_t, m_tags, m_tags, 192);
		MAKE_PADDED_VAR(intptr_t, m_guid, m_guid, 204);
		MAKE_PADDED_VAR(char*, m_name, m_name, 240);
		MAKE_PADDED_VAR(bool, m_isStreamed, m_isStreamed, 280);
		MAKE_PADDED_VAR(Box, m_boundingBox, m_boundingBox, 304);
		MAKE_PADDED_VAR(intptr_t, m_drawableFlags, m_drawableFlags, 352);
		MAKE_PADDED_VAR(intptr_t, m_lightChannels, m_lightChannels, 356);
		MAKE_PADDED_VAR(intptr_t, m_renderingPlane, m_renderingPlane, 360);
		MAKE_PADDED_VAR(int32_t, m_forceLODLevel, m_forceLODLevel, 376);
		MAKE_PADDED_VAR(uint16_t, m_forceAutoHideDistance, m_forceAutoHideDistance, 380);
		MAKE_PADDED_VAR(intptr_t, m_shadowImportanceBias, m_shadowImportanceBias, 384);
		MAKE_PADDED_VAR(Vector, m_defaultEffectParams, m_defaultEffectParams, 400);
		MAKE_PADDED_VAR(Color, m_defaultEffectColor, m_defaultEffectColor, 416);
		MAKE_PADDED_VAR(CMesh, m_mesh, m_mesh, 432);
		MAKE_PADDED_VAR(intptr_t, m_physicalCollisionType, m_physicalCollisionType, 464);
		MAKE_PADDED_VAR(intptr_t, m_pathLibCollisionType, m_pathLibCollisionType, 504);
		MAKE_PADDED_VAR(bool, m_fadeOnCameraCollision, m_fadeOnCameraCollision, 508);
		MAKE_PADDED_VAR(intptr_t, m_motionType, m_motionType, 544);
		MAKE_PADDED_VAR(float, m_linearDamping, m_linearDamping, 548);
		MAKE_PADDED_VAR(float, m_angularDamping, m_angularDamping, 552);
		MAKE_PADDED_VAR(float, m_linearVelocityClamp, m_linearVelocityClamp, 556);
		MAKE_PADDED_VAR(intptr_t, m_cutsceneBoneIndex, m_cutsceneBoneIndex, 720);
	};
};


#endif